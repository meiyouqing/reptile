{"content":"<p><span style=\"font-family: courier new,courier;\">&#x4F5C;&#x8005;&#xFF1A;Vamei &#x51FA;&#x5904;&#xFF1A;http://www.cnblogs.com/vamei &#x6B22;&#x8FCE;&#x8F6C;&#x8F7D;&#xFF0C;&#x4E5F;&#x8BF7;&#x4FDD;&#x7559;&#x8FD9;&#x6BB5;&#x58F0;&#x660E;&#x3002;&#x8C22;&#x8C22;&#xFF01;</span></p>\r\n<p>&#xA0;</p>\r\n<p><span style=\"font-family: courier new,courier;\"><span style=\"color: #ff0000;\">&#x6808;(stack)</span>&#x662F;&#x7B80;&#x5355;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF0C;&#x4F46;&#x5728;&#x8BA1;&#x7B97;&#x673A;&#x4E2D;&#x4F7F;&#x7528;&#x5E7F;&#x6CDB;&#x3002;&#x5B83;&#x662F;&#x6709;&#x5E8F;&#x7684;&#x5143;&#x7D20;&#x96C6;&#x5408;&#x3002;&#x6808;&#x6700;&#x663E;&#x8457;&#x7684;&#x7279;&#x5F81;&#x662F;<span style=\"color: #ff0000;\">LIFO</span> (Last In, First Out, &#x540E;&#x8FDB;&#x5148;&#x51FA;)&#x3002;&#x5F53;&#x6211;&#x4EEC;&#x5F80;&#x7BB1;&#x5B50;&#x91CC;&#x5B58;&#x653E;&#x4E00;&#x53E0;&#x4E66;&#x65F6;&#xFF0C;&#x5148;&#x5B58;&#x653E;&#x7684;&#x4E66;&#x5728;&#x7BB1;&#x5B50;&#x4E0B;&#x9762;&#xFF0C;&#x6211;&#x4EEC;&#x5FC5;&#x987B;&#x5C06;&#x540E;&#x5B58;&#x653E;&#x7684;&#x4E66;&#x53D6;&#x51FA;&#x6765;&#xFF0C;&#x624D;&#x80FD;&#x770B;&#x5230;&#x548C;&#x62FF;&#x51FA;&#x65E9;&#x5148;&#x5B58;&#x653E;&#x7684;&#x4E66;&#x3002; </span></p>\r\n<p><span style=\"font-family: courier new,courier;\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://images.cnitblog.com/blog/413416/201303/14203320-a5c461236dbf43738647757c5ed5acdc.jpg\" alt=\"\" width=\"514\" height=\"514\"></span></p>\r\n<p>&#xA0;</p>\r\n<p>&#xA0;</p>\r\n<p><span style=\"font-family: courier new,courier;\">&#x6808;&#x4E2D;&#x7684;&#x6BCF;&#x4E2A;&#x5143;&#x7D20;&#x79F0;&#x4E3A;&#x4E00;&#x4E2A;<span style=\"color: #ff0000;\">frame</span>&#x3002;&#x800C;<span style=\"color: #ff0000;\">&#x6700;&#x4E0A;&#x5C42;&#x5143;&#x7D20;</span>&#x79F0;&#x4E3A;<span style=\"color: #ff0000;\">top frame</span>&#x3002;&#x6808;&#x53EA;&#x652F;&#x6301;&#x4E09;&#x4E2A;&#x64CD;&#x4F5C;&#xFF0C; pop, top, push&#x3002;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">pop&#x53D6;&#x51FA;&#x6808;&#x4E2D;&#x6700;&#x4E0A;&#x5C42;&#x5143;&#x7D20;(8)&#xFF0C;&#x6808;&#x7684;<span style=\"background-color: #ffffff;\">&#x6700;&#x4E0A;&#x5C42;&#x5143;&#x7D20;</span>&#x53D8;&#x4E3A;&#x65E9;&#x5148;&#x8FDB;&#x5165;&#x7684;&#x5143;&#x7D20;(9)&#x3002;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">top&#x67E5;&#x770B;&#x6808;&#x7684;&#x6700;&#x4E0A;&#x5C42;&#x5143;&#x7D20;(8)&#x3002;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">push&#x5C06;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x5143;&#x7D20;(5)&#x653E;&#x5728;&#x6808;&#x7684;&#x6700;&#x4E0A;&#x5C42;&#x3002;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\"><span style=\"font-family: courier new,courier;\">&#x6808;&#x4E0D;&#x652F;&#x6301;&#x5176;&#x4ED6;&#x64CD;&#x4F5C;&#x3002;&#x5982;&#x679C;&#x60F3;&#x53D6;&#x51FA;&#x5143;&#x7D20;12, &#x5FC5;&#x987B;&#x8FDB;&#x884C;3&#x6B21;pop&#x64CD;&#x4F5C;&#x3002; </span></span></p>\r\n<p><span style=\"font-family: courier new,courier;\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://images.cnitblog.com/blog/413416/201303/14202428-55733c35a1504043bd9f8aa9d57059cb.png\" alt=\"\"></span></p>\r\n<p style=\"text-align: center;\"><span style=\"font-family: courier new,courier;\">&#x6808;&#x4EE5;&#x53CA;pop, push, top&#x64CD;&#x4F5C;</span></p>\r\n<p>&#xA0;</p>\r\n<p>&#xA0;</p>\r\n<p>&#xA0;</p>\r\n<p><span style=\"color: #000000; font-family: courier new,courier;\">&#x6808;&#x6700;&#x7ECF;&#x5178;&#x7684;&#x8BA1;&#x7B97;&#x673A;&#x5E94;&#x7528;&#x662F;&#x51FD;&#x6570;&#x8C03;&#x7528;&#x3002;&#x6BCF;&#x4E2A;&#x8FDB;&#x7A0B;&#x90FD;&#x4F1A;&#x6709;&#x4E00;&#x4E2A;&#x6808;&#xFF0C;&#x6BCF;&#x4E2A;frame&#x4E2D;&#x8BB0;&#x5F55;&#x4E86;&#x8C03;&#x7528;&#x51FD;&#x6570;&#x7684;&#x53C2;&#x6570;&#xFF0C;&#x81EA;&#x52A8;&#x53D8;&#x91CF;&#x548C;&#x8FD4;&#x56DE;&#x5730;&#x5740;&#x3002;&#x5F53;&#x8BE5;&#x51FD;&#x6570;&#x8C03;&#x7528;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x51FD;&#x6570;&#x65F6;&#xFF0C;&#x6808;&#x4E2D;&#x4F1A; push&#x4E00;&#x4E2A;frame&#x3002;&#x5F53;&#x51FD;&#x6570;&#x6267;&#x884C;&#x5B8C;&#x6BD5;&#x8FD4;&#x56DE;&#x65F6;&#xFF0C;&#x8BE5;frame&#x4F1A;pop&#xFF0C;&#x4ECE;&#x800C;&#x8FDB;&#x5165;&#x8C03;&#x7528;&#x8BE5;&#x51FD;&#x6570;&#x7684;&#x539F;&#x51FD;&#x6570;&#xFF0C;&#x7EE7;&#x7EED;&#x6267;&#x884C;&#x3002;&#x8BE6;&#x7EC6;&#x8BF7;&#x53C2;&#x9605;<a title=\"&#x53D1;&#x5E03;&#x4E8E;2012-10-09 17:10\" href=\"http://www.cnblogs.com/vamei/archive/2012/10/09/2715388.html\">Linux&#x4ECE;&#x7A0B;&#x5E8F;&#x5230;&#x8FDB;&#x7A0B;</a></span></p>\r\n<p><span style=\"color: #000000; font-family: courier new,courier;\">&#x5B9E;&#x9645;&#x4F7F;&#x7528;&#x7684;&#x6808;&#x5E76;&#x4E0D;&#x4E00;&#x5B9A;&#x7B26;&#x5408;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x7684;&#x6808;&#x3002;&#x6BD4;&#x5982;&#x8BF4;&#xFF0C;&#x6709;&#x7684;&#x8BED;&#x8A00;&#x5141;&#x8BB8;&#x88AB;&#x8C03;&#x7528;&#x51FD;&#x6570;&#x67E5;&#x770B;<span style=\"color: #ff0000;\">&#x975E;top frame</span>&#x7684;&#x8BB0;&#x5F55;&#x3002;&#x8FD9;&#x6837;&#x7684;&#x6808;&#x66F4;&#x7C7B;&#x4F3C;&#x4E8E;&#x4E0B;&#x9762;&#x7684;&#x7ECF;&#x5178;&#x6E38;&#x620F;</span></p>\r\n<p>&#xA0;<img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://images.cnitblog.com/blog/413416/201303/14210036-768caff9a01f46aaa2984c50208f2c98.jpg\" alt=\"\"></p>\r\n<p>&#xA0;</p>\r\n<h3><span style=\"font-family: courier new,courier;\">&#x6808;&#x7684;C&#x5B9E;&#x73B0; (&#x57FA;&#x4E8E;&#x8868;)</span></h3>\r\n<p>&#x7531;&#x4E8E;&#x6808;&#x662F;&#x9650;&#x5B9A;&#x4E86;&#x64CD;&#x4F5C;&#x7684;&#x6709;&#x5E8F;&#x7684;&#x5143;&#x7D20;&#x96C6;&#x5408;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x65E2;&#x53EF;&#x4EE5;&#x5728;&#x6570;&#x7EC4;&#x7684;&#x57FA;&#x7840;&#x4E0A;&#x6765;&#x5B9E;&#x73B0;&#x6808;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x5728;&#x8868;&#x7684;&#x57FA;&#x7840;&#x4E0A;&#x6765;&#x5B9E;&#x73B0;&#x6808;&#x3002;&#x5982;&#x679C;&#x4F7F;&#x7528;&#x6570;&#x7EC4;&#x6765;&#x5B9E;&#x73B0;&#x6808;&#xFF0C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x9884;&#x7559;&#x5145;&#x8DB3;&#x7684;&#x7A7A;&#x95F4;&#x4F9B;&#x6808;&#x4F7F;&#x7528;&#xFF0C;&#x5E76;&#x9700;&#x8981;&#x4E00;&#x4E2A;&#x4E0B;&#x6807;&#x6765;&#x8BB0;&#x5F55;&#x6700;&#x4E0A;&#x5C42;&#x5143;&#x7D20;&#x7684;&#x4F4D;&#x7F6E;&#x3002;</p>\r\n<p>&#x6211;&#x4EEC;&#x8FD9;&#x91CC;&#x4F7F;&#x7528;&#x5355;&#x5411;&#x94FE;&#x8868;&#x6765;&#x5B9E;&#x73B0;&#x6808;&#x3002;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5229;&#x7528;&#x4ECB;&#x7ECD;&#x8868;(list)&#x7684;&#x6587;&#x7AE0;&#x4E2D;&#x5DF2;&#x7ECF;&#x5B9A;&#x4E49;&#x7684;&#x64CD;&#x4F5C;&#x6765;&#x5B9E;&#x73B0;&#x4E09;&#x4E2A;&#x64CD;&#x4F5C;&#xFF0C;&#x4F46;&#x8FD9;&#x91CC;&#x76F8;&#x5BF9;&#x72EC;&#x7ACB;&#x7684;&#x91CD;&#x5199;&#x4E86;&#x4EE3;&#x7801;&#x3002;</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> By Vamei </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> use single-linked list to implement stack </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\n#include </span>&lt;stdio.h&gt;<span style=\"color: #000000;\">\r\n#include </span>&lt;stdlib.h&gt;<span style=\"color: #000000;\">\r\n\r\ntypedef </span><span style=\"color: #0000ff;\">struct</span> node *<span style=\"color: #000000;\">position;\r\ntypedef </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> ElementTP;\r\n\r\n</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> point to the  head node of the list</span>\r\ntypedef <span style=\"color: #0000ff;\">struct</span> node *<span style=\"color: #000000;\">STACK;\r\n \r\n</span><span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> node {\r\n    ElementTP element;\r\n    position next;\r\n};\r\n\r\nSTACK init_stack(</span><span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\">);\r\n</span><span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> delete_stack(STACK);\r\nElementTP top(STACK);\r\n</span><span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> push(STACK, ElementTP);\r\nElementTP pop(STACK);\r\n</span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> is_null(STACK);\r\n\r\n</span><span style=\"color: #0000ff;\">void</span> main(<span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\">)\r\n{\r\n    ElementTP a;\r\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i;\r\n    STACK sk;\r\n    sk </span>=<span style=\"color: #000000;\"> init_stack();\r\n    push(sk, </span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);\r\n    push(sk, </span><span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">);\r\n    push(sk, </span><span style=\"color: #800080;\">8</span><span style=\"color: #000000;\">);\r\n    printf(</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #800000;\">Stack is null? %d\\n</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #000000;\">, is_null(sk));\r\n    </span><span style=\"color: #0000ff;\">for</span> (i=<span style=\"color: #800080;\">0</span>; i&lt;<span style=\"color: #800080;\">3</span>; i++<span style=\"color: #000000;\">) {\r\n        a </span>=<span style=\"color: #000000;\"> pop(sk);\r\n        printf(</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #800000;\">pop: %d\\n</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #000000;\">, a);\r\n    }\r\n\r\n    printf(</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #800000;\">Stack is null? %d\\n</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #000000;\">, is_null(sk));    \r\n    delete_stack(sk);\r\n}\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">\r\n * initiate the stack\r\n * malloc the head node.\r\n * Head node doesn&apos;t store valid data\r\n * head-&gt;next is the top node\r\n </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\nSTACK init_stack(</span><span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\">)\r\n{\r\n    position np;\r\n    STACK    sk;\r\n    np </span>= (position) malloc(<span style=\"color: #0000ff;\">sizeof</span>(<span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> node));\r\n    np</span>-&gt;next     = NULL;  <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> sk-&gt;next is the top node</span>\r\n    sk =<span style=\"color: #000000;\"> np; \r\n    </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> sk;\r\n}\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> pop out all elements \r\n * and then delete head node\r\n </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> delete_stack(STACK sk)\r\n{\r\n    </span><span style=\"color: #0000ff;\">while</span>(!<span style=\"color: #000000;\">is_null(sk)) {\r\n        pop(sk);\r\n    }\r\n    free(sk);\r\n}\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> \r\n * View the top frame\r\n </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\nElementTP top(STACK sk)\r\n{\r\n    </span><span style=\"color: #0000ff;\">return</span> (sk-&gt;next-&gt;<span style=\"color: #000000;\">element);\r\n}\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">\r\n * push a value into the stack\r\n </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> push(STACK sk, ElementTP value) \r\n{\r\n    position np, oldTop;\r\n    oldTop </span>= sk-&gt;<span style=\"color: #000000;\">next;    \r\n\r\n    np </span>= (position) malloc(<span style=\"color: #0000ff;\">sizeof</span>(<span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> node));\r\n    np</span>-&gt;element  =<span style=\"color: #000000;\"> value;\r\n    np</span>-&gt;next     = sk-&gt;<span style=\"color: #000000;\">next;\r\n\r\n    sk</span>-&gt;next     =<span style=\"color: #000000;\"> np; \r\n}\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> \r\n * pop out the top value\r\n </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\nElementTP pop(STACK sk)\r\n{\r\n    ElementTP element;\r\n    position top, newTop;\r\n    </span><span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (is_null(sk)) {\r\n        printf(</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #800000;\">pop() on an empty stack</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #000000;\">);\r\n        exit(</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);\r\n    } \r\n    </span><span style=\"color: #0000ff;\">else</span><span style=\"color: #000000;\"> {\r\n        top      </span>= sk-&gt;<span style=\"color: #000000;\">next;\r\n        element  </span>= top-&gt;<span style=\"color: #000000;\">element;     \r\n        newTop   </span>= top-&gt;<span style=\"color: #000000;\">next;\r\n        sk</span>-&gt;next     =<span style=\"color: #000000;\"> newTop;\r\n        free(top);\r\n        </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> element;\r\n    } \r\n}\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> check whether a stack is empty</span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> is_null(STACK sk)\r\n{\r\n    </span><span style=\"color: #0000ff;\">return</span> (sk-&gt;next ==<span style=\"color: #000000;\"> NULL);\r\n}</span></pre>\r\n</div>\r\n<p><span style=\"font-family: courier new,courier;\">&#xA0;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#x8F93;&#x51FA;&#x7ED3;&#x679C;:</span></p>\r\n<p><span style=\"color: #800000; font-family: courier new,courier;\">Stack is null? 0</span><br><span style=\"color: #800000; font-family: courier new,courier;\">pop: 8</span><br><span style=\"color: #800000; font-family: courier new,courier;\">pop: 2</span><br><span style=\"color: #800000; font-family: courier new,courier;\">pop: 1</span><br><span style=\"color: #800000; font-family: courier new,courier;\">Stack is null? 1</span></p>\r\n<p>&#xA0;</p>\r\n<h3>&#x603B;&#x7ED3;</h3>\r\n<p>&#x6808;, LIFO</p>\r\n<p>pop, push, top</p>\r\n<p>&#xA0;</p>\r\n<p>&#x6B22;&#x8FCE;&#x7EE7;&#x7EED;&#x9605;&#x8BFB;<a href=\"http://www.cnblogs.com/vamei/archive/2013/03/22/2974052.html\">&#x201C;&#x7EB8;&#x4E0A;&#x8C08;&#x5175;: &#x7B97;&#x6CD5;&#x4E0E;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x201D;</a>&#x7CFB;&#x5217;&#x3002;</p>\r\n<p>&#xA0;</p>\r\n<p>Update: </p>\r\n<p>&#x6211;&#x4E4B;&#x524D;&#x662F;&#x7528;&#x53CC;&#x5411;&#x5FAA;&#x73AF;&#x94FE;&#x8868;&#x5B9E;&#x73B0;&#x7684;&#x6808;&#xFF0C;&#x540E;&#x6765;&#x53D1;&#x73B0;&#x8FD9;&#x6837;&#x6CA1;&#x6709;&#x5FC5;&#x8981;&#x3002;&#x5B83;&#x4E0D;&#x80FD;&#x7ED9;&#x6808;&#x5E26;&#x6765;&#x989D;&#x5916;&#x7684;&#x597D;&#x5904;&#xFF0C;&#x8FD8;&#x4F1A;&#x589E;&#x52A0;&#x6240;&#x9700;&#x7684;&#x5185;&#x5B58;&#x7A7A;&#x95F4;&#x3002;</p>"}