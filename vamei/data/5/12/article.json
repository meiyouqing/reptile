{"content":"<p><span style=\"font-family: courier new,courier;\">&#x4F5C;&#x8005;&#xFF1A;Vamei &#x51FA;&#x5904;&#xFF1A;http://www.cnblogs.com/vamei &#x6B22;&#x8FCE;&#x8F6C;&#x8F7D;&#xFF0C;&#x4E5F;&#x8BF7;&#x4FDD;&#x7559;&#x8FD9;&#x6BB5;&#x58F0;&#x660E;&#x3002;&#x8C22;&#x8C22;&#xFF01;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#xA0;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#x300A;&#x6587;&#x660E;&#x300B;&#x662F;&#x4E00;&#x6B3E;&#x98CE;&#x9761;20&#x591A;&#x5E74;&#x7684;&#x56DE;&#x5408;&#x5236;&#x7B56;&#x7565;&#x6E38;&#x620F;&#xFF0C;&#x7531;Sid Meier&#x5F00;&#x53D1;&#x3002;&#x300A;&#x6587;&#x660E;&#x300B;&#x7ED3;&#x6784;&#x5B8F;&#x5927;&#xFF0C;&#x5185;&#x5BB9;&#x4E30;&#x5BCC;&#xFF0C;&#x73A9;&#x6CD5;&#x591A;&#x6837;&#xFF0C;&#x6E38;&#x620F;&#x6027;&#x5F3A;&#xFF0C;&#x79F0;&#x5F97;&#x4E0A;&#x662F;&#x5386;&#x53F2;&#x4E0A;&#x6700;&#x4F1F;&#x5927;&#x7684;&#x6E38;&#x620F;&#x3002;&#x5728;&#x6587;&#x660E;&#x4E2D;&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x9009;&#x62E9;&#x67D0;&#x4E2A;&#x6587;&#x660E;&#x7684;&#xFF0C;&#x4ECE;&#x90E8;&#x843D;&#x5F00;&#x59CB;&#x53D1;&#x5C55;&#xFF0C;&#x5728;&#x63A5;&#x4E0B;&#x6765;&#x7684;&#x51E0;&#x5343;&#x5E74;&#x7684;&#x5386;&#x53F2;&#x4E2D;&#xFF0C;&#x53D1;&#x5C55;&#x79D1;&#x6280;&#x3001;&#x5F00;&#x8352;&#x62D3;&#x91CE;&#x3001;&#x53D1;&#x52A8;&#x6218;&#x4E89;&#x7B49;&#x7B49;&#x3002;&#x6E38;&#x620F;&#x5728;&#x4FDD;&#x6301;&#x81EA;&#x7531;&#x5EA6;&#x7684;&#x524D;&#x63D0;&#x4E0B;&#xFF0C;&#x5BF9;&#x5404;&#x4E2A;&#x793E;&#x4F1A;&#x6587;&#x660E;&#x7684;&#x53D1;&#x5C55;&#x987A;&#x5E8F;&#x6709;&#x5F88;&#x597D;&#x7684;&#x4EFF;&#x771F;&#x6027;&#xFF0C;&#x8BA9;&#x73A9;&#x5BB6;&#x4EFF;&#x4F5B;&#x7F6E;&#x8EAB;&#x4E8E;&#x5386;&#x53F2;&#x957F;&#x6CB3;&#xFF0C;&#x5750;&#x89C2;&#x6587;&#x660E;&#x7684;&#x8D77;&#x843D;&#x3002;&#x7F8E;&#x56FD;&#x7684;&#x4E00;&#x4E9B;&#x5927;&#x5B66;&#x7684;&#x5386;&#x53F2;&#x7CFB;&#x751A;&#x81F3;&#x4E8E;&#x4F7F;&#x7528;&#x8BE5;&#x6E38;&#x620F;&#x4F5C;&#x4E3A;&#x6559;&#x5B66;&#x5DE5;&#x5177;&#x3002;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">(&#x4F5C;&#x4E3A;&#x300A;&#x6587;&#x660E;&#x300B;&#x7684;&#x5FE0;&#x5B9E;&#x7231;&#x597D;&#x8005;&#xFF0C;&#x591A;&#x5C11;&#x4E2A;&#x663C;&#x591C;&#x8017;&#x8D39;&#x5728;&#x4E00;&#x5F20;&#x5F20;&#x5730;&#x56FE;&#x4E0A;&#x554A;&#x3002;&#x597D;&#x5427;&#xFF0C;&#x662F;&#x4E3A;&#x4E86;&#x5B66;&#x4E60;&#x5386;&#x53F2;&#x3002;)</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#xA0;</span></p>\r\n<h3><span style=\"font-family: courier new,courier;\">&#x201C;&#x79D1;&#x6280;&#x6811;&#x201D;</span></h3>\r\n<p><span style=\"font-family: courier new,courier;\"><img style=\"margin-right: auto; margin-left: auto; display: block;\" src=\"http://images.cnitblog.com/blog/413416/201308/02135405-fb6c0ed334904aa3bcc1ce8b4c14df15.jpg\" alt=\"\"></span></p>\r\n<p style=\"text-align: center;\"><span style=\"font-family: courier new,courier;\">&#x300A;&#x6587;&#x660E;&#x300B;&#x4E2D;&#x7684;&#x79D1;&#x6280;&#x6811;</span></p>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#x6E38;&#x620F;&#x6709;&#x4E00;&#x4E2A;&#x201C;&#x79D1;&#x6280;&#x6811;&#x201D;&#x7CFB;&#x7EDF;&#xFF0C;&#x5373;&#x4F60;&#x53EF;&#x4EE5;&#x6309;&#x7167;&#x8BE5;&#x56FE;&#x6240;&#x793A;&#x7684;&#x987A;&#x5E8F;&#x6765;&#x53D1;&#x5C55;&#x79D1;&#x6280;&#x3002;&#x201C;&#x79D1;&#x6280;&#x6811;&#x201D;&#x662F;&#x8FD9;&#x6837;&#x4E00;&#x4E2A;&#x6982;&#x5FF5;: &#x4E3A;&#x4E86;&#x7814;&#x53D1;&#x67D0;&#x4E2A;&#x79D1;&#x6280;&#xFF0C;&#x6211;&#x4EEC;&#x5FC5;&#x987B;&#x5DF2;&#x7ECF;&#x638C;&#x63E1;&#x4E86;&#x8BE5;&#x79D1;&#x6280;&#x7684;&#x6240;&#x6709;&#x524D;&#x63D0;&#x79D1;&#x6280;(prerequisite)&#x3002;&#x79D1;&#x6280;&#x6811;&#x4E2D;&#x6709;&#x4E00;&#x4E9B;&#x7BAD;&#x5934;&#xFF0C;&#x4ECE;A&#x79D1;&#x6280;&#x6307;&#x5411;B&#x79D1;&#x6280;&#xFF0C;&#x90A3;&#x4E48;A&#x5C31;&#x662F;B&#x7684;&#x524D;&#x63D0;&#x79D1;&#x6280;&#x3002;&#x6BD4;&#x5982;&#xFF0C;&#x6839;&#x636E;&#x4E0A;&#x9762;&#x7684;&#x79D1;&#x6280;&#x6811;&#xFF0C;&#x4E3A;&#x4E86;&#x7814;&#x53D1;&#x7269;&#x7406;(Physics)&#xFF0C;&#x6211;&#x4EEC;&#x5FC5;&#x987B;&#x5DF2;&#x7ECF;&#x638C;&#x63E1;&#x4E86;&#x5316;&#x5B66;(Chemistry)&#x548C;&#x5929;&#x6587;&#x5B66;(Astronomy)&#x3002;&#x800C;&#x4E3A;&#x4E86;&#x7814;&#x53D1;&#x5316;&#x5B66;(Chemistry)&#xFF0C;&#x6211;&#x4EEC;&#x53C8;&#x5FC5;&#x987B;&#x638C;&#x63E1;&#x4E86;&#x706B;&#x836F;(Gunpowder)&#x3002;&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x79D1;&#x6280;&#x6CA1;&#x6709;&#x5176;&#x5B83;&#x79D1;&#x6280;&#x6307;&#x5411;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x4E0D;&#x9700;&#x8981;&#x4EFB;&#x4F55;&#x524D;&#x63D0;&#x79D1;&#x6280;&#x5C31;&#x53EF;&#x4EE5;&#x7814;&#x53D1;&#xFF0C;&#x6BD4;&#x5982;&#x56FE;&#x4E2D;&#x7684;&#x5C01;&#x5EFA;&#x4E3B;&#x4E49;(Feudalism)&#x3002;&#x5982;&#x679C;&#x540C;&#x4E00;&#x65F6;&#x95F4;&#x53EA;&#x80FD;&#x7814;&#x53D1;&#x4E00;&#x9879;&#x79D1;&#x6280;&#xFF0C;&#x90A3;&#x4E48;&#x73A9;&#x5BB6;&#x7684;&#x79D1;&#x6280;&#x7814;&#x53D1;&#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x5E8F;&#x5217;&#xFF0C;&#x6BD4;&#x5982;&#x5C01;&#x5EFA;&#x4E3B;&#x4E49;&#xFF0C;&#x5DE5;&#x7A0B;(Engineering)&#xFF0C;&#x53D1;&#x660E;(Invention)&#xFF0C;&#x706B;&#x836F;&#xFF0C;&#x4E00;&#x795E;&#x6559;(monotheism)&#xFF0C;&#x9A91;&#x58EB;&#x5236;&#x5EA6;(Chivalry)&#x2026;&#x2026; &#x6709;&#x4E9B;&#x5E8F;&#x5217;&#x662F;&#x4E0D;&#x5408;&#x6CD5;&#x7684;&#xFF0C;&#x6BD4;&#x5982;&#x5DE5;&#x7A0B;&#xFF0C;&#x53D1;&#x660E;&#xFF0C;&#x706B;&#x836F;&#x2026;&#x2026;&#xFF0C;&#x5728;&#x7814;&#x53D1;&#x7684;&#x201C;&#x53D1;&#x660E;&#x201D;&#x65F6;&#xFF0C;&#x5E76;&#x6CA1;&#x6709;&#x6EE1;&#x8DB3;&#x201C;&#x5C01;&#x5EFA;&#x4E3B;&#x4E49;&#x201D;&#x7684;&#x524D;&#x63D0;&#x6761;&#x4EF6;&#x3002;</span></p>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#xA0;</span></p>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#x4E00;&#x4E2A;&#x6709;&#x8DA3;&#x7684;&#x95EE;&#x9898;&#x662F;&#xFF0C;&#x5982;&#x4F55;&#x627E;&#x5230;&#x5408;&#x6CD5;&#x7684;&#x5E8F;&#x5217;&#x5462;&#xFF1F;&#x5F53;&#x6211;&#x4EEC;&#x5728;&#x8BBE;&#x8BA1;&#x8BA1;&#x7B97;&#x673A;&#x73A9;&#x5BB6;&#x65F6;&#xFF0C;&#x5F88;&#x53EF;&#x80FD;&#x9700;&#x8981;&#x89E3;&#x51B3;&#x8FD9;&#x6837;&#x4E00;&#x4E2A;&#x95EE;&#x9898;&#x3002;</span></p>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#x56FE;(graph)&#x4E2D;&#x7684;<span style=\"color: #ff0000;\">&#x62D3;&#x6251;&#x6392;&#x5E8F;</span>&#x7B97;&#x6CD5;(Topological Sort)&#x53EF;&#x4EE5;&#x7ED9;&#x51FA;&#x4E00;&#x4E2A;&#x5408;&#x6CD5;&#x5E8F;&#x5217;&#x3002;&#x867D;&#x7136;&#x5728;&#x6E38;&#x620F;&#x4E2D;&#x88AB;&#x79F0;&#x4E3A;&#x201C;&#x79D1;&#x6280;&#x6811;&#x201D;&#xFF0C;&#x4F46;&#x201C;&#x79D1;&#x6280;&#x6811;&#x201D;&#x5E76;&#x4E0D;&#x7B26;&#x5408;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x4E2D;&#x7684;&#x6811;&#x7ED3;&#x6784;&#x3002;&#x5728;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x4E2D;&#xFF0C;&#x6811;&#x7684;&#x6BCF;&#x4E2A;&#x8282;&#x70B9;&#x53EA;&#x80FD;&#x7531;&#x4E00;&#x4E2A;&#x7236;&#x8282;&#x70B9;&#xFF0C;&#x6574;&#x4E2A;&#x6811;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x6839;&#x8282;&#x70B9;&#x3002;&#x56E0;&#x6B64;&#xFF0C;&#x201C;&#x79D1;&#x6280;&#x6811;&#x201D;&#x662F;&#x4E00;&#x4E2A;&#x4E0D;&#x6298;&#x4E0D;&#x6263;&#x7684;&#x56FE;&#x7ED3;&#x6784;&#x3002;&#x6B64;&#x5916;&#xFF0C;&#x8BE5;&#x6811;&#x662F;&#x4E00;&#x4E2A;&#x6709;&#x5411;&#x7684;&#x65E0;&#x73AF;(acyclic)&#x56FE;&#x3002;&#x56FE;&#x4E2D;&#x4E0D;&#x5B58;&#x5728;&#x73AF; (cycle, &#x73AF;&#x662F;&#x4E00;&#x4E2A;&#x957F;&#x5EA6;&#x5927;&#x4E8E;0&#x7684;&#x8DEF;&#x5F84;&#xFF0C;&#x5176;&#x4E24;&#x7AEF;&#x4E3A;&#x540C;&#x4E00;&#x8282;&#x70B9;)&#x3002;</span></p>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#xA0;</span></p>\r\n<h3 style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#x62D3;&#x6251;&#x6392;&#x5E8F;</span></h3>\r\n<p><span style=\"font-family: courier new,courier;\">&#x62D3;&#x6251;&#x6392;&#x5E8F;&#x5229;&#x7528;&#x4E86;&#x4E00;&#x4E2A;&#x4E8B;&#x5B9E;&#xFF0C;&#x5373;&#x5728;&#x4E00;&#x4E2A;&#x65E0;&#x73AF;&#x7F51;&#x7EDC;&#x4E2D;&#xFF0C;&#x6709;&#x4E00;&#x4E9B;&#x8282;&#x70B9;&#x662F;&#x6CA1;&#x6709;&#x7BAD;&#x5934;&#x6307;&#x5165;&#x7684;&#xFF0C;&#x6BD4;&#x5982;&#x79D1;&#x6280;&#x6811;&#x4E2D;&#x7684;&#x4E00;&#x795E;&#x6559;&#x3001;&#x5C01;&#x5EFA;&#x4E3B;&#x4E49;&#x3001;&#x5DE5;&#x7A0B;&#x3002;&#x5B83;&#x4EEC;&#x53EF;&#x4EE5;&#x4F5C;&#x4E3A;&#x5E8F;&#x5217;&#x7684;&#x8D77;&#x70B9;&#x3002;</span></p>\r\n<ul>\r\n<li><span style=\"font-family: courier new,courier;\">&#x9009;&#x62E9;&#x6CA1;&#x6709;&#x7BAD;&#x5934;&#x6307;&#x5165;&#x7684;&#x8282;&#x70B9;&#x4E2D;&#x7684;&#x4EFB;&#x4E00;&#x4E2A;&#xFF0C;&#x53EF;&#x4EE5;&#x4F5C;&#x4E3A;&#x5408;&#x6CD5;&#x5E8F;&#x5217;&#x7684;&#x8D77;&#x70B9;&#xFF0C;&#x653E;&#x5165;&#x5E8F;&#x5217;&#x3002;</span></li>\r\n<li><span style=\"font-family: courier new,courier;\">&#x5F53;&#x6211;&#x4EEC;&#x5C06;&#x67D0;&#x4E2A;&#x8282;&#x70B9;&#x653E;&#x5165;&#x5E8F;&#x5217;&#x540E;&#xFF0C;&#x53BB;&#x6389;&#x8BE5;&#x8282;&#x70B9;&#x4EE5;&#x53CA;&#x4ECE;&#x8BE5;&#x8282;&#x70B9;&#x6307;&#x51FA;&#x7684;&#x6240;&#x6709;&#x7BAD;&#x5934;&#x3002;&#x5728;&#x65B0;&#x7684;&#x56FE;&#x4E2D;&#xFF0C;&#x9009;&#x62E9;&#x6CA1;&#x6709;&#x7BAD;&#x5934;&#x6307;&#x5411;&#x7684;&#x8282;&#x70B9;&#xFF0C;&#x4F5C;&#x4E3A;&#x5E8F;&#x5217;&#x4E2D;&#x7684;&#x4E0B;&#x4E00;&#x4E2A;&#x70B9;&#x3002;</span></li>\r\n<li><span style=\"font-family: courier new,courier;\">&#x91CD;&#x590D;&#x4E0A;&#x9762;&#x7684;&#x8FC7;&#x7A0B;&#xFF0C;&#x76F4;&#x5230;&#x6240;&#x6709;&#x7684;&#x8282;&#x70B9;&#x90FD;&#x88AB;&#x653E;&#x5165;&#x5E8F;&#x5217;&#x3002;</span></li>\r\n</ul>\r\n<p><span style=\"font-family: courier new,courier;\">&#xA0;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x8282;&#x70B9;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x4E00;&#x4E2A;&#x91CF;<span style=\"color: #ff0000;\">&#x5165;&#x5EA6;</span>(indegree)&#xFF0C;&#x7528;&#x6765;&#x8868;&#x793A;&#x6709;&#x591A;&#x5C11;&#x4E2A;&#x7BAD;&#x5934;&#x6307;&#x5165;&#x8BE5;&#x8282;&#x70B9;&#x3002;&#x5F53;&#x67D0;&#x4E2A;&#x8282;&#x70B9;&#x88AB;&#x5220;&#x9664;&#x65F6;&#xFF0C;&#x56FE;&#x53D1;&#x751F;&#x53D8;&#x5316;&#xFF0C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x66F4;&#x65B0;&#x56FE;&#x4E2D;&#x8282;&#x70B9;&#x7684;&#x5165;&#x5EA6;&#x3002;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#x4E3A;&#x4E86;&#x65B9;&#x4FBF;&#xFF0C;&#x6211;&#x5C06;&#x201C;&#x79D1;&#x6280;&#x6811;&#x201D;&#x4E2D;&#x7684;&#x8282;&#x70B9;&#x7F16;&#x53F7;&#xFF0C;&#x4E3A;&#x4E86;&#x7B26;&#x5408;C&#x8BED;&#x8A00;&#x4E2D;&#x7684;&#x4F20;&#x7EDF;&#xFF0C;&#x7F16;&#x53F7;&#x4ECE;0&#x5F00;&#x59CB;&#x3002;&#x4E0B;&#x9762;&#x662F;&#x5BF9;&#x5E94;&#x5173;&#x7CFB;:</span></p>\r\n<table style=\"width: 663px; height: 228px;\" border=\"0\" align=\"center\">\r\n<tbody>\r\n<tr>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier; font-size: 14px;\">0</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier; font-size: 14px;\">1</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier; font-size: 14px;\">2</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier; font-size: 14px;\">3</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier; font-size: 14px;\">4</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier; font-size: 14px;\">5</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier; font-size: 14px;\">6</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier; font-size: 14px;\">7</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier; font-size: 14px;\">8</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier; font-size: 14px;\">9</span></td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier; font-size: 14px;\">&#x4E00;&#x795E;&#x6559; </span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier; font-size: 14px;\">&#x795E;&#x5B66;</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier; font-size: 14px;\">&#x5370;&#x5237;&#x672F;</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier; font-size: 14px;\">&#x6C11;&#x4E3B;</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier; font-size: 14px;\">&#x81EA;&#x7531;&#x827A;&#x672F;</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier; font-size: 14px;\">&#x9A91;&#x58EB;&#x5236;&#x5EA6;</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier; font-size: 14px;\">&#x97F3;&#x4E50;&#x7406;&#x8BBA;</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier; font-size: 14px;\">&#x94F6;&#x884C;&#xA0; </span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier; font-size: 14px;\">&#x7ECF;&#x6D4E;&#x5B66; </span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier; font-size: 14px;\">&#x5C01;&#x5EFA;&#x4E3B;&#x4E49;</span></td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier; font-size: 14px;\">10</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier; font-size: 14px;\">11</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier; font-size: 14px;\">12</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier; font-size: 14px;\">13</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier; font-size: 14px;\">14</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier; font-size: 14px;\">15</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier; font-size: 14px;\">16</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier; font-size: 14px;\">17</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier; font-size: 14px;\">18</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier; font-size: 14px;\">19</span></td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier; font-size: 14px;\">&#x6559;&#x80B2;</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier; font-size: 14px;\">&#x5929;&#x6587;&#x5B66;</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier; font-size: 14px;\">&#x822A;&#x6D77;&#x672F;</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier; font-size: 14px;\">&#x7269;&#x7406;&#xA0; </span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier; font-size: 14px;\">&#x91CD;&#x529B;&#x7406;&#x8BBA;</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier; font-size: 14px;\">&#x53D1;&#x660E;</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier; font-size: 14px;\">&#x706B;&#x836F;</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier; font-size: 14px;\">&#x5316;&#x5B66;</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier; font-size: 14px;\">&#x78C1;&#x5B66;</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier; font-size: 14px;\">&#x5DE5;&#x7A0B;</span></td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier; font-size: 14px;\">20</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier; font-size: 14px;\">21</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#xA0;</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#xA0;</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#xA0;</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#xA0;</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#xA0;</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#xA0;</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#xA0;</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#xA0;</span></td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier; font-size: 14px;\">&#x51B6;&#x91D1;</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier; font-size: 14px;\">&#x519B;&#x4E8B;&#x4F20;&#x7EDF;</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#xA0;</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#xA0;</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#xA0;</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#xA0;</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#xA0;</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#xA0;</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#xA0;</span></td>\r\n<td style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#xA0;</span></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p><span style=\"font-family: courier new,courier;\">&#xA0;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#x6211;&#x4EEC;&#x6839;&#x636E;&#x7F16;&#x53F7;&#xFF0C;&#x7ED8;&#x5236;&#x4E0A;&#x8FF0;&#x56FE;(graph)&#x3002;&#x6211;&#x540C;&#x65F6;&#x7528;&#x4E09;&#x79CD;&#x989C;&#x8272;&#xFF0C;&#x6765;&#x8868;&#x793A;&#x4E0D;&#x540C;&#x70B9;&#x7684;&#x5165;&#x5EA6;(indegree):</span></p>\r\n<p><span style=\"font-family: courier new,courier;\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://images.cnitblog.com/blog/413416/201308/02210011-935455e3d5b84bf492b11fa1e660937a.png\" alt=\"\"></span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#x6211;&#x4EEC;&#x4F7F;&#x7528;&#x90BB;&#x63A5;&#x8868;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;(&#x53C2;&#x8003;<a href=\"http://www.cnblogs.com/vamei/p/3113912.html\">&#x7EB8;&#x4E0A;&#x8C08;&#x5175;: &#x56FE;</a>)&#xFF0C;&#x6765;&#x5B9E;&#x73B0;&#x56FE;&#x3002;&#x6784;&#x5EFA;&#x4EE3;&#x7801;&#x5982;&#x4E0B;: </span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"font-family: courier new,courier;\"><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> By Vamei </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\n#include </span>&lt;stdio.h&gt;<span style=\"color: #000000;\">\r\n#include </span>&lt;stdlib.h&gt;\r\n\r\n<span style=\"color: #0000ff;\">#define</span> NUM_V 22<span style=\"color: #000000;\">\r\n\r\ntypedef </span><span style=\"color: #0000ff;\">struct</span> node *<span style=\"color: #000000;\">position;\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> node </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> node {\r\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> element;\r\n    position next;\r\n};\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> \r\n * operations (stereotype)\r\n </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">void</span> insert_edge(position, <span style=\"color: #0000ff;\">int</span>, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\">);\r\n</span><span style=\"color: #0000ff;\">void</span> print_graph(position graph, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> nv);\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> for testing purpose </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> main()\r\n{\r\n    </span><span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> node graph[NUM_V];\r\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i;\r\n\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> initialize the vertices</span>\r\n    <span style=\"color: #0000ff;\">for</span>(i=<span style=\"color: #800080;\">0</span>; i&lt;NUM_V; i++<span style=\"color: #000000;\">) {\r\n        (graph</span>+i)-&gt;element =<span style=\"color: #000000;\"> i;\r\n        (graph</span>+i)-&gt;next    =<span style=\"color: #000000;\"> NULL;\r\n    }\r\n\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> insert edges</span>\r\n    insert_edge(graph,<span style=\"color: #800080;\">0</span>,<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);\r\n    insert_edge(graph,</span><span style=\"color: #800080;\">0</span>,<span style=\"color: #800080;\">5</span><span style=\"color: #000000;\">);\r\n    insert_edge(graph,</span><span style=\"color: #800080;\">1</span>,<span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">);\r\n    insert_edge(graph,</span><span style=\"color: #800080;\">1</span>,<span style=\"color: #800080;\">10</span><span style=\"color: #000000;\">);\r\n    insert_edge(graph,</span><span style=\"color: #800080;\">2</span>,<span style=\"color: #800080;\">3</span><span style=\"color: #000000;\">);\r\n    insert_edge(graph,</span><span style=\"color: #800080;\">3</span>,<span style=\"color: #800080;\">4</span><span style=\"color: #000000;\">);\r\n    insert_edge(graph,</span><span style=\"color: #800080;\">7</span>,<span style=\"color: #800080;\">8</span><span style=\"color: #000000;\">);\r\n    insert_edge(graph,</span><span style=\"color: #800080;\">9</span>,<span style=\"color: #800080;\">5</span><span style=\"color: #000000;\">);\r\n    insert_edge(graph,</span><span style=\"color: #800080;\">9</span>,<span style=\"color: #800080;\">15</span><span style=\"color: #000000;\">);\r\n    insert_edge(graph,</span><span style=\"color: #800080;\">10</span>,<span style=\"color: #800080;\">6</span><span style=\"color: #000000;\">);\r\n    insert_edge(graph,</span><span style=\"color: #800080;\">10</span>,<span style=\"color: #800080;\">7</span><span style=\"color: #000000;\">);\r\n    insert_edge(graph,</span><span style=\"color: #800080;\">10</span>,<span style=\"color: #800080;\">11</span><span style=\"color: #000000;\">);\r\n    insert_edge(graph,</span><span style=\"color: #800080;\">11</span>,<span style=\"color: #800080;\">12</span><span style=\"color: #000000;\">);\r\n    insert_edge(graph,</span><span style=\"color: #800080;\">11</span>,<span style=\"color: #800080;\">13</span><span style=\"color: #000000;\">);\r\n    insert_edge(graph,</span><span style=\"color: #800080;\">13</span>,<span style=\"color: #800080;\">14</span><span style=\"color: #000000;\">);\r\n    insert_edge(graph,</span><span style=\"color: #800080;\">13</span>,<span style=\"color: #800080;\">18</span><span style=\"color: #000000;\">);\r\n    insert_edge(graph,</span><span style=\"color: #800080;\">15</span>,<span style=\"color: #800080;\">16</span><span style=\"color: #000000;\">);\r\n    insert_edge(graph,</span><span style=\"color: #800080;\">16</span>,<span style=\"color: #800080;\">17</span><span style=\"color: #000000;\">);\r\n    insert_edge(graph,</span><span style=\"color: #800080;\">17</span>,<span style=\"color: #800080;\">13</span><span style=\"color: #000000;\">);\r\n    insert_edge(graph,</span><span style=\"color: #800080;\">17</span>,<span style=\"color: #800080;\">20</span><span style=\"color: #000000;\">);\r\n    insert_edge(graph,</span><span style=\"color: #800080;\">19</span>,<span style=\"color: #800080;\">15</span><span style=\"color: #000000;\">);\r\n    insert_edge(graph,</span><span style=\"color: #800080;\">20</span>,<span style=\"color: #800080;\">21</span><span style=\"color: #000000;\">);\r\n\r\n    print_graph(graph,NUM_V);\r\n}\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> print the graph </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">void</span> print_graph(position graph, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> nv) {\r\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i;\r\n    position p;\r\n    </span><span style=\"color: #0000ff;\">for</span>(i=<span style=\"color: #800080;\">0</span>; i&lt;nv; i++<span style=\"color: #000000;\">) {\r\n        p </span>= (graph + i)-&gt;<span style=\"color: #000000;\">next;\r\n        printf(</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #800000;\">From %3d: </span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #000000;\">, i);\r\n        </span><span style=\"color: #0000ff;\">while</span>(p !=<span style=\"color: #000000;\"> NULL) {\r\n            printf(</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #800000;\">%d-&gt;%d; </span><span style=\"color: #800000;\">&quot;</span>, i, p-&gt;<span style=\"color: #000000;\">element);\r\n            p </span>= p-&gt;<span style=\"color: #000000;\">next;\r\n        }\r\n        printf(</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #800000;\">\\n</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #000000;\">);\r\n    }\r\n}\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">\r\n * insert an edge\r\n </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">void</span> insert_edge(position graph,<span style=\"color: #0000ff;\">int</span> <span style=\"color: #0000ff;\">from</span>, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> to)\r\n{\r\n    position np;\r\n    position nodeAddr;\r\n\r\n    np </span>= graph + <span style=\"color: #0000ff;\">from</span><span style=\"color: #000000;\">;\r\n\r\n    nodeAddr </span>= (position) malloc(<span style=\"color: #0000ff;\">sizeof</span>(<span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> node));\r\n    nodeAddr</span>-&gt;element =<span style=\"color: #000000;\"> to;\r\n    nodeAddr</span>-&gt;next    = np-&gt;<span style=\"color: #000000;\">next;\r\n    np</span>-&gt;next =<span style=\"color: #000000;\"> nodeAddr;\r\n}</span></span></pre>\r\n</div>\r\n<p><span style=\"font-family: courier new,courier;\">&#xA0;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x6839;&#x636E;&#x4E0A;&#x9762;&#x5EFA;&#x7ACB;&#x7684;&#x56FE;&#xFF0C;&#x6765;&#x83B7;&#x5F97;&#x5404;&#x4E2A;&#x8282;&#x70B9;&#x7684;&#x5165;&#x5EA6;&#x3002;&#x4F7F;&#x7528;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;indeg&#x6765;&#x50A8;&#x5B58;&#x5404;&#x4E2A;&#x8282;&#x70B9;&#x7684;&#x5165;&#x5EA6;&#xFF0C;&#x5373;<span style=\"color: #800000;\">indeg[i] = indgree of i<sub>th</sub> node</span>&#x3002;&#x4E0B;&#x9762;&#x7684;<span style=\"color: #800000;\">init_indeg()</span>&#x7528;&#x4E8E;&#x521D;&#x59CB;&#x5316;&#x5404;&#x8282;&#x70B9;&#x7684;&#x5165;&#x5EA6;:</span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #008000;\">// according to the graph, initialize the indegree at each vertice\r\n</span><span style=\"color: #0000ff;\">void</span> init_indeg(position graph, <span style=\"color: #0000ff;\">int</span> nv, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> indeg[]) {\r\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i;\r\n    position p;\r\n\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> initialize</span>\r\n    <span style=\"color: #0000ff;\">for</span>(i=<span style=\"color: #800080;\">0</span>; i&lt;nv; i++<span style=\"color: #000000;\">) {\r\n        indeg[i] </span>= <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\r\n    }\r\n\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> assimilate the graph</span>\r\n    <span style=\"color: #0000ff;\">for</span>(i=<span style=\"color: #800080;\">0</span>; i&lt;nv; i++<span style=\"color: #000000;\">) {\r\n        p </span>= (graph + i)-&gt;<span style=\"color: #000000;\">next;\r\n        </span><span style=\"color: #0000ff;\">while</span>(p !=<span style=\"color: #000000;\"> NULL) {\r\n            (indeg[p</span>-&gt;element])++<span style=\"color: #000000;\">;\r\n            p </span>= p-&gt;<span style=\"color: #000000;\">next;\r\n        }\r\n    }   \r\n}</span></pre>\r\n</div>\r\n<p>&#xA0;</p>\r\n<p><span style=\"font-family: courier new,courier;\">&#x6B63;&#x5982;&#x6211;&#x4EEC;&#x4E4B;&#x524D;&#x53D9;&#x8FF0;&#x7684;&#xFF0C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x627E;&#x5230;&#x5165;&#x5EA6;&#x4E3A;0&#x7684;&#x8282;&#x70B9;&#xFF0C;&#x5E76;&#x5C06;&#x8FD9;&#x4E9B;&#x8282;&#x70B9;&#x653E;&#x5165;&#x5E8F;&#x5217;&#x3002;<span style=\"color: #800000;\">find_next()</span>&#x5C31;&#x662F;&#x7528;&#x4E8E;&#x5BFB;&#x627E;&#x4E0B;&#x4E00;&#x4E2A;&#x5165;&#x5EA6;&#x4E3A;0&#x7684;&#x8282;&#x70B9;&#x3002;&#x627E;&#x5230;&#x5BF9;&#x5E94;&#x8282;&#x70B9;&#x540E;&#xFF0C;&#x8FD4;&#x56DE;&#x8BE5;&#x8282;&#x70B9;&#xFF0C;&#x5E76;&#x5C06;&#x8BE5;&#x8282;&#x70B9;&#x7684;&#x5165;&#x5EA6;&#x66F4;&#x65B0;&#x4E3A;-1:</span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"font-family: courier new,courier;\"><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> find the vertice with 0 indegree</span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">int</span> find_next(<span style=\"color: #0000ff;\">int</span> indeg[], <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> nv) {\r\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> next;\r\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i;\r\n    </span><span style=\"color: #0000ff;\">for</span>(i=<span style=\"color: #800080;\">0</span>; i&lt;nv; i++<span style=\"color: #000000;\">) {\r\n        </span><span style=\"color: #0000ff;\">if</span>(indeg[i] == <span style=\"color: #800080;\">0</span>) <span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;\r\n    }\r\n    indeg[i] </span>= -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\r\n\r\n    </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> i;\r\n}</span></span></pre>\r\n</div>\r\n<p>&#xA0;</p>\r\n<p><span style=\"font-family: courier new,courier;\">&#x5F53;&#x6211;&#x4EEC;&#x53D6;&#x51FA;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x653E;&#x5165;&#x5E8F;&#x5217;&#x65F6;&#xFF0C;&#x4ECE;&#x8BE5;&#x8282;&#x70B9;&#x51FA;&#x53D1;&#xFF0C;&#x6307;&#x5411;&#x7684;&#x8282;&#x70B9;&#x7684;&#x5165;&#x5EA6;&#x4F1A;&#x51CF;1&#xFF0C;&#x6211;&#x4EEC;&#x7528;<span style=\"color: #800000;\">update_indeg()</span>&#x8868;&#x793A;&#x8BE5;&#x64CD;&#x4F5C;:</span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> update indeg when ver is removed</span>\r\n<span style=\"color: #0000ff;\">void</span> update_indeg(position graph, <span style=\"color: #0000ff;\">int</span> nv, <span style=\"color: #0000ff;\">int</span> indeg[], <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> ver) {\r\n    position p;\r\n    p </span>= (graph + ver)-&gt;<span style=\"color: #000000;\">next;\r\n    </span><span style=\"color: #0000ff;\">while</span>(p !=<span style=\"color: #000000;\"> NULL) {\r\n        (indeg[p</span>-&gt;element])--<span style=\"color: #000000;\">;\r\n        p </span>= p-&gt;<span style=\"color: #000000;\">next;\r\n    }\r\n}</span></pre>\r\n</div>\r\n<p>&#xA0;</p>\r\n<p><span style=\"font-family: courier new,courier;\">&#x6709;&#x4E86;&#x4E0A;&#x9762;&#x7684;&#x51C6;&#x5907;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5BFB;&#x627E;&#x5E8F;&#x5217;&#x3002;</span><span style=\"font-family: courier new,courier;\">&#x4F7F;&#x7528;&#x6570;&#x7EC4;seq&#x6765;&#x8BB0;&#x5F55;&#x5E8F;&#x5217;&#x4E2D;&#x7684;&#x8282;&#x70B9;&#x3002;&#x4E0B;&#x9762;&#x7684;<span style=\"color: #800000;\">get_seq()</span>&#x7528;&#x4E8E;&#x83B7;&#x5F97;&#x62D3;&#x6251;&#x6392;&#x5E8F;&#x5E8F;&#x5217;:</span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> return the sequence</span>\r\n<span style=\"color: #0000ff;\">void</span> get_seq(position graph, <span style=\"color: #0000ff;\">int</span> nv, <span style=\"color: #0000ff;\">int</span> indeg[], <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> seq[]){\r\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i;\r\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> ver;\r\n    </span><span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i&lt;nv; i++<span style=\"color: #000000;\">) {\r\n        ver </span>=<span style=\"color: #000000;\"> find_next(indeg, nv);\r\n        seq[i] </span>=<span style=\"color: #000000;\"> ver;\r\n        update_indeg(graph, nv, indeg, ver);\r\n    }\r\n}</span></pre>\r\n</div>\r\n<p>&#xA0;</p>\r\n<p><br>&#x7EFC;&#x5408;&#x4E0A;&#x9762;&#x7684;&#x53D9;&#x8FF0;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x4E0B;&#x9762;&#x4EE3;&#x7801;&#xFF0C;&#x6765;&#x5B9E;&#x73B0;&#x62D3;&#x6251;&#x6392;&#x5E8F;:</p>\r\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(&apos;10c9ccbf-ed11-408c-9251-d32907a2e4b0&apos;)\"><img id=\"code_img_closed_10c9ccbf-ed11-408c-9251-d32907a2e4b0\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\"><img id=\"code_img_opened_10c9ccbf-ed11-408c-9251-d32907a2e4b0\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide(&apos;10c9ccbf-ed11-408c-9251-d32907a2e4b0&apos;,event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\">\r\n<div id=\"cnblogs_code_open_10c9ccbf-ed11-408c-9251-d32907a2e4b0\" class=\"cnblogs_code_hide\">\r\n<pre><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> By Vamei </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\n#include </span>&lt;stdio.h&gt;<span style=\"color: #000000;\">\r\n#include </span>&lt;stdlib.h&gt;\r\n\r\n<span style=\"color: #0000ff;\">#define</span> NUM_V 22<span style=\"color: #000000;\">\r\n\r\ntypedef </span><span style=\"color: #0000ff;\">struct</span> node *<span style=\"color: #000000;\">position;\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> node </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> node {\r\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> element;\r\n    position next;\r\n};\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> \r\n * operations (stereotype)\r\n </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">void</span> insert_edge(position, <span style=\"color: #0000ff;\">int</span>, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\">);\r\n</span><span style=\"color: #0000ff;\">void</span> print_graph(position, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\">);\r\n</span><span style=\"color: #0000ff;\">void</span> init_indeg(position, <span style=\"color: #0000ff;\">int</span> , <span style=\"color: #0000ff;\">int</span> *<span style=\"color: #000000;\">);\r\n</span><span style=\"color: #0000ff;\">void</span> update_indeg(position, <span style=\"color: #0000ff;\">int</span>, <span style=\"color: #0000ff;\">int</span> *, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\">);\r\n</span><span style=\"color: #0000ff;\">void</span> get_seq(position, <span style=\"color: #0000ff;\">int</span>, <span style=\"color: #0000ff;\">int</span> *, <span style=\"color: #0000ff;\">int</span> *<span style=\"color: #000000;\">);\r\n</span><span style=\"color: #0000ff;\">int</span> find_next(<span style=\"color: #0000ff;\">int</span> *, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\">);\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> for testing purpose </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> main()\r\n{\r\n    </span><span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> node graph[NUM_V];\r\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> indeg[NUM_V];\r\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> seq[NUM_V];\r\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i;\r\n    \r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> initialize the graph</span>\r\n    <span style=\"color: #0000ff;\">for</span>(i=<span style=\"color: #800080;\">0</span>; i&lt;NUM_V; i++<span style=\"color: #000000;\">) {\r\n        (graph</span>+i)-&gt;element =<span style=\"color: #000000;\"> i; \r\n        (graph</span>+i)-&gt;next    =<span style=\"color: #000000;\"> NULL;\r\n    }\r\n\r\n    \r\n    insert_edge(graph,</span><span style=\"color: #800080;\">0</span>,<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);\r\n    insert_edge(graph,</span><span style=\"color: #800080;\">0</span>,<span style=\"color: #800080;\">5</span><span style=\"color: #000000;\">);\r\n    insert_edge(graph,</span><span style=\"color: #800080;\">1</span>,<span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">);\r\n    insert_edge(graph,</span><span style=\"color: #800080;\">1</span>,<span style=\"color: #800080;\">10</span><span style=\"color: #000000;\">);\r\n    insert_edge(graph,</span><span style=\"color: #800080;\">2</span>,<span style=\"color: #800080;\">3</span><span style=\"color: #000000;\">);\r\n    insert_edge(graph,</span><span style=\"color: #800080;\">3</span>,<span style=\"color: #800080;\">4</span><span style=\"color: #000000;\">);\r\n    insert_edge(graph,</span><span style=\"color: #800080;\">7</span>,<span style=\"color: #800080;\">8</span><span style=\"color: #000000;\">);\r\n    insert_edge(graph,</span><span style=\"color: #800080;\">9</span>,<span style=\"color: #800080;\">5</span><span style=\"color: #000000;\">);\r\n    insert_edge(graph,</span><span style=\"color: #800080;\">9</span>,<span style=\"color: #800080;\">15</span><span style=\"color: #000000;\">);\r\n    insert_edge(graph,</span><span style=\"color: #800080;\">10</span>,<span style=\"color: #800080;\">6</span><span style=\"color: #000000;\">);\r\n    insert_edge(graph,</span><span style=\"color: #800080;\">10</span>,<span style=\"color: #800080;\">7</span><span style=\"color: #000000;\">);\r\n    insert_edge(graph,</span><span style=\"color: #800080;\">10</span>,<span style=\"color: #800080;\">11</span><span style=\"color: #000000;\">);\r\n    insert_edge(graph,</span><span style=\"color: #800080;\">11</span>,<span style=\"color: #800080;\">12</span><span style=\"color: #000000;\">);\r\n    insert_edge(graph,</span><span style=\"color: #800080;\">11</span>,<span style=\"color: #800080;\">13</span><span style=\"color: #000000;\">);\r\n    insert_edge(graph,</span><span style=\"color: #800080;\">13</span>,<span style=\"color: #800080;\">14</span><span style=\"color: #000000;\">);\r\n    insert_edge(graph,</span><span style=\"color: #800080;\">13</span>,<span style=\"color: #800080;\">18</span><span style=\"color: #000000;\">);\r\n    insert_edge(graph,</span><span style=\"color: #800080;\">15</span>,<span style=\"color: #800080;\">16</span><span style=\"color: #000000;\">);\r\n    insert_edge(graph,</span><span style=\"color: #800080;\">16</span>,<span style=\"color: #800080;\">17</span><span style=\"color: #000000;\">);\r\n    insert_edge(graph,</span><span style=\"color: #800080;\">17</span>,<span style=\"color: #800080;\">13</span><span style=\"color: #000000;\">);\r\n    insert_edge(graph,</span><span style=\"color: #800080;\">17</span>,<span style=\"color: #800080;\">20</span><span style=\"color: #000000;\">);\r\n    insert_edge(graph,</span><span style=\"color: #800080;\">19</span>,<span style=\"color: #800080;\">15</span><span style=\"color: #000000;\">);\r\n    insert_edge(graph,</span><span style=\"color: #800080;\">20</span>,<span style=\"color: #800080;\">21</span><span style=\"color: #000000;\">);\r\n\r\n    print_graph(graph,NUM_V);\r\n    \r\n    init_indeg(graph,NUM_V,indeg);\r\n    get_seq(graph, NUM_V, indeg, seq);\r\n    </span><span style=\"color: #0000ff;\">for</span> (i=<span style=\"color: #800080;\">0</span>; i&lt;NUM_V; i++<span style=\"color: #000000;\">) {\r\n        printf(</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #800000;\">%d,</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #000000;\">, seq[i]);\r\n    }\r\n}\r\n\r\n</span><span style=\"color: #0000ff;\">void</span> print_graph(position graph, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> nv) {\r\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i;\r\n    position p;\r\n    </span><span style=\"color: #0000ff;\">for</span>(i=<span style=\"color: #800080;\">0</span>; i&lt;nv; i++<span style=\"color: #000000;\">) {\r\n        p </span>= (graph + i)-&gt;<span style=\"color: #000000;\">next;\r\n    printf(</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #800000;\">From %3d: </span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #000000;\">, i);\r\n    </span><span style=\"color: #0000ff;\">while</span>(p !=<span style=\"color: #000000;\"> NULL) {\r\n        printf(</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #800000;\">%d-&gt;%d; </span><span style=\"color: #800000;\">&quot;</span>, i, p-&gt;<span style=\"color: #000000;\">element);\r\n        p </span>= p-&gt;<span style=\"color: #000000;\">next;\r\n    }\r\n    printf(</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #800000;\">\\n</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #000000;\">);\r\n    }\r\n}\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">\r\n * insert an edge\r\n </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">void</span> insert_edge(position graph,<span style=\"color: #0000ff;\">int</span> <span style=\"color: #0000ff;\">from</span>, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> to) \r\n{\r\n    position np;\r\n    position nodeAddr;\r\n    \r\n    np </span>= graph + <span style=\"color: #0000ff;\">from</span><span style=\"color: #000000;\">;\r\n\r\n    nodeAddr </span>= (position) malloc(<span style=\"color: #0000ff;\">sizeof</span>(<span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> node));\r\n    nodeAddr</span>-&gt;element =<span style=\"color: #000000;\"> to;\r\n    nodeAddr</span>-&gt;next    = np-&gt;<span style=\"color: #000000;\">next;\r\n    np</span>-&gt;next =<span style=\"color: #000000;\"> nodeAddr;    \r\n}\r\n\r\n</span><span style=\"color: #0000ff;\">void</span> init_indeg(position graph, <span style=\"color: #0000ff;\">int</span> nv, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> indeg[]) {\r\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i;\r\n    position p;\r\n\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> initialize</span>\r\n    <span style=\"color: #0000ff;\">for</span>(i=<span style=\"color: #800080;\">0</span>; i&lt;nv; i++<span style=\"color: #000000;\">) {\r\n        indeg[i] </span>= <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\r\n    }\r\n\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> update</span>\r\n    <span style=\"color: #0000ff;\">for</span>(i=<span style=\"color: #800080;\">0</span>; i&lt;nv; i++<span style=\"color: #000000;\">) {\r\n        p </span>= (graph + i)-&gt;<span style=\"color: #000000;\">next;\r\n        </span><span style=\"color: #0000ff;\">while</span>(p !=<span style=\"color: #000000;\"> NULL) {\r\n            (indeg[p</span>-&gt;element])++<span style=\"color: #000000;\">;\r\n            p </span>= p-&gt;<span style=\"color: #000000;\">next;\r\n        }\r\n    }  \r\n}\r\n\r\n</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> update indeg when ver is removed</span>\r\n<span style=\"color: #0000ff;\">void</span> update_indeg(position graph, <span style=\"color: #0000ff;\">int</span> nv, <span style=\"color: #0000ff;\">int</span> indeg[], <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> ver) {\r\n    position p;\r\n    p </span>= (graph + ver)-&gt;<span style=\"color: #000000;\">next;\r\n    </span><span style=\"color: #0000ff;\">while</span>(p !=<span style=\"color: #000000;\"> NULL) {\r\n        (indeg[p</span>-&gt;element])--<span style=\"color: #000000;\">;\r\n        p </span>= p-&gt;<span style=\"color: #000000;\">next;\r\n    }\r\n}\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> find the vertice with 0 indegree</span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">int</span> find_next(<span style=\"color: #0000ff;\">int</span> indeg[], <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> nv) {\r\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> next;\r\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i;\r\n    </span><span style=\"color: #0000ff;\">for</span>(i=<span style=\"color: #800080;\">0</span>; i&lt;nv; i++<span style=\"color: #000000;\">) {\r\n        </span><span style=\"color: #0000ff;\">if</span>(indeg[i] == <span style=\"color: #800080;\">0</span>) <span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;\r\n    }\r\n    indeg[i] </span>= -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\r\n\r\n    </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> i;\r\n}\r\n\r\n</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> return the sequence</span>\r\n<span style=\"color: #0000ff;\">void</span> get_seq(position graph, <span style=\"color: #0000ff;\">int</span> nv, <span style=\"color: #0000ff;\">int</span> indeg[], <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> seq[]){\r\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i;\r\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> ver;\r\n    </span><span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i&lt;nv; i++<span style=\"color: #000000;\">) {\r\n        ver </span>=<span style=\"color: #000000;\"> find_next(indeg, nv);\r\n        seq[i] </span>=<span style=\"color: #000000;\"> ver;\r\n        update_indeg(graph, nv, indeg, ver);\r\n    }\r\n}</span></pre>\r\n</div>\r\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\r\n<p><span style=\"font-family: courier new,courier;\">&#x4E0A;&#x9762;&#x7B97;&#x6CD5;&#x4E2D;&#x6709;&#x4E00;&#x4E2A;&#x904D;&#x5386;&#x6240;&#x6709;&#x8282;&#x70B9;&#x7684;for&#x5FAA;&#x73AF;&#xFF0C;&#x800C;&#x5FAA;&#x73AF;&#x4E2D;&#x7684;find_next()&#x51FD;&#x6570;&#x4E5F;&#x4F1A;&#x904D;&#x5386;&#x6240;&#x6709;&#x7684;&#x8282;&#x70B9;&#x3002;&#x56E0;&#x6B64;&#xFF0C;&#x7B97;&#x6CD5;&#x590D;&#x6742;&#x5EA6;&#x4E3A;[$O(|V|^2)$]&#x3002;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#x5728;find_next()&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x5C06;&#x653E;&#x5165;&#x5E8F;&#x5217;&#x7684;&#x8282;&#x70B9;&#x5165;&#x5EA6;&#x8BB0;&#x4E3A;-1&#x3002;find_next()&#x6BCF;&#x6B21;&#x4F1A;&#x904D;&#x5386;&#x6240;&#x6709;&#x7684;&#x8282;&#x70B9;&#xFF0C;&#x6CA1;&#x6709;&#x5FC5;&#x8981;&#x904D;&#x5386;&#x5165;&#x5EA6;&#x4E3A;-1&#x7684;&#x8282;&#x70B9;&#x3002;&#x4E3A;&#x4E86;&#x6539;&#x5584;&#x7B97;&#x6CD5;&#x590D;&#x6742;&#x5EA6;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x4E00;&#x4E2A;&#x961F;&#x5217;(&#x6216;&#x8005;&#x6808;)&#x6765;&#x8BB0;&#x5F55;&#x5165;&#x5EA6;&#x4E3A;0&#x7684;&#x5143;&#x7D20;&#x3002;&#x6211;&#x4EEC;&#x6BCF;&#x6B21;&#x4ECE;&#x961F;&#x5217;&#x4E2D;&#x53D6;&#x51FA;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x653E;&#x5165;&#x62D3;&#x6251;&#x5E8F;&#x5217;&#xFF0C;&#x5E76;&#x66F4;&#x65B0;&#x76F8;&#x90BB;&#x5143;&#x7D20;&#x7684;&#x5165;&#x5EA6;&#x3002;&#x5982;&#x679C;&#x8BE5;&#x5143;&#x7D20;&#x7684;&#x76F8;&#x90BB;&#x5143;&#x7D20;&#x7684;&#x5165;&#x5EA6;&#x53D8;&#x4E3A;0&#xFF0C;&#x90A3;&#x4E48;&#x5C06;&#x5B83;&#x4EEC;&#x653E;&#x5165;&#x961F;&#x5217;&#x4E2D;&#x3002;&#x53EF;&#x4EE5;&#x8BC1;&#x660E;&#xFF0C;&#x8FD9;&#x6837;&#x7684;&#x6539;&#x9020;&#x540E;&#xFF0C;&#x7B97;&#x6CD5;&#x590D;&#x6742;&#x5EA6;&#x4E3A;[$O(|V|+|E|)$]</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#xA0;</span></p>\r\n<h3><span style=\"font-family: courier new,courier;\">&#x95EE;&#x9898;&#x62D3;&#x5C55;</span></h3>\r\n<p><span style=\"font-family: courier new,courier;\">&#x901A;&#x8FC7;&#x4E0A;&#x9762;&#x7684;&#x7B97;&#x6CD5;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x83B7;&#x5F97;&#x4E00;&#x4E2A;&#x5408;&#x6CD5;&#x7684;&#x79D1;&#x6280;&#x53D1;&#x5C55;&#x5E8F;&#x5217;&#x3002;&#x6211;&#x968F;&#x540E;&#x60F3;&#x5230;&#x4E00;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x5982;&#x4F55;&#x8F93;&#x51FA;&#x6240;&#x6709;&#x7684;&#x79D1;&#x6280;&#x53D1;&#x5C55;&#x5E8F;&#x5217;&#x5462;&#xFF1F;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x7684;&#x5173;&#x952E;&#x5728;&#x4E8E;&#xFF0C;&#x67D0;&#x4E2A;&#x65F6;&#x523B;&#xFF0C;&#x53EF;&#x80FD;&#x540C;&#x65F6;&#x6709;&#x591A;&#x4E2A;&#x8282;&#x70B9;&#x7684;&#x5165;&#x5EA6;&#x540C;&#x65F6;&#x4E3A;0&#x3002;&#x5B83;&#x4EEC;&#x4E2D;&#x7684;&#x4EFB;&#x4F55;&#x4E00;&#x4E2A;&#x90FD;&#x53EF;&#x4EE5;&#x6210;&#x4E3A;&#x4E0B;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x3002;&#x4E3A;&#x6B64;&#xFF0C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x8BB0;&#x5F55;&#x6240;&#x6709;&#x7684;&#x53EF;&#x80FD;&#x6027;&#x3002;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">(&#x6211;&#x60F3;&#x5230;&#x7684;&#xFF0C;&#x662F;&#x590D;&#x5236;&#x5165;&#x5EA6;&#x6570;&#x7EC4;&#x548C;&#x5E8F;&#x5217;&#x6570;&#x7EC4;&#xFF0C;&#x4EE5;&#x50A8;&#x5B58;&#x4E0D;&#x540C;&#x7684;&#x53EF;&#x80FD;&#x6027;&#x3002;&#x4E0D;&#x77E5;&#x9053;&#x5927;&#x5BB6;&#x6709;&#x4EC0;&#x4E48;&#x66F4;&#x597D;&#x7684;&#x60F3;&#x6CD5;&#x5462;&#xFF1F;)</span></p>\r\n<p>&#xA0;</p>\r\n<h3><span style=\"font-family: courier new,courier;\">&#x603B;&#x7ED3;</span></h3>\r\n<p><span style=\"font-family: courier new,courier;\">&#x56FE;&#xFF0C;&#x62D3;&#x6251;&#x6392;&#x5E8F;</span></p>\r\n<p>&#xA0;</p>\r\n<p><span style=\"font-family: courier new,courier;\"><span style=\"font-family: courier new,courier;\">&#x6B22;&#x8FCE;&#x7EE7;&#x7EED;&#x9605;&#x8BFB;<a href=\"http://www.cnblogs.com/vamei/archive/2013/03/22/2974052.html\">&#x201C;&#x7EB8;&#x4E0A;&#x8C08;&#x5175;: &#x7B97;&#x6CD5;&#x4E0E;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x201D;</a>&#x7CFB;&#x5217;&#x3002;</span></span></p>\r\n<p>&#xA0;</p>"}