{"content":"<p><span style=\"font-family: courier new,courier;\">&#x4F5C;&#x8005;&#xFF1A;Vamei &#x51FA;&#x5904;&#xFF1A;http://www.cnblogs.com/vamei &#x6B22;&#x8FCE;&#x8F6C;&#x8F7D;&#xFF0C;&#x4E5F;&#x8BF7;&#x4FDD;&#x7559;&#x8FD9;&#x6BB5;&#x58F0;&#x660E;&#x3002;&#x8C22;&#x8C22;&#xFF01;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#xA0;</span></p>\r\n<h3><span style=\"font-family: courier new,courier;\">&#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;&#x7684;&#x6DF1;&#x5EA6;&#x4E0E;&#x641C;&#x7D22;&#x6548;&#x7387;</span></h3>\r\n<p><span style=\"font-family: courier new,courier;\">&#x6211;&#x4EEC;&#x5728;<a id=\"cb_post_title_url\" class=\"postTitle2\" href=\"http://www.cnblogs.com/vamei/archive/2013/03/17/2962290.html\">&#x6811;, &#x4E8C;&#x53C9;&#x6811;, &#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;</a>&#x4E2D;&#x63D0;&#x5230;&#xFF0C;&#x4E00;&#x4E2A;&#x6709;n&#x4E2A;&#x8282;&#x70B9;&#x7684;&#x4E8C;&#x53C9;&#x6811;&#xFF0C;&#x5B83;&#x7684;&#x6700;&#x5C0F;&#x6DF1;&#x5EA6;&#x4E3A;<span style=\"color: #ff0000;\">log(n)</span>&#xFF0C;&#x6700;&#x5927;&#x6DF1;&#x5EA6;&#x4E3A;<span style=\"color: #ff0000;\">n</span>&#x3002;&#x6BD4;&#x5982;&#x4E0B;&#x9762;&#x4E24;&#x4E2A;&#x4E8C;&#x53C9;&#x6811;:</span></p>\r\n<p><span style=\"font-family: courier new,courier;\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://images.cnitblog.com/blog/413416/201303/18192708-33f7275db8f04f29bceb101db8e363ed.png\" alt=\"\"></span></p>\r\n<p style=\"text-align: center;\"><span style=\"font-family: courier new,courier;\">&#x6DF1;&#x5EA6;&#x4E3A;n&#x7684;&#x4E8C;&#x53C9;&#x6811;</span></p>\r\n<p style=\"text-align: center;\"><span style=\"font-family: courier new,courier;\"><img src=\"http://images.cnitblog.com/blog/413416/201303/18193146-54c40b4027ff442fb3199543c7f42d8e.png\" alt=\"\"></span></p>\r\n<p style=\"text-align: center;\"><span style=\"font-family: courier new,courier;\">&#x6DF1;&#x5EA6;&#x4E3A;log(n)&#x7684;&#x4E8C;&#x53C9;&#x6811;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#x8FD9;&#x4E24;&#x4E2A;&#x4E8C;&#x53C9;&#x6811;&#x540C;&#x65F6;&#x4E5F;&#x662F;<span style=\"color: #ff0000;\">&#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;<span style=\"color: #000000;\">(&#x53C2;&#x8003;<a id=\"cb_post_title_url\" class=\"postTitle2\" href=\"http://www.cnblogs.com/vamei/archive/2013/03/17/2962290.html\">&#x6811;, &#x4E8C;&#x53C9;&#x6811;, &#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;</a>)</span></span>&#x3002;&#x6CE8;&#x610F;&#xFF0C;log&#x4EE5;2&#x4E3A;&#x57FA;&#x5E95;&#x3002;<span style=\"color: #ff0000;\">log(n)</span>&#x662F;&#x6307;&#x6DF1;&#x5EA6;&#x7684;&#x91CF;&#x7EA7;&#x3002;&#x6839;&#x636E;&#x6211;&#x4EEC;&#x5BF9;&#x6DF1;&#x5EA6;&#x7684;&#x5B9A;&#x4E49;&#xFF0C;&#x7CBE;&#x786E;&#x7684;&#x6700;&#x5C0F;&#x6DF1;&#x5EA6;&#x4E3A;floor(log(n)+1)&#x3002;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#x6211;&#x4EEC;&#x5C06;&#x5904;&#x4E8E;&#x540C;&#x4E00;&#x6DF1;&#x5EA6;&#x7684;&#x8282;&#x70B9;&#x5F52;&#x4E3A;&#x4E00;&#x5C42;&#x3002;&#x5982;&#x679C;&#x9664;&#x6700;&#x540E;&#x4E00;&#x5C42;&#x5916;&#x7684;&#x5176;&#x4ED6;&#x5C42;&#x90FD;&#x88AB;&#x8282;&#x70B9;&#x586B;&#x6EE1;&#x65F6;&#xFF0C;&#x4E8C;&#x53C9;&#x6811;&#x6709;&#x6700;&#x5C0F;&#x6DF1;&#x5EA6;log(n)&#x3002;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;&#x7684;&#x6DF1;&#x5EA6;&#x8D8A;&#x5C0F;&#xFF0C;&#x90A3;&#x4E48;&#x641C;&#x7D22;&#x6240;&#x9700;&#x8981;&#x7684;&#x8FD0;&#x7B97;&#x65F6;&#x95F4;&#x8D8A;&#x5C0F;&#x3002;&#x4E00;&#x4E2A;&#x6DF1;&#x5EA6;&#x4E3A;log(n)&#x7684;&#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;&#xFF0C;&#x641C;&#x7D22;&#x7B97;&#x6CD5;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E5F;&#x662F;log(n)&#x3002;&#x7136;&#x800C;&#xFF0C;&#x6211;&#x4EEC;&#x5728;<a href=\"http://www.cnblogs.com/vamei/archive/2013/03/17/2962290.html\">&#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;</a>&#x4E2D;&#x5DF2;&#x7ECF;&#x5B9E;&#x73B0;&#x7684;&#x63D2;&#x5165;&#x548C;&#x5220;&#x9664;&#x64CD;&#x4F5C;&#x5E76;&#x4E0D;&#x80FD;&#x8BA9;&#x4FDD;&#x6301;log(n)&#x7684;&#x6DF1;&#x5EA6;&#x3002;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x6309;&#x7167;8&#xFF0C;7&#xFF0C;6&#xFF0C;5&#xFF0C;4&#xFF0C;3&#xFF0C;2&#xFF0C;1&#x7684;&#x987A;&#x5E8F;&#x63D2;&#x5165;&#x8282;&#x70B9;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x6DF1;&#x5EA6;&#x4E3A;n&#x7684;&#x4E8C;&#x53C9;&#x6811;&#x3002;&#x90A3;&#x4E48;&#xFF0C;&#x641C;&#x7D22;&#x7B97;&#x6CD5;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E3A;n&#x3002;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#xA0;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">n&#x548C;log(n)&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x610F;&#x5473;&#x7740;&#x4EC0;&#x4E48;&#x5462;&#xFF1F;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4EE3;&#x8868;&#x4E86;&#x5B8C;&#x6210;&#x7B97;&#x6CD5;&#x6240;&#x9700;&#x8981;&#x7684;&#x8FD0;&#x7B97;&#x6B21;&#x6570;&#x3002;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x8D8A;&#x5C0F;&#xFF0C;&#x7B97;&#x6CD5;&#x7684;&#x901F;&#x5EA6;&#x8D8A;&#x5FEB;&#x3002;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://images.cnitblog.com/blog/413416/201303/18195433-714ef2b28cd942cd8b47930d8dbb3a5e.jpg\" alt=\"\"></span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#x53EF;&#x4EE5;&#x770B;&#x5230;&#xFF0C;&#x968F;&#x7740;&#x5143;&#x7D20;&#x7684;&#x589E;&#x52A0;&#xFF0C;log(n)&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x7684;&#x589E;&#x957F;&#x8981;&#x8FDC;&#x5C0F;&#x4E8E;n&#x3002;&#x6240;&#x4EE5;&#xFF0C;&#x6211;&#x4EEC;&#x81EA;&#x7136;&#x5E0C;&#x671B;&#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;&#x80FD;&#x5C3D;&#x53EF;&#x80FD;&#x4FDD;&#x6301;log(n)&#x7684;&#x6DF1;&#x5EA6;&#x3002;&#x5728;&#x4E0A;&#x9762;&#x6DF1;&#x5EA6;&#x4E3A;n&#x7684;&#x4F8B;&#x5B50;&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x53D1;&#x73B0;&#xFF0C;&#x6BCF;&#x4E2A;&#x8282;&#x70B9;&#x53EA;&#x6709;&#x5DE6;&#x8282;&#x70B9;&#x88AB;&#x586B;&#x6EE1;&#x3002;&#x6811;&#x7684;&#x6BCF;&#x4E00;&#x5C42;&#x90FD;&#x6709;&#x5F88;&#x591A;&#x7A7A;&#x4F4D;&#x3002;&#x80FD;&#x4E0D;&#x80FD;&#x5C3D;&#x53EF;&#x80FD;&#x51CF;&#x5C11;&#x6BCF;&#x4E00;&#x5C42;&#x7684;&#x7A7A;&#x4F4D;&#x5462;&#xFF1F; (&#x76F8;&#x5E94;&#x7684;&#xFF0C;&#x51CF;&#x5C11;&#x6811;&#x7684;&#x6DF1;&#x5EA6;)</span></p>\r\n<p><span style=\"font-family: courier new,courier;\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://images.cnitblog.com/blog/413416/201303/23214324-46035a62f5f141bbb86a4a7dcd2ecd6d.jpg\" alt=\"\" width=\"390\" height=\"385\"></span></p>\r\n<p style=\"text-align: center;\"><span style=\"font-family: courier new,courier;\">&#x201C;&#x7D27;&#x81F4;&#x201D;&#x7684;&#x6811;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#x4E00;&#x79CD;&#x60F3;&#x6CD5;&#x662F;&#x5148;&#x586B;&#x6EE1;&#x4E00;&#x5C42;&#xFF0C;&#x518D;&#x53BB;&#x586B;&#x5145;&#x4E0B;&#x4E00;&#x5C42;&#xFF0C;&#x8FD9;&#x6837;&#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x5B8C;&#x5168;&#x4E8C;&#x53C9;&#x6811;(complete binary tree)&#x3002;&#x8FD9;&#x6837;&#x7684;&#x4E8C;&#x53C9;&#x6811;&#x5B9E;&#x73B0;&#x63D2;&#x5165;&#x7B97;&#x6CD5;&#x4F1A;&#x6BD4;&#x8F83;&#x590D;&#x6742;&#x3002;&#x6211;&#x4EEC;&#x5C06;&#x4ECB;&#x7ECD;&#x4E00;&#x79CD;&#x601D;&#x8DEF;&#x76F8;&#x4F3C;&#xFF0C;&#x4F46;&#x6BD4;&#x8F83;&#x5BB9;&#x6613;&#x5B9E;&#x73B0;&#x7684;&#x6811;&#x72B6;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x2014;&#x2014;AVL&#x6811;&#x3002;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#xA0;</span></p>\r\n<h3><span style=\"font-family: courier new,courier;\">AVL&#x6811;</span></h3>\r\n<p><span style=\"font-family: courier new,courier;\"><span class=\"mw-redirect\"><span style=\"color: #ff0000;\">AVL&#x6811;</span>&#x662F;&#x6839;&#x636E;&#x5B83;&#x7684;&#x53D1;&#x660E;&#x8005;G. M.&#xA0;<span style=\"color: #ff0000;\">A</span>delson-<span style=\"color: #ff0000;\">V</span>elskii</span>&#x548C;<span class=\"mw-redirect\">E.&#xA0;M.&#xA0;<span style=\"color: #ff0000;\">L</span>andis&#x547D;&#x540D;&#x7684;&#x3002;</span>&#x5B83;&#x662F;&#x4E00;&#x79CD;&#x7279;&#x6B8A;&#x7684;&#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;&#x3002;AVL&#x6811;&#x8981;&#x6C42;: <span style=\"color: #ff0000;\">&#x4EFB;&#x4E00;&#x8282;&#x70B9;&#x7684;&#x5DE6;&#x5B50;&#x6811;&#x6DF1;&#x5EA6;&#x548C;&#x53F3;&#x5B50;&#x6811;&#x6DF1;&#x5EA6;&#x76F8;&#x5DEE;&#x4E0D;&#x8D85;&#x8FC7;1</span> </span></p>\r\n<p><span style=\"font-family: courier new,courier;\">(&#x7A7A;&#x6811;&#x7684;&#x6DF1;&#x5EA6;&#x4E3A;0&#x3002;&#x6CE8;&#x610F;&#xFF0C;&#x6709;&#x7684;&#x6559;&#x6750;&#x4E2D;&#xFF0C;&#x91C7;&#x7528;&#x4E86;&#x4E0D;&#x540C;&#x7684;&#x6DF1;&#x5EA6;&#x5B9A;&#x4E49;&#x65B9;&#x6CD5;&#xFF0C;&#x6240;&#x4EE5;&#x7A7A;&#x6811;&#x7684;&#x6DF1;&#x5EA6;&#x4E3A;-1)</span></p>\r\n<p>&#xA0;</p>\r\n<p><span style=\"font-family: courier new,courier;\">&#x4E0B;&#x9762;&#x662F;AVL&#x6811;:</span></p>\r\n<p><span style=\"font-family: courier new,courier;\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://images.cnitblog.com/blog/413416/201303/18222019-3907b1cf0af0403cb8f2450436282dcf.png\" alt=\"\"></span></p>\r\n<p style=\"text-align: center;\"><span style=\"font-family: courier new,courier;\">AVL&#x6811;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">AVL&#x6811;&#x7684;&#x7279;&#x6027;&#x8BA9;&#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;&#x7684;&#x8282;&#x70B9;&#x5B9E;&#x73B0;<span style=\"color: #ff0000;\">&#x5E73;&#x8861;</span>(balance)&#xFF1A;&#x8282;&#x70B9;&#x76F8;&#x5BF9;&#x5747;&#x5300;&#x5206;&#x5E03;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x504F;&#x5411;&#x67D0;&#x4E00;&#x4FA7;&#x3002;&#x56E0;&#x6B64;&#xFF0C;AVL&#x6811;&#x7684;&#x641C;&#x7D22;&#x7B97;&#x6CD5;&#x590D;&#x6742;&#x5EA6;&#x662F;<span style=\"color: #ff0000;\">log(n)</span>&#x7684;&#x91CF;&#x7EA7;&#x3002;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#x6211;&#x4EEC;&#x5728;<a href=\"http://www.cnblogs.com/vamei/archive/2013/03/17/2962290.html\">&#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;</a>&#x4E2D;&#x5B9A;&#x4E49;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;&#x9664;&#x4E86;&#x63D2;&#x5165;&#xFF0C;&#x90FD;&#x53EF;&#x4EE5;&#x7528;&#x5728;AVL&#x6811;&#x4E0A; (&#x5047;&#x8BBE;&#x4F7F;&#x7528;&#x61D2;&#x60F0;&#x5220;&#x9664;)&#x3002;&#x5982;&#x679C;&#x8FDB;&#x884C;<span style=\"color: #ff0000;\">&#x63D2;&#x5165;</span>&#x64CD;&#x4F5C;&#xFF0C;&#x6709;&#x53EF;&#x80FD;&#x4F1A;&#x7834;&#x574F;AVL&#x6811;&#x7684;&#x6027;&#x8D28;&#xFF0C;&#x6BD4;&#x5982;:</span></p>\r\n<p><span style=\"font-family: courier new,courier;\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://images.cnitblog.com/blog/413416/201303/18231759-1324789a577246eca45489a4daff8440.png\" alt=\"\"></span></p>\r\n<p style=\"text-align: center;\"><span style=\"font-family: courier new,courier;\">&#x63D2;&#x5165;2: &#x7834;&#x574F;AVL&#x6811;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#x89C2;&#x5BDF;&#x8282;&#x70B9;5&#xFF0C;&#x5B83;&#x7684;&#x5DE6;&#x5B50;&#x6811;&#x6DF1;&#x5EA6;&#x4E3A;2&#xFF0C;&#x53F3;&#x5B50;&#x6811;&#x6DF1;&#x5EA6;&#x4E3A;0&#xFF0C;&#x6240;&#x4EE5;&#x5DE6;&#x53F3;&#x4E24;&#x4E2A;&#x5B50;&#x6811;&#x6DF1;&#x5EA6;&#x76F8;&#x5DEE;&#x4E3A;2&#xFF0C;&#x4E0D;&#x518D;&#x662F;AVL&#x6811;&#x3002;&#x7531;&#x4E8E;2&#x7684;&#x52A0;&#x5165;&#xFF0C;&#x4ECE;&#x8282;&#x70B9;6&#xFF0C;1&#xFF0C;5&#xFF0C;3&#x5230;2&#x7684;&#x5C42;&#x6570;&#x90FD;&#x589E;&#x52A0;1&#x3002;6, 1, 5&#x8282;&#x70B9;&#x7684;AVL&#x6027;&#x8D28;&#x90FD;&#x88AB;&#x7834;&#x574F;&#x3002;&#x5982;&#x679C;&#x4ECE;&#x8282;&#x70B9;2&#x5411;&#x4E0A;&#x56DE;&#x6EAF;&#xFF0C;&#x8282;&#x70B9;5&#x662F;&#x7B2C;&#x4E00;&#x4E2A;&#x88AB;&#x7834;&#x574F;&#x7684;&#x3002;&#x4ECE;&#x8282;&#x70B9;3&#x5F00;&#x59CB;&#x7684;&#x5B50;&#x6811;&#x6DF1;&#x5EA6;&#x52A0;1&#xFF0C;&#x8FD9;&#x662F;&#x9020;&#x6210;6, 1, 5&#x7684;AVL&#x6027;&#x8D28;&#x88AB;&#x7834;&#x574F;&#x7684;&#x672C;&#x8D28;&#x539F;&#x56E0;&#x3002;&#x6211;&#x4EEC;&#x5C06;5&#x548C;3&#x4E4B;&#x95F4;&#x7684;&#x8DEF;&#x5F84;&#x753B;&#x6210;<span style=\"color: #ff0000;\">&#x865A;&#x7EBF;</span>(&#x5C31;&#x597D;&#x50CF;&#x6302;&#x4E86;&#x91CD;&#x7269;&#xFF0C;&#x8FB9;&#x88AB;&#x62C9;&#x65AD;&#x4E00;&#x6837;)&#x3002;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#xA0;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;<span style=\"color: #ff0000;\">&#x5355;&#x65CB;&#x7167;(single rotation)<span style=\"color: #000000;\">&#xFF0C;&#x8C03;&#x6574;</span></span>&#x4EE5;5&#x4E3A;&#x6839;&#x8282;&#x70B9;&#x7684;&#x5B50;&#x6811;&#xFF0C;&#x6765;&#x4FEE;&#x6B63;&#x56E0;&#x4E3A;&#x63D2;&#x5165;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x800C;&#x5F15;&#x8D77;&#x7684;&#x5BF9;AVL&#x6027;&#x8D28;&#x7684;&#x7834;&#x574F;&#x3002;&#x5982;&#x4E0B;:</span></p>\r\n<p><span style=\"font-family: courier new,courier;\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://images.cnitblog.com/blog/413416/201303/18232051-370bd4a19e3a4e7f871fd153c7d3d97a.png\" alt=\"\"></span></p>\r\n<p style=\"text-align: center;\"><span style=\"font-family: courier new,courier;\">Single rotation: &#x5DE6;&#x4FA7;&#x8D85;&#x91CD;&#xFF0C;&#x5411;&#x53F3;&#x8F6C;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#x901A;&#x8FC7;&#x5355;&#x65CB;&#x8F6C;&#xFF0C;3&#x6210;&#x4E3A;&#x65B0;&#x7684;&#x6839;&#x8282;&#x70B9;&#xFF0C;2,5&#x79F0;&#x4E3A;3&#x7684;&#x5DE6;&#x53F3;&#x5B50;&#x8282;&#x70B9;&#x3002;&#x5B50;&#x6811;&#x91CD;&#x65B0;&#x6210;&#x4E3A;AVL&#x6811;&#x3002;&#x8BE5;&#x5B50;&#x6811;&#x7684;&#x6DF1;&#x5EA6;&#x51CF;&#x5C0F;1&#xFF0C;&#x8FD9;&#x5C06;&#x81EA;&#x52A8;&#x4FEE;&#x6B63;2&#x5E26;&#x7ED9;&#x8282;&#x70B9;6,1&#x7684;&#x201C;&#x8D85;&#x8D1F;&#x8377;&#x201D;&#x3002;</span></p>\r\n<p>&#xA0;</p>\r\n<p><span style=\"font-family: courier new,courier;\">&#x5355;&#x65CB;&#x8F6C;&#x6548;&#x679C;&#x5982;&#x4E0B;&#xFF1A;</span></p>\r\n<p style=\"text-align: center;\"><span style=\"font-family: courier new,courier;\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://images.cnitblog.com/blog/413416/201303/20203418-6c96df32e29843469a65fff9a4a57540.png\" alt=\"\">&#xA0;&#x5411;&#x53F3;&#x5355;&#x65CB;&#x8F6C;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#x7279;&#x522B;&#x8981;&#x6CE8;&#x610F;&#x7684;&#x662F;&#xFF0C;&#x4E3A;&#x4E86;&#x4FDD;&#x6301;&#x4E8C;&#x53C9;&#x6811;&#x7684;&#x6027;&#x8D28;&#xFF0C;&#x5B50;&#x6811;B&#x8FC7;&#x7EE7;&#x7ED9;&#x4E86;&#x8282;&#x70B9;5&#x3002;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#x5411;&#x5DE6;&#x5355;&#x65CB;&#x8F6C;&#x4E0E;&#x4E4B;&#x7C7B;&#x4F3C;&#x3002;&#x4F5C;&#x4E3A;&#x7EC3;&#x4E60;&#xFF0C;&#x53EF;&#x4EE5;&#x5C1D;&#x8BD5;&#x7ED8;&#x5236;&#x5411;&#x5DE6;&#x5355;&#x65CB;&#x8F6C;&#x7684;&#x793A;&#x610F;&#x56FE;&#x3002;</span></p>\r\n<p>&#xA0;</p>\r\n<p><span style=\"font-family: courier new,courier;\">&#x4F46;&#x5982;&#x679C;&#x63D2;&#x5165;&#x7684;&#x8282;&#x70B9;&#x4E0D;&#x662F;2&#xFF0C;&#x800C;&#x662F;4&#xFF0C;&#x4F1A;&#x662F;&#x5982;&#x4F55;&#x5462;&#xFF1F;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://images.cnitblog.com/blog/413416/201303/18232545-036ce4d587b44194b28e7777ef9e3c1f.png\" alt=\"\"></span></p>\r\n<p style=\"text-align: center;\"><span style=\"font-family: courier new,courier;\">&#x63D2;&#x5165;4</span></p>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#x5C1D;&#x8BD5;&#x5355;&#x65CB;&#x8F6C;&#xFF0C;&#x4F1A;&#x53D1;&#x73B0;&#x65E0;&#x6CD5;&#x89E3;&#x51B3;&#x95EE;&#x9898;&#x3002;&#x4EE5;5&#x4E3A;&#x6839;&#x8282;&#x70B9;&#x7684;&#x5B50;&#x6811;&#x5411;&#x53F3;&#x5355;&#x65CB;&#x8F6C;&#x540E;&#xFF0C;&#x6811;&#x5C06;&#x4EE5;3&#x4E3A;&#x6839;&#x8282;&#x70B9;&#xFF0C;4,5&#x4E3A;&#x5B50;&#x8282;&#x70B9;&#x3002;4&#x6BD4;3&#x5927;&#xFF0C;&#x5374;&#x662F;3&#x7684;&#x5DE6;&#x5B50;&#x8282;&#x70B9;&#xFF0C;&#x663E;&#x7136;&#xFF0C;&#x8FD9;&#x4F9D;&#x7136;&#x4E0D;&#x7B26;&#x5408;&#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;&#x7684;&#x6027;&#x8D28;&#x3002;&#x4F46;&#x57FA;&#x4E8E;&#x548C;&#x4E0A;&#x9762;&#x76F8;&#x4F3C;&#x7684;&#x539F;&#x5219;(&#x8C03;&#x6574;&#x4EE5;5&#x4E3A;&#x6839;&#x8282;&#x70B9;&#x7684;&#x6811;)&#xFF0C;&#x6211;&#x4EEC;&#x53D1;&#x73B0;&#x6709;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x89E3;&#x51B3;&#x65B9;&#x5F0F;&#xFF1A;</span></p>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://images.cnitblog.com/blog/413416/201303/19003614-1cc35c19a81440ccb2ef041accf57f0c.png\" alt=\"\"></span></p>\r\n<p style=\"text-align: center;\"><span style=\"font-family: courier new,courier;\">double rotation</span></p>\r\n<p style=\"text-align: center;\"><span style=\"font-family: courier new,courier;\">&#xA0;</span></p>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#x4E0A;&#x9762;&#x7684;&#x64CD;&#x4F5C;&#x88AB;&#x79F0;&#x4F5C;<span style=\"color: #ff0000;\">&#x53CC;&#x65CB;&#x8F6C;(double rotation)</span>&#x3002;&#x53CC;&#x65CB;&#x8F6C;&#x5B9E;&#x9645;&#x4E0A;&#x662F;&#x8FDB;&#x884C;&#x4E24;&#x6B21;&#x5355;&#x65CB;&#x8F6C;: 4&#x4E3A;&#x6839;&#x8282;&#x70B9;&#x7684;&#x5B50;&#x6811;&#x5148;&#x8FDB;&#x884C;&#x4E00;&#x6B21;&#x5411;&#x5DE6;&#x7684;&#x5355;&#x65CB;&#x8F6C;&#xFF0C;&#x7136;&#x540E;&#x5C06;5&#x4E3A;&#x6839;&#x8282;&#x70B9;&#x7684;&#x5B50;&#x6811;&#x8FDB;&#x884C;&#x4E86;&#x4E00;&#x6B21;&#x5411;&#x53F3;&#x7684;&#x5355;&#x65CB;&#x8F6C;&#x3002;&#x8FD9;&#x6837;&#x6062;&#x590D;&#x4E86;&#x6811;&#x7684;ACL&#x6027;&#x8D28;&#x3002;</span></p>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#xA0;</span></p>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#x5BF9;&#x4E8E;AVL&#x6811;&#xFF0C;&#x53EF;&#x4EE5;&#x8BC1;&#x660E;&#xFF0C;&#x5728;&#x65B0;&#x589E;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x65F6;&#xFF0C;&#x603B;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x4E00;&#x6B21;&#x65CB;&#x8F6C;&#x6062;&#x590D;AVL&#x6811;&#x7684;&#x6027;&#x8D28;&#x3002;</span></p>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#x5F53;&#x6211;&#x4EEC;&#x63D2;&#x5165;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x8282;&#x70B9;&#x65F6;&#xFF0C;<span style=\"color: #ff0000;\"><span style=\"color: #000000;\">&#x5728;&#x54EA;&#x91CC;&#x65CB;&#x8F6C;&#xFF1F;&#x662F;&#x7528;</span><span style=\"color: #888888;\">&#x5355;&#x65CB;&#x8F6C;&#x8FD8;&#x662F;&#x53CC;&#x65CB;&#x8F6C;</span></span>?</span></p>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://images.cnitblog.com/blog/413416/201303/20202734-2b66e9ed70d043fcbb1d02b3eb05a780.png\" alt=\"\"></span></p>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#x6211;&#x4EEC;&#x6309;&#x7167;&#x5982;&#x4E0B;&#x57FA;&#x672C;&#x6B65;&#x9AA4;&#x8FDB;&#x884C;&#xFF1A;</span></p>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">1. &#x6309;&#x7167;&#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;&#x7684;&#x65B9;&#x5F0F;&#x589E;&#x52A0;&#x8282;&#x70B9;&#xFF0C;&#x65B0;&#x589E;&#x8282;&#x70B9;&#x79F0;&#x4E3A;&#x4E00;&#x4E2A;&#x53F6;&#x8282;&#x70B9;&#x3002;</span></p>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">2. &#x4ECE;&#x65B0;&#x589E;&#x8282;&#x70B9;&#x5F00;&#x59CB;&#xFF0C;&#x56DE;&#x6EAF;&#x5230;<span style=\"color: #ff0000;\">&#x7B2C;&#x4E00;&#x4E2A;&#x5931;&#x8861;&#x8282;&#x70B9;</span>(5)&#x3002;</span></p>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#xA0; &#xA0; (&#x5982;&#x679C;&#x56DE;&#x6EAF;&#x5230;&#x6839;&#x8282;&#x70B9;&#xFF0C;&#x8FD8;&#x6CA1;&#x6709;&#x5931;&#x8861;&#x8282;&#x70B9;&#xFF0C;&#x5C31;&#x8BF4;&#x660E;&#x8BE5;&#x6811;&#x5DF2;&#x7ECF;&#x7B26;&#x5408;AVL&#x6027;&#x8D28;&#x3002;)</span></p>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">3. &#x627E;&#x5230;<span style=\"color: #ff0000;\">&#x65AD;&#x7684;&#x8FB9;</span>(5-&gt;3)&#xFF0C;&#x5E76;&#x786E;&#x5B9A;&#x65AD;&#x5F26;&#x7684;&#x65B9;&#x5411;(5&#x7684;&#x5DE6;&#x4FA7;)</span></p>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">4. &#x4EE5;&#x65AD;&#x8FB9;&#x4E0B;&#x7AEF;(3)&#x4E3A;&#x6839;&#x8282;&#x70B9;&#xFF0C;&#x786E;&#x5B9A;&#x4E24;&#x4E2A;&#x5B50;&#x6811;&#x4E2D;&#x7684;&#x54EA;&#x4E00;&#x4E2A;&#x6DF1;&#x5EA6;&#x5927;(&#x5DE6;&#x5B50;&#x6811;&#x8FD8;&#x662F;&#x53F3;&#x5B50;&#x6811;)&#x3002;</span></p>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#xA0; &#xA0; (&#x8FD9;&#x4E24;&#x68F5;&#x5B50;&#x6811;&#x7684;&#x6DF1;&#x5EA6;&#x4E0D;&#x53EF;&#x80FD;&#x76F8;&#x7B49;&#xFF0C;&#x800C;&#x4E14;&#x6DF1;&#x5EA6;&#x5927;&#x7684;&#x5B50;&#x6811;&#x5305;&#x542B;&#x6709;&#x65B0;&#x589E;&#x8282;&#x70B9;&#x3002;&#x60F3;&#x60F3;&#x4E3A;&#x4EC0;&#x4E48;)</span></p>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">5. &#x5982;&#x679C;&#x7B2C;2&#x548C;&#x7B2C;3&#x6B65;&#x4E2D;&#x7684;<span style=\"color: #ff0000;\">&#x65B9;&#x5411;&#x4E00;&#x81F4;</span>(&#x90FD;&#x4E3A;&#x5DE6;&#x6216;&#x8005;&#x90FD;&#x4E3A;&#x53F3;)&#xFF0C;&#x9700;&#x8981;<span style=\"color: #ff0000;\">&#x5355;&#x65CB;&#x8F6C;</span>&#x4EE5;&#x5931;&#x8861;&#x8282;&#x70B9;&#x4E3A;&#x6839;&#x8282;&#x70B9;&#x7684;&#x5B50;&#x6811;&#x3002;</span></p>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#xA0;&#xA0;&#xA0; <span style=\"color: #ff0000;\">&#x5426;&#x5219;</span>&#xFF0C;<span style=\"color: #ff0000;\">&#x53CC;&#x65CB;&#x8F6C;</span>&#x4EE5;&#x5931;&#x8861;&#x8282;&#x70B9;&#x4E3A;&#x6839;&#x8282;&#x70B9;&#x7684;&#x5B50;&#x6811;&#x3002;</span></p>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#xA0;</span></p>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#x4E0B;&#x9762;&#x662F;AVL&#x6811;&#x7684;&#x63D2;&#x5165;&#x7B97;&#x6CD5;&#x5B9E;&#x73B0;&#x5982;&#x4E0B;:</span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"font-family: courier new,courier;\"><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> By Vamei </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> binary search tree </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\n#include </span>&lt;stdio.h&gt;<span style=\"color: #000000;\">\r\n#include </span>&lt;stdlib.h&gt;<span style=\"color: #000000;\">\r\n\r\ntypedef </span><span style=\"color: #0000ff;\">struct</span> node *<span style=\"color: #000000;\">position;\r\ntypedef </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> ElementTP;\r\n\r\n</span><span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> node {\r\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> depth; \r\n    position parent;\r\n    ElementTP element;\r\n    position lchild;\r\n    position rchild;\r\n};\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> pointer =&gt; root node of the tree </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\ntypedef </span><span style=\"color: #0000ff;\">struct</span> node *<span style=\"color: #000000;\">TREE;\r\n\r\nposition insert_value(TREE, ElementTP);\r\n</span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> depth(TREE);\r\n\r\n</span><span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> insert_node_to_nonempty_tree(TREE, position);\r\n</span><span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> update_root_depth(TREE); \r\n</span><span style=\"color: #0000ff;\">static</span><span style=\"color: #000000;\"> TREE recover_avl(TREE, position);\r\n</span><span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> depth_diff(TREE); \r\n</span><span style=\"color: #0000ff;\">static</span><span style=\"color: #000000;\"> position insert_leaf(TREE, ElementTP);\r\n</span><span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> insert_node_to_nonempty_tree(TREE, position);\r\n</span><span style=\"color: #0000ff;\">static</span><span style=\"color: #000000;\"> TREE left_single_rotate(TREE);\r\n</span><span style=\"color: #0000ff;\">static</span><span style=\"color: #000000;\"> TREE left_double_rotate(TREE);\r\n</span><span style=\"color: #0000ff;\">static</span><span style=\"color: #000000;\"> TREE right_single_rotate(TREE);\r\n</span><span style=\"color: #0000ff;\">static</span><span style=\"color: #000000;\"> TREE right_double_rotate(TREE);\r\n\r\n</span><span style=\"color: #0000ff;\">void</span> main(<span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\">) \r\n{\r\n    TREE tr;\r\n    position np;\r\n    ElementTP element;\r\n    tr </span>=<span style=\"color: #000000;\"> NULL;\r\n    tr </span>= insert_value(tr, <span style=\"color: #800080;\">18</span><span style=\"color: #000000;\">);\r\n    tr </span>= insert_value(tr, <span style=\"color: #800080;\">5</span><span style=\"color: #000000;\">);\r\n    printf(</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #800000;\">root: %d\\n</span><span style=\"color: #800000;\">&quot;</span>, tr-&gt;<span style=\"color: #000000;\">element);\r\n    printf(</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #800000;\">depth: %d\\n</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #000000;\">, depth(tr));\r\n    tr </span>= insert_value(tr, <span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">); \r\n    printf(</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #800000;\">root: %d\\n</span><span style=\"color: #800000;\">&quot;</span>, tr-&gt;<span style=\"color: #000000;\">element);\r\n    printf(</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #800000;\">depth: %d\\n</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #000000;\">, depth(tr));\r\n    tr </span>= insert_value(tr, <span style=\"color: #800080;\">4</span><span style=\"color: #000000;\">);\r\n    printf(</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #800000;\">root: %d\\n</span><span style=\"color: #800000;\">&quot;</span>, tr-&gt;<span style=\"color: #000000;\">element);\r\n    printf(</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #800000;\">depth: %d\\n</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #000000;\">, depth(tr));\r\n    printf(</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #800000;\">root-&gt;lchild: %d\\n</span><span style=\"color: #800000;\">&quot;</span>, tr-&gt;lchild-&gt;<span style=\"color: #000000;\">element);\r\n    tr </span>= insert_value(tr, <span style=\"color: #800080;\">3</span><span style=\"color: #000000;\">);\r\n    printf(</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #800000;\">root: %d\\n</span><span style=\"color: #800000;\">&quot;</span>, tr-&gt;<span style=\"color: #000000;\">element);\r\n    printf(</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #800000;\">depth: %d\\n</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #000000;\">, depth(tr));\r\n    printf(</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #800000;\">root-&gt;lchild: %d\\n</span><span style=\"color: #800000;\">&quot;</span>, tr-&gt;lchild-&gt;<span style=\"color: #000000;\">element);\r\n    printf(</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #800000;\">root-&gt;lchild-&gt;lchild: %d\\n</span><span style=\"color: #800000;\">&quot;</span>, tr-&gt;lchild-&gt;lchild-&gt;<span style=\"color: #000000;\">element);\r\n}\r\n\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">\r\n * insert value\r\n *\r\n </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\nposition insert_value(TREE tr, ElementTP value) \r\n{\r\n    position </span><span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\">;\r\n\r\n    </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> insert a value to a binary search tree </span><span style=\"color: #008000;\">*/</span>\r\n    <span style=\"color: #0000ff;\">new</span> =<span style=\"color: #000000;\"> insert_leaf(tr, value);\r\n    update_root_depth(</span><span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\">);\r\n    </span><span style=\"color: #0000ff;\">if</span> (tr ==<span style=\"color: #000000;\"> NULL) {\r\n        tr </span>= <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\">;\r\n    }\r\n    </span><span style=\"color: #0000ff;\">else</span><span style=\"color: #000000;\"> {\r\n        tr </span>= recover_avl(tr, <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\">);\r\n    }\r\n    </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> tr;\r\n}\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">\r\n * get the depth of the tree\r\n * use this function to access depth\r\n </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> depth(TREE tr) {\r\n    </span><span style=\"color: #0000ff;\">if</span> (tr ==<span style=\"color: #000000;\"> NULL) {\r\n        </span><span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\r\n    }\r\n    </span><span style=\"color: #0000ff;\">else</span><span style=\"color: #000000;\"> {\r\n        </span><span style=\"color: #0000ff;\">return</span> tr-&gt;<span style=\"color: #000000;\">depth;\r\n    }\r\n}\r\n\r\n</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">========================================\r\n</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> static functions: for internal use</span>\r\n\r\n<span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> \r\n * traverse the path from new node to root node\r\n * make one rotation, recover AVL and stop\r\n </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">static</span><span style=\"color: #000000;\"> TREE recover_avl(TREE tr, position np) \r\n{\r\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> myDiff;\r\n    </span><span style=\"color: #0000ff;\">while</span> (np !=<span style=\"color: #000000;\"> NULL) {\r\n        update_root_depth(np);\r\n        myDiff </span>=<span style=\"color: #000000;\"> depth_diff(np);\r\n    </span><span style=\"color: #0000ff;\">if</span> (myDiff &gt; <span style=\"color: #800080;\">1</span> || myDiff &lt; -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">) {\r\n            </span><span style=\"color: #0000ff;\">if</span> (myDiff &gt; <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">) {\r\n                </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> left rotate needed </span><span style=\"color: #008000;\">*/</span>\r\n                <span style=\"color: #0000ff;\">if</span>(depth_diff(np-&gt;rchild) &gt; <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">) {\r\n                    np </span>=<span style=\"color: #000000;\"> left_single_rotate(np);\r\n                }\r\n                </span><span style=\"color: #0000ff;\">else</span><span style=\"color: #000000;\"> {\r\n                    np </span>=<span style=\"color: #000000;\"> left_double_rotate(np);\r\n                }\r\n            }\r\n            </span><span style=\"color: #0000ff;\">if</span> (myDiff &lt; -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">) {\r\n                </span><span style=\"color: #0000ff;\">if</span>(depth_diff(np-&gt;lchild) &lt; <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">) {\r\n                    np </span>=<span style=\"color: #000000;\"> right_single_rotate(np);\r\n                }\r\n                </span><span style=\"color: #0000ff;\">else</span><span style=\"color: #000000;\"> {\r\n                    np </span>=<span style=\"color: #000000;\"> right_double_rotate(np);\r\n                }\r\n            }\r\n            </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> if rotation changes root node </span><span style=\"color: #008000;\">*/</span>\r\n            <span style=\"color: #0000ff;\">if</span> (np-&gt;parent == NULL) tr =<span style=\"color: #000000;\"> np;\r\n            </span><span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;\r\n        }\r\n        np </span>= np-&gt;<span style=\"color: #000000;\">parent;\r\n    }\r\n    \r\n    </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> tr;\r\n}\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">\r\n * difference of rchild-&gt;depth and lchild-&gt;depth\r\n </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> depth_diff(TREE tr) \r\n{\r\n    </span><span style=\"color: #0000ff;\">if</span> (tr ==<span style=\"color: #000000;\"> NULL) {\r\n        </span><span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\r\n    }\r\n    </span><span style=\"color: #0000ff;\">else</span><span style=\"color: #000000;\"> {\r\n        </span><span style=\"color: #0000ff;\">return</span> depth(tr-&gt;rchild) - depth(tr-&gt;<span style=\"color: #000000;\">lchild);\r\n    }\r\n}\r\n\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> \r\n * left single rotation \r\n * return the new root\r\n </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">static</span><span style=\"color: #000000;\"> TREE left_single_rotate(TREE tr) \r\n{\r\n    TREE newRoot, parent;\r\n    parent  </span>= tr-&gt;<span style=\"color: #000000;\">parent;\r\n    newRoot </span>= tr-&gt;<span style=\"color: #000000;\">rchild;\r\n    </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> detach &amp; attach </span><span style=\"color: #008000;\">*/</span> \r\n    <span style=\"color: #0000ff;\">if</span> (newRoot-&gt;lchild != NULL) newRoot-&gt;lchild-&gt;parent =<span style=\"color: #000000;\"> tr;\r\n    tr</span>-&gt;rchild = newRoot-&gt;<span style=\"color: #000000;\">lchild;\r\n    update_root_depth(tr);\r\n   \r\n    </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> raise new root node </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\n    newRoot</span>-&gt;lchild =<span style=\"color: #000000;\"> tr;\r\n    newRoot</span>-&gt;parent =<span style=\"color: #000000;\"> parent;\r\n    </span><span style=\"color: #0000ff;\">if</span> (parent !=<span style=\"color: #000000;\"> NULL) {\r\n        </span><span style=\"color: #0000ff;\">if</span> (parent-&gt;lchild ==<span style=\"color: #000000;\"> tr) {\r\n        parent</span>-&gt;lchild =<span style=\"color: #000000;\"> newRoot;\r\n    }\r\n    </span><span style=\"color: #0000ff;\">else</span><span style=\"color: #000000;\"> {\r\n        parent</span>-&gt;rchild =<span style=\"color: #000000;\"> newRoot;\r\n    }\r\n    }\r\n    tr</span>-&gt;parent =<span style=\"color: #000000;\"> newRoot;\r\n    update_root_depth(newRoot);\r\n    </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> newRoot;\r\n}\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> \r\n * right single rotation \r\n * return the new root\r\n </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">static</span><span style=\"color: #000000;\"> TREE right_single_rotate(TREE tr) \r\n{\r\n    TREE newRoot, parent;\r\n    parent  </span>= tr-&gt;<span style=\"color: #000000;\">parent;\r\n    newRoot </span>= tr-&gt;<span style=\"color: #000000;\">lchild;\r\n\r\n    </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> detach &amp; attach </span><span style=\"color: #008000;\">*/</span>\r\n    <span style=\"color: #0000ff;\">if</span> (newRoot-&gt;rchild != NULL) newRoot-&gt;rchild-&gt;parent =<span style=\"color: #000000;\"> tr;\r\n    tr</span>-&gt;lchild = newRoot-&gt;<span style=\"color: #000000;\">rchild;\r\n    update_root_depth(tr);\r\n  \r\n    </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> raise new root node </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\n    newRoot</span>-&gt;rchild =<span style=\"color: #000000;\"> tr;\r\n    newRoot</span>-&gt;parent =<span style=\"color: #000000;\"> parent;\r\n    </span><span style=\"color: #0000ff;\">if</span> (parent !=<span style=\"color: #000000;\"> NULL) {\r\n        </span><span style=\"color: #0000ff;\">if</span> (parent-&gt;lchild ==<span style=\"color: #000000;\"> tr) {\r\n        parent</span>-&gt;lchild =<span style=\"color: #000000;\"> newRoot;\r\n    }\r\n    </span><span style=\"color: #0000ff;\">else</span><span style=\"color: #000000;\"> {\r\n        parent</span>-&gt;rchild =<span style=\"color: #000000;\"> newRoot;\r\n    }\r\n    }\r\n    tr</span>-&gt;parent =<span style=\"color: #000000;\"> newRoot;\r\n    update_root_depth(newRoot);\r\n    </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> newRoot;\r\n}\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">\r\n * left double rotation\r\n * return\r\n </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">static</span><span style=\"color: #000000;\"> TREE left_double_rotate(TREE tr) \r\n{\r\n    right_single_rotate(tr</span>-&gt;<span style=\"color: #000000;\">rchild);\r\n    </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> left_single_rotate(tr);\r\n}\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">\r\n * right double rotation\r\n * return\r\n </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">static</span><span style=\"color: #000000;\"> TREE right_double_rotate(TREE tr) \r\n{\r\n    left_single_rotate(tr</span>-&gt;<span style=\"color: #000000;\">lchild);\r\n    </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> right_single_rotate(tr);\r\n}\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">\r\n * update tr-&gt;depth\r\n * assume lchild-&gt;depth and rchild-&gt;depth are correct\r\n </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> update_root_depth(TREE tr) \r\n{\r\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> maxChildDepth; \r\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> depLChild, depRChild;\r\n    </span><span style=\"color: #0000ff;\">if</span> (tr==NULL) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\">;\r\n    </span><span style=\"color: #0000ff;\">else</span><span style=\"color: #000000;\"> {\r\n        depLChild </span>= depth(tr-&gt;<span style=\"color: #000000;\">lchild);\r\n        depRChild </span>= depth(tr-&gt;<span style=\"color: #000000;\">rchild);\r\n        maxChildDepth </span>= depLChild &gt; depRChild ?<span style=\"color: #000000;\"> depLChild : depRChild;\r\n        tr</span>-&gt;depth = maxChildDepth + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\r\n    }\r\n}\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> \r\n * insert a new value into the tree as a leaf\r\n * return address of the new node\r\n </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">static</span><span style=\"color: #000000;\"> position insert_leaf(TREE tr, ElementTP value) \r\n{\r\n    position np;\r\n    </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> prepare the node </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\n    np </span>= (position) malloc(<span style=\"color: #0000ff;\">sizeof</span>(<span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> node));\r\n    np</span>-&gt;element =<span style=\"color: #000000;\"> value;\r\n    np</span>-&gt;parent  =<span style=\"color: #000000;\"> NULL;\r\n    np</span>-&gt;lchild  =<span style=\"color: #000000;\"> NULL;\r\n    np</span>-&gt;rchild  =<span style=\"color: #000000;\"> NULL;\r\n \r\n    </span><span style=\"color: #0000ff;\">if</span> (tr !=<span style=\"color: #000000;\"> NULL) {\r\n        insert_node_to_nonempty_tree(tr, np);\r\n    }\r\n    </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> np;\r\n}\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">\r\n * insert a node to a non-empty tree\r\n * called by insert_value()\r\n </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> insert_node_to_nonempty_tree(TREE tr, position np)\r\n{\r\n    </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> insert the node </span><span style=\"color: #008000;\">*/</span>\r\n    <span style=\"color: #0000ff;\">if</span>(np-&gt;element &lt;= tr-&gt;<span style=\"color: #000000;\">element) {\r\n        </span><span style=\"color: #0000ff;\">if</span> (tr-&gt;lchild ==<span style=\"color: #000000;\"> NULL) {\r\n            </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> then tr-&gt;lchild is the proper place </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\n            tr</span>-&gt;lchild =<span style=\"color: #000000;\"> np;\r\n            np</span>-&gt;parent =<span style=\"color: #000000;\"> tr;\r\n            </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\">;\r\n        }\r\n        </span><span style=\"color: #0000ff;\">else</span><span style=\"color: #000000;\"> {\r\n            insert_node_to_nonempty_tree(tr</span>-&gt;<span style=\"color: #000000;\">lchild, np);\r\n        }\r\n    }\r\n    </span><span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span>(np-&gt;element &gt; tr-&gt;<span style=\"color: #000000;\">element) {\r\n        </span><span style=\"color: #0000ff;\">if</span> (tr-&gt;rchild ==<span style=\"color: #000000;\"> NULL) {\r\n            tr</span>-&gt;rchild =<span style=\"color: #000000;\"> np;\r\n            np</span>-&gt;parent =<span style=\"color: #000000;\"> tr;\r\n            </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\">;\r\n        }\r\n        </span><span style=\"color: #0000ff;\">else</span><span style=\"color: #000000;\"> {\r\n            insert_node_to_nonempty_tree(tr</span>-&gt;<span style=\"color: #000000;\">rchild, np);\r\n        }\r\n    }\r\n}</span></span></pre>\r\n</div>\r\n<p><span style=\"font-family: courier new,courier;\">&#xA0;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#x8F93;&#x51FA;&#x5982;&#x4E0B;&#xFF1A;</span></p>\r\n<p><span style=\"color: #800000; font-family: courier new,courier;\">root: 18</span><br><span style=\"color: #800000; font-family: courier new,courier;\">depth: 2</span><br><br><span style=\"color: #800000; font-family: courier new,courier;\">root: 5</span><br><span style=\"color: #800000; font-family: courier new,courier;\">depth: 2</span></p>\r\n<p><span style=\"color: #800000; font-family: courier new,courier;\">root: 5</span><br><span style=\"color: #800000; font-family: courier new,courier;\">depth: 3</span><br><span style=\"color: #800000; font-family: courier new,courier;\">root-&gt;lchild: 2</span><br><br><span style=\"color: #800000; font-family: courier new,courier;\">depth: 3</span><br><span style=\"color: #800000; font-family: courier new,courier;\">root-&gt;lchild: 3</span><br><span style=\"color: #800000; font-family: courier new,courier;\">root-&gt;lchild-&gt;lchild: 2</span></p>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">(&#x7A7A;&#x884C;&#x662F;&#x989D;&#x5916;&#x52A0;&#x7684;)</span></p>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#xA0;</span></p>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#x603B;&#x7ED3;:</span></p>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">AVL&#x6811;: &#x5E73;&#x8861;&#xFF0C;&#x6DF1;&#x5EA6;&#x76F8;&#x5DEE;&#x4E0D;&#x8D85;&#x8FC7;1</span></p>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#x5355;&#x65CB;&#x8F6C;&#xFF0C;&#x53CC;&#x65CB;&#x8F6C;</span></p>\r\n<p style=\"text-align: left;\">&#xA0;</p>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#x6B22;&#x8FCE;&#x7EE7;&#x7EED;&#x9605;&#x8BFB;<a href=\"http://www.cnblogs.com/vamei/archive/2013/03/22/2974052.html\">&#x201C;&#x7EB8;&#x4E0A;&#x8C08;&#x5175;: &#x7B97;&#x6CD5;&#x4E0E;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x201D;</a>&#x7CFB;&#x5217;&#x3002;</span></p>\r\n<p style=\"text-align: left;\">&#xA0;</p>"}