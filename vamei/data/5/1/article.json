{"content":"<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#x4F5C;&#x8005;&#xFF1A;Vamei &#x51FA;&#x5904;&#xFF1A;http://www.cnblogs.com/vamei &#x6B22;&#x8FCE;&#x8F6C;&#x8F7D;&#xFF0C;&#x4E5F;&#x8BF7;&#x4FDD;&#x7559;&#x8FD9;&#x6BB5;&#x58F0;&#x660E;&#x3002;&#x8C22;&#x8C22;&#xFF01;</span></p>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#xA0;</span></p>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\"><span style=\"color: #ff0000;\">&#x6392;&#x5E8F;&#x7B97;&#x6CD5;</span>(Sorting Algorithm)&#x662F;&#x8BA1;&#x7B97;&#x673A;&#x7B97;&#x6CD5;&#x7684;&#x4E00;&#x4E2A;&#x7EC4;&#x6210;&#x90E8;&#x5206;&#x3002;</span></p>\r\n<p>&#xA0;</p>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#x6392;&#x5E8F;&#x7684;&#x76EE;&#x6807;&#x662F;&#x5C06;&#x4E00;&#x7EC4;&#x6570;&#x636E; (&#x5373;&#x4E00;&#x4E2A;&#x5E8F;&#x5217;) &#x91CD;&#x65B0;&#x6392;&#x5217;&#xFF0C;&#x6392;&#x5217;&#x540E;&#x7684;&#x6570;&#x636E;&#x7B26;&#x5408;&#x4ECE;&#x5927;&#x5230;&#x5C0F; (&#x6216;&#x8005;&#x4ECE;&#x5C0F;&#x5230;&#x5927;) &#x7684;&#x6B21;&#x5E8F;&#x3002;&#x8FD9;&#x662F;&#x53E4;&#x8001;&#x4F46;&#x4F9D;&#x7136;&#x5BCC;&#x6709;&#x6311;&#x6218;&#x7684;&#x95EE;&#x9898;&#x3002;Donald Knuth&#x7684;&#x7ECF;&#x5178;&#x4E4B;&#x4F5C;&#x300A;&#x8BA1;&#x7B97;&#x673A;&#x7A0B;&#x5E8F;&#x8BBE;&#x8BA1;&#x827A;&#x672F;&#x300B;(The Art of Computer Programming)&#x7684;&#x7B2C;&#x4E09;&#x5377;&#x5C31;&#x4E13;&#x95E8;&#x7528;&#x4E8E;&#x8BA8;&#x8BBA;&#x6392;&#x5E8F;&#x548C;&#x67E5;&#x627E;&#x3002;&#x4ECE;&#x65E0;&#x5E8F;&#x5230;&#x6709;&#x5E8F;&#xFF0C;&#x6709;&#x6548;&#x7684;&#x51CF;&#x5C0F;&#x4E86;&#x7CFB;&#x7EDF;&#x7684;<span style=\"color: #ff0000;\">&#x71B5;&#x503C;</span>&#xFF0C;&#x589E;&#x52A0;&#x4E86;&#x7CFB;&#x7EDF;&#x7684;&#x6709;&#x5E8F;&#x5EA6;&#x3002;&#x5BF9;&#x4E8E;&#x4E00;&#x4E2A;&#x672A;&#x77E5;&#x7CFB;&#x7EDF;&#x6765;&#x8BF4;&#xFF0C;&#x6709;&#x5E8F;&#x662F;&#x975E;&#x5E38;&#x6709;&#x7528;&#x7684;&#x5148;&#x9A8C;&#x77E5;&#x8BC6;&#x3002;&#x56E0;&#x6B64;&#xFF0C;&#x6392;&#x5E8F;&#x7B97;&#x6CD5;&#x5F88;&#x591A;&#x65F6;&#x5019;&#x6784;&#x6210;&#x4E86;&#x5176;&#x4ED6;&#x5FEB;&#x901F;&#x7B97;&#x6CD5;&#x7684;&#x57FA;&#x7840;&#xFF0C;&#x6BD4;&#x5982;&#x4E8C;&#x5206;&#x6CD5;&#x5C31;&#x662F;&#x57FA;&#x4E8E;&#x6709;&#x5E8F;&#x5E8F;&#x5217;&#x7684;&#x67E5;&#x627E;&#x7B97;&#x6CD5;&#x3002;&#x76F4;&#x5230;&#x4ECA;&#x5929;&#xFF0C;&#x6392;&#x5E8F;&#x7B97;&#x6CD5;&#x4F9D;&#x7136;&#x662F;&#x8BA1;&#x7B97;&#x673A;&#x79D1;&#x5B66;&#x79EF;&#x6781;&#x63A2;&#x7D22;&#x7684;&#x4E00;&#x4E2A;&#x65B9;&#x5411;&#x3002;</span></p>\r\n<p>&#xA0;</p>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#x6211;&#x5728;&#x8FD9;&#x91CC;&#x5217;&#x51FA;&#x4E00;&#x4E9B;&#x6700;&#x5E38;&#x89C1;&#x7684;&#x6392;&#x5E8F;&#x65B9;&#x6CD5;&#xFF0C;&#x5E76;&#x5C1D;&#x8BD5;&#x4F7F;&#x7528;C&#x8BED;&#x8A00;&#x5B9E;&#x73B0;&#x5B83;&#x4EEC;&#x3002;&#x4E00;&#x7EC4;&#x6570;&#x636E;&#x5B58;&#x50A8;&#x4E3A;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;a&#xFF0C;&#x6570;&#x7EC4;&#x6709;n&#x4E2A;&#x5143;&#x7D20;&#x3002;a[i]&#x4E3A;&#x6570;&#x7EC4;&#x4E2D;&#x7684;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;i&#x4E3A;&#x5143;&#x7D20;&#x5728;&#x6570;&#x7EC4;&#x4E2D;&#x7684;&#x4F4D;&#x7F6E; (index)&#x3002;&#x6839;&#x636E;C&#x7684;&#x89C4;&#x5B9A;&#xFF0C;&#x6570;&#x7EC4;&#x4E0B;&#x6807;&#x4ECE;0&#x5F00;&#x59CB;&#x3002;&#x5047;&#x8BBE;&#x6570;&#x7EC4;&#x4ECE;&#x5DE6;&#x5411;&#x53F3;&#x6392;&#x5217;&#xFF0C;&#x4E0B;&#x6807;&#x4E3A;0&#x7684;&#x5143;&#x7D20;&#x4F4D;&#x4E8E;&#x6570;&#x7EC4;&#x7684;&#x6700;&#x5DE6;&#x8FB9;&#x3002;</span></p>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#x5E8F;&#x5217;&#x5C06;&#x6700;&#x7EC8;&#x6392;&#x5217;&#x6210;<span style=\"color: #ff0000;\">&#x4ECE;&#x5C0F;&#x5230;&#x5927;</span>&#x7684;&#x987A;&#x5E8F;&#x3002;&#x4E0B;&#x9762;&#x51FD;&#x6570;&#x4E2D;&#x7684;&#x53C2;&#x6570;ac&#x662F;&#x6570;&#x7EC4;&#x4E2D;&#x5143;&#x7D20;&#x7684;&#x6570;&#x76EE;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;n&#x3002;<br></span></p>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">(C&#x8BED;&#x8A00;&#x7684;&#x6570;&#x7EC4;&#x540D;&#x90FD;&#x8F6C;&#x6210;&#x6307;&#x9488;&#xFF0C;&#x4F20;&#x9012;&#x7ED9;&#x51FD;&#x6570;&#xFF0C;&#x6240;&#x4EE5;&#x9700;&#x8981;&#x4F20;&#x9012;&#x6570;&#x7EC4;&#x4E2D;&#x5143;&#x7D20;&#x7684;&#x6570;&#x76EE;ac&#x7ED9;&#x51FD;&#x6570;&#xFF0C;&#x8BE6;&#x7EC6;&#x89C1;&quot;Expert C Programming: Deep C Secrets&quot;&#x4E00;&#x4E66;)</span></p>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#xA0;</span></p>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://images.cnitblog.com/blog/413416/201303/12001941-23fd150623854e4d9a173c1c92e6eba5.png\" alt=\"\" data-pinit=\"registered\"></span></p>\r\n<p style=\"text-align: center;\"><span style=\"font-family: &apos;courier new&apos;, courier;\">&#x8D77;&#x59CB;&#x6570;&#x5217; &#xFF08;unsorted&#xFF09;</span></p>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://images.cnitblog.com/blog/413416/201303/12001830-e7459c97b6604a0992101b58bbbb3e3c.png\" alt=\"\" data-pinit=\"registered\"></span></p>\r\n<p style=\"text-align: center;\"><span style=\"font-family: &apos;courier new&apos;, courier;\">&#x6709;&#x5E8F;&#x6570;&#x5217; (sorted)</span></p>\r\n<p style=\"text-align: center;\"><span style=\"font-family: &apos;courier new&apos;, courier;\">&#xA0;</span></p>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#x4E0B;&#x9762;&#x7684;&#x94FE;&#x63A5;&#x4E2D;&#xFF0C;&#x6709;&#x76F8;&#x5173;&#x7B97;&#x6CD5;&#x7684;&#x52A8;&#x753B;&#x56FE;&#x4F8B;&#xFF0C;&#x5F3A;&#x70C8;&#x63A8;&#x8350;&#x540C;&#x65F6;&#x9605;&#x8BFB;&#x3002;</span></p>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\"><a href=\"http://www.sorting-algorithms.com/\">http://www.sorting-algorithms.com/</a></span></p>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#xA0;</span></p>\r\n<h3><span style=\"font-family: &apos;courier new&apos;, courier;\">&#x5192;&#x6CE1;&#x6392;&#x5E8F; (Bubble Sort)</span></h3>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#x5BF9;&#x4E8E;&#x4E00;&#x4E2A;&#x5DF2;&#x7ECF;&#x6392;&#x5E8F;&#x597D;&#x7684;&#x5E8F;&#x5217;&#xFF0C;&#x5B83;&#x7684;&#x4EFB;&#x610F;&#x4E24;&#x4E2A;&#x76F8;&#x90BB;&#x5143;&#x7D20;&#xFF0C;&#x90FD;&#x5E94;&#x8BE5;&#x6EE1;&#x8DB3;<span style=\"color: #ff0000;\">a[i-1] &lt;= a[i]</span>&#x7684;&#x5173;&#x7CFB;&#x3002;&#x5192;&#x6CE1;&#x6392;&#x5E8F;&#x76F8;&#x5F53;&#x66B4;&#x529B;&#x7684;&#x5B9E;&#x73B0;&#x4E86;&#x8FD9;&#x4E00;&#x76EE;&#x6807;&#xFF1A;&#x4E0D;&#x65AD;&#x626B;&#x63CF;&#x76F8;&#x90BB;&#x5143;&#x7D20;&#xFF0C;&#x770B;&#x5B83;&#x4EEC;&#x662F;&#x5426;&#x8FDD;&#x7AE0;&#x3002;&#x4E00;&#x65E6;&#x8FDD;&#x7AE0;&#xFF0C;&#x7ACB;&#x5373;&#x7EA0;&#x6B63;&#x3002;&#x5728;&#x5192;&#x6CE1;&#x6392;&#x5E8F;&#x65F6;&#xFF0C;&#x8BA1;&#x7B97;&#x673A;<span style=\"color: #ff0000;\">&#x4ECE;&#x53F3;&#x5411;&#x5DE6;</span>&#x904D;&#x5386;&#x6570;&#x7EC4;&#xFF0C;&#x6BD4;&#x8F83;&#x76F8;&#x90BB;&#x7684;&#x4E24;&#x4E2A;&#x5143;&#x7D20;&#x3002;&#x5982;&#x679C;&#x4E24;&#x4E2A;&#x5143;&#x7D20;&#x7684;&#x987A;&#x5E8F;&#x662F;&#x9519;&#x7684;&#xFF0C;&#x90A3;&#x4E48;sorry&#xFF0C;&#x8BF7;&#x4E24;&#x4F4D;&#x4E92;&#x6362;&#x3002;&#x5982;&#x679C;&#x4E24;&#x4E2A;&#x5143;&#x7D20;&#x7684;&#x987A;&#x5E8F;&#x662F;&#x6B63;&#x786E;&#x7684;&#xFF0C;&#x5219;&#x4E0D;&#x505A;&#x4EA4;&#x6362;&#x3002;&#x7ECF;&#x8FC7;&#x4E00;&#x6B21;&#x904D;&#x5386;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4FDD;&#x8BC1;&#x6700;&#x5C0F;&#x7684;&#x5143;&#x7D20;(&#x6CE1;&#x6CE1;)&#x5904;&#x4E8E;&#x6700;&#x5DE6;&#x8FB9;&#x7684;&#x4F4D;&#x7F6E;&#x3002;</span></p>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#x7136;&#x800C;&#xFF0C;&#x7ECF;&#x8FC7;&#x8FD9;&#x4E48;&#x4E00;&#x8D9F;&#xFF0C;&#x5192;&#x6CE1;&#x6392;&#x5E8F;&#x4E0D;&#x80FD;&#x4FDD;&#x8BC1;&#x6240;&#x6709;&#x7684;&#x5143;&#x7D20;&#x5DF2;&#x7ECF;&#x6309;&#x7167;&#x6B21;&#x5E8F;&#x6392;&#x5217;&#x597D;&#x3002;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x518D;&#x6B21;&#x4ECE;&#x53F3;&#x5411;&#x5DE6;&#x904D;&#x5386;&#x6570;&#x7EC4;&#x5143;&#x7D20;&#xFF0C;&#x8FDB;&#x884C;&#x5192;&#x6CE1;&#x6392;&#x5E8F;&#x3002;&#x8FD9;&#x4E00;&#x6B21;&#x904D;&#x5386;&#xFF0C;&#x6211;&#x4EEC;&#x4E0D;&#x7528;&#x8003;&#x8651;&#x6700;&#x5DE6;&#x7AEF;&#x7684;&#x5143;&#x7D20;&#xFF0C;&#x56E0;&#x4E3A;&#x8BE5;&#x5143;&#x7D20;&#x5DF2;&#x7ECF;&#x662F;&#x6700;&#x5C0F;&#x7684;&#x3002;&#x904D;&#x5386;&#x7ED3;&#x675F;&#x540E;&#xFF0C;&#x7EE7;&#x7EED;&#x91CD;&#x590D;&#x626B;&#x63CF;&#x2026;&#x2026; &#x603B;&#x5171;&#x53EF;&#x80FD;&#x8FDB;&#x884C;n-1&#x6B21;&#x7684;&#x904D;&#x5386;&#x3002;</span></p>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#x5982;&#x679C;&#x67D0;&#x6B21;&#x904D;&#x5386;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x6CA1;&#x6709;&#x53D1;&#x751F;&#x4EA4;&#x6362;&#xFF0C;bingo&#xFF0C;&#x8FD9;&#x4E2A;&#x6570;&#x7EC4;&#x5DF2;&#x7ECF;&#x6392;&#x5E8F;&#x597D;&#xFF0C;&#x53EF;&#x4EE5;&#x4E2D;&#x6B62;&#x6392;&#x5E8F;&#x3002;&#x5982;&#x679C;&#x8D77;&#x59CB;&#x65F6;&#xFF0C;&#x6700;&#x5927;&#x7684;&#x5143;&#x7D20;&#x4F4D;&#x4E8E;&#x6700;&#x5DE6;&#x8FB9;&#xFF0C;&#x90A3;&#x4E48;&#x5192;&#x6CE1;&#x7B97;&#x6CD5;&#x5FC5;&#x987B;&#x7ECF;&#x8FC7;n-1&#x6B21;&#x904D;&#x5386;&#x624D;&#x80FD;&#x5C06;&#x6570;&#x7EC4;&#x6392;&#x5217;&#x597D;&#xFF0C;&#x800C;&#x4E0D;&#x80FD;&#x63D0;&#x524D;&#x5B8C;&#x6210;&#x6392;&#x5E8F;&#x3002;<br></span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"font-family: &apos;courier new&apos;, courier;\"><span style=\"color: #008000;\"><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">By Vamei</span><span style=\"color: #008000;\">*/</span><br>/*</span><span style=\"color: #008000;\">swap the neighbors if out of order</span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">void</span> bubble_sort(<span style=\"color: #0000ff;\">int</span> a[], <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> ac)\r\n{\r\n    </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">use swap</span><span style=\"color: #008000;\">*/</span>\r\n    <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i,j;\r\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> sign;\r\n    </span><span style=\"color: #0000ff;\">for</span> (j = <span style=\"color: #800080;\">0</span>; j &lt; ac-1; j++<span style=\"color: #000000;\">) {\r\n        sign </span>= <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\r\n        </span><span style=\"color: #0000ff;\">for</span>(i = ac-<span style=\"color: #800080;\">1</span>; i &gt; j; i--<span style=\"color: #000000;\">)\r\n        {\r\n            </span><span style=\"color: #0000ff;\">if</span>(a[i-<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">] &gt; a[i]) {\r\n                sign </span>= <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\r\n                swap(a</span>+i, a+i-<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);\r\n            }\r\n        }\r\n        </span><span style=\"color: #0000ff;\">if</span> (sign == <span style=\"color: #800080;\">0</span>) <span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;\r\n    }\r\n}</span></span></pre>\r\n</div>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#xA0; <br></span></p>\r\n<h3><span style=\"font-family: &apos;courier new&apos;, courier;\">&#x63D2;&#x5165;&#x6392;&#x5E8F; (Insertion Sort)</span></h3>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#x5047;&#x8BBE;&#x5728;&#x65B0;&#x751F;&#x62A5;&#x5230;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6211;&#x4EEC;&#x5C06;&#x65B0;&#x751F;&#x6309;&#x7167;&#x8EAB;&#x9AD8;&#x6392;&#x597D;&#x961F;(&#x4E5F;&#x5C31;&#x662F;&#x6392;&#x5E8F;)&#x3002;&#x5982;&#x679C;&#x8FD9;&#x65F6;&#x6709;&#x4E00;&#x540D;&#x5B66;&#x751F;&#x52A0;&#x5165;&#xFF0C;&#x6211;&#x4EEC;&#x5C06;&#x8BE5;&#x540D;&#x5B66;&#x751F;&#x52A0;&#x5165;&#x5230;&#x961F;&#x5C3E;&#x3002;&#x5982;&#x679C;&#x8FD9;&#x540D;&#x5B66;&#x751F;&#x6BD4;&#x524D;&#x9762;&#x7684;&#x5B66;&#x751F;&#x4F4E;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x8BA9;&#x8BE5;&#x5B66;&#x751F;&#x548C;&#x524D;&#x9762;&#x7684;&#x5B66;&#x751F;&#x4EA4;&#x6362;&#x4F4D;&#x7F6E;&#x3002;&#x8FD9;&#x540D;&#x5B66;&#x751F;&#x6700;&#x7EC8;&#x4F1A;&#x6362;&#x5230;&#x5E94;&#x5728;&#x7684;&#x4F4D;&#x7F6E;&#x3002;&#x8FD9;&#x5C31;&#x662F;<span style=\"color: #ff0000;\">&#x63D2;&#x5165;&#x6392;&#x5E8F;</span>&#x7684;&#x57FA;&#x672C;&#x539F;&#x7406;&#x3002;</span></p>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#x5BF9;&#x4E8E;&#x8D77;&#x59CB;&#x6570;&#x7EC4;&#x6765;&#x8BF4;&#xFF0C;&#x6211;&#x4EEC;&#x8BA4;&#x4E3A;&#x6700;&#x521D;&#xFF0C;&#x6709;&#x4E00;&#x540D;&#x5B66;&#x751F;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x6700;&#x5DE6;&#x8FB9;&#x7684;&#x5143;&#x7D20;(i=0)&#xFF0C;&#x6784;&#x6210;&#x4E00;&#x4E2A;&#x6709;&#x5E8F;&#x7684;&#x961F;&#x4F0D;&#x3002;</span></p>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#x968F;&#x540E;&#x6709;&#x7B2C;&#x4E8C;&#x4E2A;&#x5B66;&#x751F;(i=1)&#x52A0;&#x5165;&#x961F;&#x4F0D;&#xFF0C;&#x7B2C;&#x4E8C;&#x540D;&#x5B66;&#x751F;&#x4EA4;&#x6362;&#x5230;&#x5E94;&#x5728;&#x7684;&#x4F4D;&#x7F6E;&#xFF1B;&#x968F;&#x540E;&#x7B2C;&#x4E09;&#x4E2A;&#x5B66;&#x751F;&#x52A0;&#x5165;&#x961F;&#x4F0D;&#xFF0C;&#x7B2C;&#x4E09;&#x540D;&#x5B66;&#x751F;&#x4EA4;&#x6362;&#x5230;&#x5E94;&#x5728;&#x7684;&#x4F4D;&#x7F6E;&#x2026;&#x2026; &#x5F53;n&#x4E2A;&#x5B66;&#x751F;&#x90FD;&#x52A0;&#x5165;&#x961F;&#x4F0D;&#x65F6;&#xFF0C;&#x6211;&#x4EEC;&#x7684;&#x6392;&#x5E8F;&#x5C31;&#x5B8C;&#x6210;&#x4E86;&#x3002;</span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"font-family: &apos;courier new&apos;, courier;\"><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">By Vamei</span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">insert the next element \r\n  into the sorted part</span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">void</span> insert_sort(<span style=\"color: #0000ff;\">int</span> a[], <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> ac)\r\n{\r\n    </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">use swap</span><span style=\"color: #008000;\">*/</span>\r\n    <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i,j;    \r\n    </span><span style=\"color: #0000ff;\">for</span> (j=<span style=\"color: #800080;\">1</span>; j &lt; ac; j++<span style=\"color: #000000;\">) \r\n    {\r\n        i </span>= j-<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\r\n        </span><span style=\"color: #0000ff;\">while</span>((i&gt;=<span style=\"color: #800080;\">0</span>) &amp;&amp; (a[i+<span style=\"color: #800080;\">1</span>] &lt;<span style=\"color: #000000;\"> a[i])) \r\n        {\r\n            swap(a</span>+i+<span style=\"color: #800080;\">1</span>, a+<span style=\"color: #000000;\">i);\r\n            i</span>--<span style=\"color: #000000;\">;\r\n        }\r\n    }\r\n}</span></span></pre>\r\n</div>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#xA0;</span></p>\r\n<h3><span style=\"font-family: &apos;courier new&apos;, courier;\">&#x9009;&#x62E9;&#x6392;&#x5E8F; (Selection Sort)</span></h3>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#x6392;&#x5E8F;&#x7684;&#x6700;&#x7EC8;&#x7ED3;&#x679C;&#xFF1A;&#x4EFB;&#x4F55;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x90FD;&#x4E0D;&#x5927;&#x4E8E;&#x4F4D;&#x4E8E;&#x5B83;&#x53F3;&#x8FB9;&#x7684;&#x5143;&#x7D20; (a[i] &lt;= a[j], if i &lt;= j)&#x3002;&#x6240;&#x4EE5;&#xFF0C;&#x5728;&#x6709;&#x5E8F;&#x5E8F;&#x5217;&#x4E2D;&#xFF0C;&#x6700;&#x5C0F;&#x7684;&#x5143;&#x7D20;&#x6392;&#x5728;&#x6700;&#x5DE6;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x7B2C;&#x4E8C;&#x5C0F;&#x7684;&#x5143;&#x7D20;&#x6392;&#x5728;i=1&#x7684;&#x4F4D;&#x7F6E;&#x2026;&#x2026; &#x6700;&#x5927;&#x7684;&#x5143;&#x7D20;&#x6392;&#x5728;&#x6700;&#x540E;&#x3002;</span></p>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\"><span style=\"color: #ff0000;\">&#x9009;&#x62E9;&#x6392;&#x5E8F;</span>&#x662F;&#x5148;&#x627E;&#x5230;&#x8D77;&#x59CB;&#x6570;&#x7EC4;&#x4E2D;&#x6700;&#x5C0F;&#x7684;&#x5143;&#x7D20;&#xFF0C;&#x5C06;&#x5B83;&#x4EA4;&#x6362;&#x5230;i=0&#xFF1B;&#x7136;&#x540E;&#x5BFB;&#x627E;&#x5269;&#x4E0B;&#x5143;&#x7D20;&#x4E2D;&#x6700;&#x5C0F;&#x7684;&#x5143;&#x7D20;&#xFF0C;&#x5C06;&#x5B83;&#x4EA4;&#x6362;&#x5230;i=1&#x7684;&#x4F4D;&#x7F6E;&#x2026;&#x2026; &#x76F4;&#x5230;&#x627E;&#x5230;&#x7B2C;&#x4E8C;&#x5927;&#x7684;&#x5143;&#x7D20;&#xFF0C;&#x5C06;&#x5B83;&#x4EA4;&#x6362;&#x5230;n-2&#x7684;&#x4F4D;&#x7F6E;&#x3002;&#x8FD9;&#x65F6;&#xFF0C;&#x6574;&#x4E2A;&#x6570;&#x7EC4;&#x7684;&#x6392;&#x5E8F;&#x5B8C;&#x6210;&#x3002;</span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"font-family: &apos;courier new&apos;, courier;\"><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">By Vamei</span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">find the smallest of the rest,\r\n  then append to the sorted part</span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">void</span> select_sort(<span style=\"color: #0000ff;\">int</span> a[], <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> ac) \r\n{\r\n    </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">use swap</span><span style=\"color: #008000;\">*/</span>\r\n    <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i,j;\r\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> min_idx;\r\n    </span><span style=\"color: #0000ff;\">for</span> (j = <span style=\"color: #800080;\">0</span>; j &lt; ac-<span style=\"color: #800080;\">1</span>; j++<span style=\"color: #000000;\">) \r\n    {\r\n        min_idx </span>=<span style=\"color: #000000;\"> j;\r\n        </span><span style=\"color: #0000ff;\">for</span> (i = j+<span style=\"color: #800080;\">1</span>; i &lt; ac; i++<span style=\"color: #000000;\">) \r\n        {\r\n            </span><span style=\"color: #0000ff;\">if</span> (a[i] &lt;<span style=\"color: #000000;\"> a[min_idx]) \r\n            {\r\n                min_idx </span>=<span style=\"color: #000000;\"> i;\r\n            }\r\n        }\r\n        swap(a</span>+j, a+<span style=\"color: #000000;\">min_idx);\r\n    }    \r\n}</span></span></pre>\r\n</div>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#xA0;</span></p>\r\n<h3><span style=\"font-family: &apos;courier new&apos;, courier;\">&#x5E0C;&#x5C14;&#x6392;&#x5E8F; &#xFF08;Shell Sort&#xFF09;</span></h3>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#x6211;&#x4EEC;&#x5728;&#x5192;&#x6CE1;&#x6392;&#x5E8F;&#x4E2D;&#x63D0;&#x5230;&#xFF0C;&#x6700;&#x574F;&#x7684;&#x60C5;&#x51B5;&#x53D1;&#x751F;&#x5728;&#x5927;&#x7684;&#x5143;&#x7D20;&#x4F4D;&#x4E8E;&#x6570;&#x7EC4;&#x7684;&#x8D77;&#x59CB;&#x3002;&#x8FD9;&#x4E9B;&#x4F4D;&#x4E8E;&#x6570;&#x7EC4;&#x8D77;&#x59CB;&#x7684;&#x5927;&#x5143;&#x7D20;&#x9700;&#x8981;&#x591A;&#x6B21;&#x904D;&#x5386;&#xFF0C;&#x624D;&#x80FD;&#x4EA4;&#x6362;&#x5230;&#x961F;&#x5C3E;&#x3002;&#x8FD9;&#x6837;&#x7684;&#x5143;&#x7D20;&#x88AB;&#x79F0;&#x4E3A;&#x4E4C;&#x9F9F;(turtle)&#x3002;</span></p>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#x4E4C;&#x9F9F;&#x5143;&#x7D20;&#x7684;&#x539F;&#x56E0;&#x5728;&#x4E8E;&#xFF0C;&#x5192;&#x6CE1;&#x6392;&#x5E8F;&#x603B;&#x662F;<span style=\"color: #ff0000;\">&#x76F8;&#x90BB;</span>&#x7684;&#x4E24;&#x4E2A;&#x5143;&#x7D20;&#x6BD4;&#x8F83;&#x5E76;&#x4EA4;&#x6362;&#x3002;&#x6240;&#x4EE5;&#x6BCF;&#x6B21;&#x4ECE;&#x53F3;&#x5411;&#x5DE6;&#x904D;&#x5386;&#xFF0C;&#x5927;&#x5143;&#x7D20;&#x53EA;&#x80FD;&#x5411;&#x53F3;&#x79FB;&#x52A8;&#x4E00;&#x4F4D;&#x3002;(&#x5C0F;&#x7684;&#x5143;&#x7D20;&#x4F4D;&#x4E8E;&#x961F;&#x5C3E;&#xFF0C;&#x88AB;&#x79F0;&#x4E3A;&#x5154;&#x5B50;(rabbit)&#x5143;&#x7D20;&#xFF0C;&#x5B83;&#x4EEC;&#x53EF;&#x4EE5;&#x5F88;&#x5FEB;&#x7684;&#x4EA4;&#x6362;&#x5230;&#x961F;&#x9996;&#x3002;)</span></p>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\"><span style=\"color: #ff0000;\">&#x5E0C;&#x5C14;&#x6392;&#x5E8F;</span>&#x662F;&#x4EE5;<span style=\"color: #ff0000;\">&#x66F4;&#x5927;&#x7684;&#x95F4;&#x9694;</span>&#x6765;&#x6BD4;&#x8F83;&#x548C;&#x4EA4;&#x6362;&#x5143;&#x7D20;&#xFF0C;&#x8FD9;&#x6837;&#xFF0C;&#x5927;&#x7684;&#x5143;&#x7D20;&#x5728;&#x4EA4;&#x6362;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x53EF;&#x4EE5;&#x5411;&#x53F3;&#x79FB;&#x52A8;&#x4E0D;&#x6B62;&#x4E00;&#x4E2A;&#x4F4D;&#x7F6E;&#xFF0C;&#x4ECE;&#x800C;&#x66F4;&#x5FEB;&#x7684;&#x79FB;&#x52A8;&#x4E4C;&#x9F9F;&#x5143;&#x7D20;&#x3002;&#x6BD4;&#x5982;&#xFF0C;&#x53EF;&#x4EE5;&#x5C06;&#x6570;&#x7EC4;&#x5206;&#x4E3A;4&#x4E2A;&#x5B50;&#x6570;&#x7EC4;&#xFF08;i=4k, i=4k+1, i=4k+2, i=4k+3&#xFF09;&#xFF0C;&#x5BF9;&#x6BCF;&#x4E2A;&#x5B50;&#x6570;&#x7EC4;&#x8FDB;&#x884C;&#x5192;&#x6CE1;&#x6392;&#x5E8F;&#x3002;&#x6BD4;&#x5982;&#x5B50;&#x6570;&#x7EC4;i=0&#xFF0C;4&#xFF0C;8&#xFF0C;12...&#x3002;&#x6B64;&#x65F6;&#xFF0C;&#x6BCF;&#x6B21;&#x4EA4;&#x6362;&#x7684;&#x95F4;&#x9694;&#x4E3A;4&#x3002;</span></p>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#x5B8C;&#x6210;&#x5BF9;&#x56DB;&#x4E2A;&#x5B50;&#x6570;&#x7EC4;&#x7684;&#x6392;&#x5E8F;&#x540E;&#xFF0C;&#x6570;&#x7EC4;&#x7684;&#x987A;&#x5E8F;&#x5E76;&#x4E0D;&#x4E00;&#x5B9A;&#x80FD;&#x6392;&#x5217;&#x597D;&#x3002;&#x5E0C;&#x5C14;&#x6392;&#x5E8F;&#x4F1A;&#x4E0D;&#x65AD;&#x51CF;&#x5C0F;&#x95F4;&#x9694;&#xFF0C;&#x91CD;&#x65B0;&#x5F62;&#x6210;&#x5B50;&#x6570;&#x7EC4;&#xFF0C;&#x5E76;&#x5BF9;&#x5B50;&#x6570;&#x7EC4;&#x5192;&#x6CE1;&#x6392;&#x5E8F;&#x2026;&#x2026; &#x5F53;&#x95F4;&#x9694;&#x51CF;&#x5C0F;&#x4E3A;1&#x65F6;&#xFF0C;&#x5C31;&#x76F8;&#x5F53;&#x4E8E;&#x5BF9;&#x6574;&#x4E2A;&#x6570;&#x7EC4;&#x8FDB;&#x884C;&#x4E86;&#x4E00;&#x6B21;&#x5192;&#x6CE1;&#x6392;&#x5E8F;&#x3002;&#x968F;&#x540E;&#xFF0C;&#x6570;&#x7EC4;&#x7684;&#x987A;&#x5E8F;&#x5C31;&#x6392;&#x5217;&#x597D;&#x4E86;&#x3002;</span></p>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#x5E0C;&#x5C14;&#x6392;&#x5E8F;&#x4E0D;&#x6B62;&#x53EF;&#x4EE5;&#x914D;&#x5408;&#x5192;&#x6CE1;&#x6392;&#x5E8F;&#xFF0C;&#x8FD8;&#x53EF;&#x4EE5;&#x914D;&#x5408;&#x5176;&#x4ED6;&#x7684;&#x6392;&#x5E8F;&#x65B9;&#x6CD5;&#x5B8C;&#x6210;&#x3002;</span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"font-family: &apos;courier new&apos;, courier;\"><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">By Vamei</span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #008000;\">/*q</span><span style=\"color: #008000;\">uickly sort the turtles at the tail of the array</span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">void</span> shell_sort(<span style=\"color: #0000ff;\">int</span> a[], <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> ac)\r\n{\r\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> step;\r\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i,j;\r\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> nsub;\r\n    </span><span style=\"color: #0000ff;\">int</span> *<span style=\"color: #000000;\">sub;\r\n\r\n    </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> initialize step </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\n    step </span>= <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\r\n    </span><span style=\"color: #0000ff;\">while</span>(step &lt; ac) step = <span style=\"color: #800080;\">3</span>*step + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\r\n\r\n    </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> when step becomes 1, it&apos;s equivalent to the bubble sort</span><span style=\"color: #008000;\">*/</span>\r\n    <span style=\"color: #0000ff;\">while</span>(step &gt; <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">) {\r\n       </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> step will go down to 1 at most </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\n       step </span>= step/<span style=\"color: #800080;\">3</span> + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\r\n       </span><span style=\"color: #0000ff;\">for</span>(i=<span style=\"color: #800080;\">0</span>; i&lt;step; i++<span style=\"color: #000000;\">) {\r\n           </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> pick an element every step, \r\n              and combine into a sub-array </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\n           nsub </span>= (ac - i - <span style=\"color: #800080;\">1</span>)/step + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;            \r\n           sub </span>= (<span style=\"color: #0000ff;\">int</span> *) malloc(<span style=\"color: #0000ff;\">sizeof</span>(<span style=\"color: #0000ff;\">int</span>)*<span style=\"color: #000000;\">nsub);\r\n           </span><span style=\"color: #0000ff;\">for</span>(j=<span style=\"color: #800080;\">0</span>; j&lt;nsub; j++<span style=\"color: #000000;\">) {\r\n               sub[j] </span>= a[i+j*<span style=\"color: #000000;\">step]; \r\n           }\r\n           </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> sort the sub-array by bubble sorting. \r\n              It could be other sorting methods </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\n           bubble_sort(sub, nsub);\r\n           </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> put back the sub-array</span><span style=\"color: #008000;\">*/</span>\r\n           <span style=\"color: #0000ff;\">for</span>(j=<span style=\"color: #800080;\">0</span>; j&lt;nsub; j++<span style=\"color: #000000;\">) {\r\n               a[i</span>+j*step] =<span style=\"color: #000000;\"> sub[j];\r\n           }\r\n           </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> free sub-array </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\n           free(sub);\r\n       }    \r\n    }\r\n}</span></span></pre>\r\n</div>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">Shell Sorting&#x4F9D;&#x8D56;&#x4E8E;&#x95F4;&#x9694;(step)&#x7684;&#x9009;&#x53D6;&#x3002;&#x4E00;&#x4E2A;&#x5E38;&#x89C1;&#x7684;&#x9009;&#x62E9;&#x662F;&#x5C06;&#x672C;&#x6B21;&#x95F4;&#x9694;&#x8BBE;&#x7F6E;&#x4E3A;&#x4E0A;&#x6B21;&#x95F4;&#x9694;&#x7684;1/1.3&#x3002;&#x89C1;&#x53C2;&#x8003;&#x4E66;&#x7C4D;&#x3002;</span></p>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#xA0;</span></p>\r\n<h3><span style=\"font-family: &apos;courier new&apos;, courier;\">&#x5F52;&#x5E76;&#x6392;&#x5E8F; (Merge Sort)</span></h3>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#x5982;&#x679C;&#x6211;&#x4EEC;&#x8981;&#x5C06;&#x4E00;&#x526F;&#x6251;&#x514B;&#x6309;&#x7167;&#x6570;&#x5B57;&#x5927;&#x5C0F;&#x6392;&#x5E8F;&#x3002;&#x6B64;&#x524D;&#x5DF2;&#x7ECF;&#x6709;&#x4E24;&#x4E2A;&#x4EBA;&#x5206;&#x522B;&#x5C06;&#x5176;&#x4E2D;&#x7684;&#x4E00;&#x534A;&#x6392;&#x597D;&#x987A;&#x5E8F;&#x3002;&#x90A3;&#x4E48;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5C06;&#x8FD9;&#x4E24;&#x5806;&#x6251;&#x514B;&#x5411;&#x4E0A;&#x653E;&#x597D;&#xFF0C;&#x5047;&#x8BBE;&#x5C0F;&#x7684;&#x724C;&#x5728;&#x4E0A;&#x9762;&#x3002;&#x6B64;&#x65F6;&#xFF0C;&#x6211;&#x4EEC;&#x5C06;&#x770B;&#x5230;&#x724C;&#x5806;&#x4E2D;&#x6700;&#x4E0A;&#x7684;&#x4E24;&#x5F20;&#x724C;&#x3002;</span></p>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#x6211;&#x4EEC;&#x53D6;&#x4E24;&#x5F20;&#x724C;&#x4E2D;&#x5C0F;&#x7684;&#x90A3;&#x5F20;&#x53D6;&#x51FA;&#x653E;&#x5728;&#x624B;&#x4E2D;&#x3002;&#x4E24;&#x4E2A;&#x724C;&#x5806;&#x4E2D;&#x53C8;&#x662F;&#x4E24;&#x5F20;&#x724C;&#x66B4;&#x9732;&#x5728;&#x6700;&#x4E0A;&#x9762;&#xFF0C;&#x7EE7;&#x7EED;&#x53D6;&#x5C0F;&#x7684;&#x90A3;&#x5F20;&#x653E;&#x5728;&#x624B;&#x4E2D;&#x2026;&#x2026; &#x76F4;&#x5230;&#x6240;&#x6709;&#x7684;&#x724C;&#x90FD;&#x653E;&#x5165;&#x624B;&#x4E2D;&#xFF0C;&#x90A3;&#x4E48;&#x6574;&#x526F;&#x724C;&#x5C31;&#x6392;&#x597D;&#x987A;&#x5E8F;&#x4E86;&#x3002;&#x8FD9;&#x5C31;&#x662F;<span style=\"color: #ff0000;\">&#x5F52;&#x5E76;&#x6392;&#x5E8F;</span>&#x3002;</span></p>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#xA0;</span></p>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#x4E0B;&#x9762;&#x7684;&#x5B9E;&#x73B0;&#x4E2D;&#xFF0C;&#x4F7F;&#x7528;&#x9012;&#x5F52;&#xFF1A;</span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"font-family: &apos;courier new&apos;, courier;\"><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">By Vamei</span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">recursively merge two sorted arrays</span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">void</span> merge_sort(<span style=\"color: #0000ff;\">int</span> *a, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> ac)\r\n{\r\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i, j, k;    \r\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> ac1, ac2;\r\n    </span><span style=\"color: #0000ff;\">int</span> *ah1, *<span style=\"color: #000000;\">ah2;\r\n    </span><span style=\"color: #0000ff;\">int</span> *<span style=\"color: #000000;\">container;\r\n\r\n    </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">base case</span><span style=\"color: #008000;\">*/</span>    \r\n    <span style=\"color: #0000ff;\">if</span> (ac &lt;= <span style=\"color: #800080;\">1</span>) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\">;\r\n\r\n    </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">split the array into two</span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\n    ac1 </span>= ac/<span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">;\r\n    ac2 </span>= ac -<span style=\"color: #000000;\"> ac1;\r\n    ah1 </span>= a + <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\r\n    ah2 </span>= a +<span style=\"color: #000000;\"> ac1;\r\n\r\n    </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">recursion</span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\n    merge_sort(ah1, ac1);\r\n    merge_sort(ah2, ac2);\r\n \r\n    </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">merge</span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\n    i </span>= <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\r\n    j </span>= <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\r\n    k </span>= <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\r\n    container </span>= (<span style=\"color: #0000ff;\">int</span> *) malloc(<span style=\"color: #0000ff;\">sizeof</span>(<span style=\"color: #0000ff;\">int</span>)*<span style=\"color: #000000;\">ac);\r\n    </span><span style=\"color: #0000ff;\">while</span>(i&lt;ac1 &amp;&amp; j&lt;<span style=\"color: #000000;\">ac2) {\r\n        </span><span style=\"color: #0000ff;\">if</span> (ah1[i] &lt;=<span style=\"color: #000000;\"> ah2[j]) {\r\n            container[k</span>++] = ah1[i++<span style=\"color: #000000;\">];\r\n        } \r\n        </span><span style=\"color: #0000ff;\">else</span><span style=\"color: #000000;\"> {\r\n            container[k</span>++] = ah2[j++<span style=\"color: #000000;\">];\r\n        }\r\n    }\r\n    </span><span style=\"color: #0000ff;\">while</span> (i &lt;<span style=\"color: #000000;\"> ac1) {\r\n        container[k</span>++] = ah1[i++<span style=\"color: #000000;\">];\r\n    }\r\n    </span><span style=\"color: #0000ff;\">while</span> (j &lt;<span style=\"color: #000000;\"> ac2) {\r\n        container[k</span>++] = ah2[j++<span style=\"color: #000000;\">];\r\n    }\r\n\r\n    </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">copy back the sorted array</span><span style=\"color: #008000;\">*/</span>\r\n    <span style=\"color: #0000ff;\">for</span>(i=<span style=\"color: #800080;\">0</span>; i&lt;ac; i++<span style=\"color: #000000;\">) {\r\n        a[i] </span>=<span style=\"color: #000000;\"> container[i];\r\n    }\r\n    </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">free space</span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\n    free(container);\r\n}</span></span></pre>\r\n</div>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#xA0;</span></p>\r\n<h3><span style=\"font-family: &apos;courier new&apos;, courier;\">&#x5FEB;&#x901F;&#x6392;&#x5E8F; (Quick Sort)</span></h3>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#x6211;&#x4EEC;&#x4F9D;&#x7136;&#x8003;&#x8651;&#x6309;&#x7167;&#x8EAB;&#x9AD8;&#x7ED9;&#x5B66;&#x751F;&#x6392;&#x5E8F;&#x3002;&#x5728;<span style=\"color: #ff0000;\">&#x5FEB;&#x901F;&#x6392;&#x5E8F;</span>&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x968F;&#x4FBF;&#x6311;&#x51FA;&#x4E00;&#x4E2A;&#x5B66;&#x751F;&#xFF0C;&#x4EE5;&#x8BE5;&#x5B66;&#x751F;&#x7684;&#x8EAB;&#x9AD8;&#x4E3A;<span style=\"color: #ff0000;\">&#x53C2;&#x8003;</span>(pivot)&#x3002;&#x7136;&#x540E;&#x8BA9;&#x6BD4;&#x8BE5;&#x5B66;&#x751F;&#x4F4E;&#x7684;&#x7AD9;&#x5728;&#x8BE5;&#x5B66;&#x751F;&#x7684;&#x53F3;&#x8FB9;&#xFF0C;&#x5269;&#x4E0B;&#x7684;&#x7AD9;&#x5728;&#x8BE5;&#x5B66;&#x751F;&#x7684;&#x5DE6;&#x8FB9;&#x3002;</span></p>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#x5F88;&#x660E;&#x663E;&#xFF0C;&#x6240;&#x6709;&#x7684;&#x5B66;&#x751F;&#x88AB;&#x5206;&#x6210;&#x4E86;&#x4E24;&#x7EC4;&#x3002;&#x8BE5;&#x5B66;&#x751F;&#x53F3;&#x8FB9;&#x7684;&#x5B66;&#x751F;&#x7684;&#x8EAB;&#x9AD8;&#x90FD;&#x5927;&#x4E8E;&#x8BE5;&#x5B66;&#x751F;&#x5DE6;&#x8FB9;&#x7684;&#x5B66;&#x751F;&#x7684;&#x8EAB;&#x9AD8;&#x3002;</span></p>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#x6211;&#x4EEC;&#x7EE7;&#x7EED;&#xFF0C;&#x5728;&#x4F4E;&#x8EAB;&#x9AD8;&#x5B66;&#x751F;&#x7EC4;&#x968F;&#x4FBF;&#x6311;&#x51FA;&#x4E00;&#x4E2A;&#x5B66;&#x751F;&#xFF0C;&#x5C06;&#x4F4E;&#x8EAB;&#x9AD8;&#x7EC4;&#x7684;&#x5B66;&#x751F;&#x5206;&#x4E3A;&#x4E24;&#x7EC4;(&#x5F88;&#x4F4E;&#x548C;&#x4E0D;&#x90A3;&#x4E48;&#x4F4E;)&#x3002;&#x540C;&#x6837;&#xFF0C;&#x5C06;&#x9AD8;&#x5B66;&#x751F;&#x7EC4;&#x4E5F;&#x5206;&#x4E3A;&#x4E24;&#x7EC4;(&#x4E0D;&#x90A3;&#x4E48;&#x9AD8;&#x548C;&#x5F88;&#x9AD8;)&#x3002;</span></p>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#x5982;&#x6B64;&#x7EE7;&#x7EED;&#x7EC6;&#x5206;&#xFF0C;&#x76F4;&#x5230;&#x5206;&#x7EC4;&#x4E2D;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x5B66;&#x751F;&#x3002;&#x5F53;&#x6240;&#x6709;&#x7684;&#x5206;&#x7EC4;&#x4E2D;&#x90FD;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x5B66;&#x751F;&#x65F6;&#xFF0C;&#x5219;&#x6392;&#x5E8F;&#x5B8C;&#x6210;&#x3002;</span></p>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#xA0;</span></p>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#x5728;&#x4E0B;&#x9762;&#x7684;&#x5B9E;&#x73B0;&#x4E2D;&#xFF0C;&#x4F7F;&#x7528;&#x9012;&#x5F52;:</span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"font-family: &apos;courier new&apos;, courier;\"><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">By Vamei</span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">select pivot, put elements (&lt;= pivot) to the left</span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">void</span> quick_sort(<span style=\"color: #0000ff;\">int</span> a[], <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> ac)\r\n{\r\n    </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">use swap</span><span style=\"color: #008000;\">*/</span>\r\n\r\n    <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> pivot is a position, \r\n       all the elements before pivot is smaller or equal to pvalue </span><span style=\"color: #008000;\">*/</span>\r\n    <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> pivot;\r\n    </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> the position of the element to be tested against pivot </span><span style=\"color: #008000;\">*/</span>\r\n    <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> sample;\r\n\r\n    </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> select a pvalue.  \r\n       Median is supposed to be a good choice, but that will itself take time.\r\n       here, the pvalue is selected in a very simple wayi: a[ac/2] </span><span style=\"color: #008000;\">*/</span>\r\n    <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> store pvalue at a[0] </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\n    swap(a</span>+<span style=\"color: #800080;\">0</span>, a+ac/<span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">);\r\n    pivot </span>= <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">; \r\n\r\n    </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> test each element </span><span style=\"color: #008000;\">*/</span>\r\n    <span style=\"color: #0000ff;\">for</span> (sample=<span style=\"color: #800080;\">1</span>; sample&lt;ac; sample++<span style=\"color: #000000;\">) {\r\n        </span><span style=\"color: #0000ff;\">if</span> (a[sample] &lt; a[<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">]) {\r\n            swap(a</span>+pivot, a+<span style=\"color: #000000;\">sample);\r\n            pivot</span>++<span style=\"color: #000000;\">;\r\n        }\r\n    }\r\n    </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> swap an element (which &lt;= pvalue) with a[0] </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\n    swap(a</span>+<span style=\"color: #800080;\">0</span>,a+pivot-<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);\r\n\r\n    </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> base case, if only two elements are in the array,\r\n       the above pass has already sorted the array </span><span style=\"color: #008000;\">*/</span>\r\n    <span style=\"color: #0000ff;\">if</span> (ac&lt;=<span style=\"color: #800080;\">2</span>) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\">;\r\n    </span><span style=\"color: #0000ff;\">else</span><span style=\"color: #000000;\"> {\r\n        </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> recursion </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\n        quick_sort(a, pivot);\r\n        quick_sort(a</span>+pivot, ac-<span style=\"color: #000000;\">pivot);\r\n    }\r\n}</span></span></pre>\r\n</div>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#x7406;&#x60F3;&#x7684;pivot&#x662F;&#x91C7;&#x7528;&#x5206;&#x7EC4;&#x5143;&#x7D20;&#x4E2D;&#x7684;&#x4E2D;&#x4F4D;&#x6570;&#x3002;&#x7136;&#x800C;&#x5BFB;&#x627E;&#x4E2D;&#x4F4D;&#x6570;&#x7684;&#x7B97;&#x6CD5;&#x9700;&#x8981;&#x53E6;&#x884C;&#x5B9E;&#x73B0;&#x3002;&#x4E5F;&#x53EF;&#x4EE5;&#x968F;&#x673A;&#x9009;&#x53D6;&#x5143;&#x7D20;&#x4F5C;&#x4E3A;pivot&#xFF0C;&#x968F;&#x673A;&#x9009;&#x53D6;&#x4E5F;&#x9700;&#x8981;&#x53E6;&#x884C;&#x5B9E;&#x73B0;&#x3002;&#x4E3A;&#x4E86;&#x7B80;&#x4FBF;&#xFF0C;&#x6211;&#x6BCF;&#x6B21;&#x90FD;&#x91C7;&#x7528;&#x4E2D;&#x95F4;&#x4F4D;&#x7F6E;&#x7684;&#x5143;&#x7D20;&#x4F5C;&#x4E3A;pivot&#x3002; <br></span></p>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#xA0; </span></p>\r\n<h3><span style=\"font-family: &apos;courier new&apos;, courier;\">&#x5806;&#x6392;&#x5E8F; (Heap Sort)</span></h3>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\"><span style=\"color: #ff0000;\">&#x5806;</span>(heap)&#x662F;&#x5E38;&#x89C1;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x3002;&#x5B83;&#x662F;&#x4E00;&#x4E2A;&#x6709;&#x4F18;&#x5148;&#x7EA7;&#x7684;&#x961F;&#x5217;&#x3002;&#x6700;&#x5E38;&#x89C1;&#x7684;&#x5806;&#x7684;&#x5B9E;&#x73B0;&#x662F;&#x4E00;&#x4E2A;&#x6709;&#x9650;&#x5B9A;&#x64CD;&#x4F5C;&#x7684;Complete Binary Tree&#x3002;&#x8FD9;&#x4E2A;Complete Binary Tree&#x4FDD;&#x6301;&#x5806;&#x7684;&#x7279;&#x6027;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;<span style=\"color: #ff0000;\">&#x7236;&#x8282;&#x70B9;(parent)&#x5927;&#x4E8E;&#x5B50;&#x8282;&#x70B9;(children)</span>&#x3002;&#x56E0;&#x6B64;&#xFF0C;&#x5806;&#x7684;&#x6839;&#x8282;&#x70B9;&#x662F;&#x6240;&#x6709;&#x5806;&#x5143;&#x7D20;&#x4E2D;&#x6700;&#x5C0F;&#x7684;&#x3002;&#x5806;&#x5B9A;&#x4E49;&#x6709;<span style=\"color: #ff0000;\">&#x63D2;&#x5165;&#x8282;&#x70B9;</span>&#x548C;<span style=\"color: #ff0000;\">&#x5220;&#x9664;&#x6839;&#x8282;&#x70B9;</span>&#x64CD;&#x4F5C;&#xFF0C;&#x8FD9;&#x4E24;&#x4E2A;&#x64CD;&#x4F5C;&#x90FD;&#x4FDD;&#x6301;&#x5806;&#x7684;&#x7279;&#x6027;&#x3002;<br></span></p>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">\r\n&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5C06;&#x65E0;&#x5E8F;&#x6570;&#x7EC4;&#x6784;&#x6210;&#x4E00;&#x4E2A;&#x5806;&#xFF0C;&#x7136;&#x540E;&#x4E0D;&#x65AD;&#x53D6;&#x51FA;&#x6839;&#x8282;&#x70B9;&#xFF0C;&#x6700;&#x7EC8;&#x6784;&#x6210;&#x4E00;&#x4E2A;&#x6709;&#x5E8F;&#x6570;&#x7EC4;&#x3002;</span></p>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#x5806;&#x7684;&#x66F4;&#x8BE6;&#x7EC6;&#x63CF;&#x8FF0;&#x8BF7;&#x9605;&#x8BFB;&#x53C2;&#x8003;&#x4E66;&#x76EE;&#x3002;</span></p>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#xA0;</span></p>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#x4E0B;&#x9762;&#x662F;&#x5806;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF0C;&#x4EE5;&#x53CA;&#x63D2;&#x5165;&#x8282;&#x70B9;&#x548C;&#x5220;&#x9664;&#x6839;&#x8282;&#x70B9;&#x64CD;&#x4F5C;&#x3002;&#x4F60;&#x53EF;&#x4EE5;&#x5F88;&#x65B9;&#x4FBF;&#x7684;&#x6784;&#x5EFA;&#x5806;&#xFF0C;&#x5E76;&#x53D6;&#x51FA;&#x6839;&#x8282;&#x70B9;&#xFF0C;&#x6784;&#x6210;&#x6709;&#x5E8F;&#x6570;&#x7EC4;&#x3002;</span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"font-family: &apos;courier new&apos;, courier;\"><span style=\"color: #008000;\">/* </span><span style=\"color: #008000;\">By Vamei \r\n   Use an big array to implement heap\r\n   DECLARE: int heap[MAXSIZE] in calling function\r\n   heap[0] : total nodes in the heap\r\n   for a node i, its children are i*2 and i*2+1 (if exists)\r\n   its parent is i/2  </span><span style=\"color: #008000;\">*/</span>\r\n\r\n<span style=\"color: #0000ff;\">void</span> insert(<span style=\"color: #0000ff;\">int</span> <span style=\"color: #0000ff;\">new</span>, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> heap[]) \r\n{\r\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> childIdx, parentIdx;\r\n    heap[</span><span style=\"color: #800080;\">0</span>] = heap[<span style=\"color: #800080;\">0</span>] + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\r\n    heap[heap[</span><span style=\"color: #800080;\">0</span>]] = <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\">;\r\n    \r\n    </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> recover heap property </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\n    percolate_up(heap);\r\n}\r\n\r\n</span><span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">void</span> percolate_up(<span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> heap[]) {\r\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> lightIdx, parentIdx;\r\n    lightIdx  </span>= heap[<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">];\r\n    parentIdx </span>= lightIdx/<span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">;\r\n    </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> lightIdx is root? &amp;&amp; swap? </span><span style=\"color: #008000;\">*/</span>\r\n    <span style=\"color: #0000ff;\">while</span>((parentIdx &gt; <span style=\"color: #800080;\">0</span>) &amp;&amp; (heap[lightIdx] &lt;<span style=\"color: #000000;\"> heap[parentIdx])) {\r\n        </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> swap </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\n        swap(heap </span>+ lightIdx, heap +<span style=\"color: #000000;\"> parentIdx); \r\n        lightIdx  </span>=<span style=\"color: #000000;\"> parentIdx;\r\n        parentIdx </span>= lightIdx/<span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">;\r\n    }\r\n}\r\n\r\n\r\n</span><span style=\"color: #0000ff;\">int</span> delete_min(<span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> heap[]) \r\n{\r\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> min;\r\n    </span><span style=\"color: #0000ff;\">if</span> (heap[<span style=\"color: #800080;\">0</span>] &lt; <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">) {\r\n        </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> delete element from an empty heap </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\n        printf(</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #800000;\">Error: delete_min from an empty heap.</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #000000;\">);\r\n        exit(</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);\r\n    }\r\n\r\n    </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> delete root \r\n       move the last leaf to the root </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\n    min </span>= heap[<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">];\r\n    swap(heap </span>+ <span style=\"color: #800080;\">1</span>, heap + heap[<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">]);\r\n    heap[</span><span style=\"color: #800080;\">0</span>] -= <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\r\n\r\n    </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> recover heap property </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\n    percolate_down(heap);\r\n \r\n    </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> min;\r\n}\r\n\r\n</span><span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">void</span> percolate_down(<span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> heap[]) {\r\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> heavyIdx;\r\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> childIdx1, childIdx2, minIdx;\r\n    </span><span style=\"color: #0000ff;\">int</span> sign; <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> state variable, 1: swap; 0: no swap </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\n\r\n    heavyIdx </span>= <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\r\n    </span><span style=\"color: #0000ff;\">do</span><span style=\"color: #000000;\"> {\r\n        sign     </span>= <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\r\n        childIdx1 </span>= heavyIdx*<span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">;\r\n        childIdx2 </span>= childIdx1 + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\r\n        </span><span style=\"color: #0000ff;\">if</span> (childIdx1 &gt; heap[<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">]) {\r\n            </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> both children are null </span><span style=\"color: #008000;\">*/</span>\r\n            <span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">; \r\n        }\r\n        </span><span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span> (childIdx2 &gt; heap[<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">]) {\r\n            </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> right children is null </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\n            minIdx </span>=<span style=\"color: #000000;\"> childIdx1;\r\n        }\r\n        </span><span style=\"color: #0000ff;\">else</span><span style=\"color: #000000;\"> {\r\n            minIdx </span>= (heap[childIdx1] &lt; heap[childIdx2]) ?<span style=\"color: #000000;\">\r\n                          childIdx1 : childIdx2;\r\n        }\r\n\r\n        </span><span style=\"color: #0000ff;\">if</span> (heap[heavyIdx] &gt;<span style=\"color: #000000;\"> heap[minIdx]) {\r\n            </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> swap with child </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\n            swap(heap </span>+ heavyIdx, heap +<span style=\"color: #000000;\"> minIdx);\r\n            heavyIdx </span>=<span style=\"color: #000000;\"> minIdx;\r\n            sign </span>= <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\r\n        }\r\n    } </span><span style=\"color: #0000ff;\">while</span>(sign == <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);\r\n}</span></span></pre>\r\n</div>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#xA0;</span></p>\r\n<h3><span style=\"font-family: &apos;courier new&apos;, courier;\">&#x603B;&#x7ED3;</span></h3>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#x9664;&#x4E86;&#x4E0A;&#x9762;&#x7684;&#x7B97;&#x6CD5;&#xFF0C;&#x8FD8;&#x6709;&#x8BF8;&#x5982;Bucket Sorting, Radix Sorting&#x6D89;&#x53CA;&#x3002;&#x6211;&#x4F1A;&#x5728;&#x672A;&#x6765;&#x5B9E;&#x73B0;&#x4E86;&#x76F8;&#x5173;&#x7B97;&#x6CD5;&#x4E4B;&#x540E;&#xFF0C;&#x8865;&#x5145;&#x5230;&#x8FD9;&#x7BC7;&#x6587;&#x7AE0;&#x4E2D;&#x3002;&#x76F8;&#x5173;&#x7B97;&#x6CD5;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x5206;&#x6790;&#x53EF;&#x4EE5;&#x53C2;&#x8003;&#x4E66;&#x76EE;&#x4E2D;&#x627E;&#x5230;&#x3002;&#x6211;&#x81EA;&#x5DF1;&#x4E5F;&#x505A;&#x4E86;&#x7C97;&#x7CD9;&#x7684;&#x5206;&#x6790;&#x3002;&#x5982;&#x679C;&#x535A;&#x5BA2;&#x56ED;&#x80FD;&#x652F;&#x6301;&#x6570;&#x5B66;&#x516C;&#x5F0F;&#x7684;&#x663E;&#x793A;&#xFF0C;&#x6211;&#x5C31;&#x628A;&#x81EA;&#x5DF1;&#x7684;&#x5206;&#x6790;&#x8FC7;&#x7A0B;&#x8D34;&#x51FA;&#x6765;&#xFF0C;&#x7528;&#x4E8E;&#x5F15;&#x7389;&#x3002;</span></p>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#x4E0A;&#x9762;&#x7684;&#x5404;&#x4E2A;&#x4EE3;&#x7801;&#x662F;&#x6211;&#x81EA;&#x5DF1;&#x5199;&#x7684;&#xFF0C;&#x53EA;&#x8FDB;&#x884C;&#x4E86;&#x5F88;&#x7B80;&#x5355;&#x7684;&#x6D4B;&#x8BD5;&#x3002;&#x5982;&#x679C;&#x6709;&#x9519;&#x6F0F;&#xFF0C;&#x5148;&#x8C22;&#x8C22;&#x4F60;&#x7684;&#x6307;&#x6B63;&#x3002;</span></p>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#x6700;&#x540E;&#xFF0C;&#x4E0A;&#x6587;&#x4E2D;&#x7528;&#x5230;&#x7684;&#x4EA4;&#x6362;&#x51FD;&#x6570;&#x4E3A;&#xFF1A;</span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"font-family: &apos;courier new&apos;, courier;\"><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> By Vamei </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> exchange the values pointed by pa and pb</span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">void</span> swap(<span style=\"color: #0000ff;\">int</span> *pa, <span style=\"color: #0000ff;\">int</span> *<span style=\"color: #000000;\">pb)\r\n{\r\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> tmp;\r\n    tmp </span>= *<span style=\"color: #000000;\">pa;\r\n    </span>*pa = *<span style=\"color: #000000;\">pb;\r\n    </span>*pb =<span style=\"color: #000000;\"> tmp;\r\n}</span></span></pre>\r\n</div>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#xA0;</span></p>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#x6B22;&#x8FCE;&#x7EE7;&#x7EED;&#x9605;&#x8BFB;<a href=\"http://www.cnblogs.com/vamei/archive/2013/03/22/2974052.html\">&#x201C;&#x7EB8;&#x4E0A;&#x8C08;&#x5175;: &#x7B97;&#x6CD5;&#x4E0E;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x201D;</a>&#x7CFB;&#x5217;&#x3002;</span></p>\r\n<p><span style=\"font-family: &apos;courier new&apos;, courier;\">&#xA0;</span></p>"}