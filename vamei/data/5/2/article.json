{"content":"<p><span style=\"font-family: courier new,courier;\">&#x4F5C;&#x8005;&#xFF1A;Vamei &#x51FA;&#x5904;&#xFF1A;http://www.cnblogs.com/vamei &#x6B22;&#x8FCE;&#x8F6C;&#x8F7D;&#xFF0C;&#x4E5F;&#x8BF7;&#x4FDD;&#x7559;&#x8FD9;&#x6BB5;&#x58F0;&#x660E;&#x3002;&#x8C22;&#x8C22;&#xFF01;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#xA0;</span></p>\r\n<h3><span style=\"font-family: courier new,courier;\">&#x8868;</span></h3>\r\n<p><span style=\"font-family: courier new,courier;\"><span style=\"color: #ff0000;\">&#x8868;(list)</span>&#x662F;&#x5E38;&#x89C1;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x3002;&#x4ECE;&#x6570;&#x5B66;&#x4E0A;&#x6765;&#x8BF4;&#xFF0C;&#x8868;&#x662F;&#x4E00;&#x4E2A;<span style=\"color: #ff0000;\">&#x6709;&#x5E8F;&#x7684;</span>&#x5143;&#x7D20;&#x96C6;&#x5408;&#x3002;&#x5728;C&#x8BED;&#x8A00;&#x7684;&#x5185;&#x5B58;&#x4E2D;&#xFF0C;&#x8868;&#x50A8;&#x5B58;&#x4E3A;<span style=\"color: #ff0000;\">&#x5206;&#x6563;&#x7684;&#x8282;&#x70B9;(node)</span>&#x3002;&#x6BCF;&#x4E2A;&#x8282;&#x70B9;&#x5305;&#x542B;&#x6709;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x4EE5;&#x53CA;&#x4E00;&#x4E2A;&#x6307;&#x5411;&#x4E0B;&#x4E00;&#x4E2A;(&#x6216;&#x8005;&#x4E0A;&#x4E00;&#x4E2A;)&#x5143;&#x7D20;&#x7684;&#x6307;&#x9488;&#x3002;&#x5982;&#x4E0B;&#x56FE;&#x6240;&#x793A;:</span></p>\r\n<p><span style=\"font-family: courier new,courier;\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://images.cnitblog.com/blog/413416/201303/14191955-125f03480cfc4aa7b7db02ce20186957.png\" alt=\"\"></span></p>\r\n<p style=\"text-align: center;\"><span style=\"font-family: courier new,courier;\">&#x8868;: &#x6A59;&#x8272;&#x50A8;&#x5B58;&#x6570;&#x636E;&#xFF0C;&#x84DD;&#x8272;&#x50A8;&#x5B58;&#x6307;&#x9488;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#x56FE;&#x4E2D;&#x7684;&#x8868;&#x4E2D;&#x6709;&#x56DB;&#x4E2A;&#x8282;&#x70B9;&#x3002;&#x7B2C;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x662F;<span style=\"color: #ff0000;\">&#x5934;&#x8282;&#x70B9;(head node)</span>&#xFF0C;&#x8FD9;&#x4E2A;&#x8282;&#x70B9;&#x4E0D;&#x7528;&#x4E8E;&#x50A8;&#x5B58;&#x5143;&#x7D20;&#xFF0C;&#x53EA;&#x7528;&#x4E8E;&#x6807;&#x660E;&#x8868;&#x7684;&#x8D77;&#x59CB;&#x3002;&#x5934;&#x8282;&#x70B9;&#x53EF;&#x4EE5;&#x8BA9;&#x6211;&#x4EEC;&#x65B9;&#x4FBF;&#x7684;&#x63D2;&#x5165;&#x6216;&#x8005;&#x5220;&#x9664;&#x8868;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x3002;&#x6574;&#x4E2A;&#x8868;&#x4E2D;&#x5305;&#x542B;&#x6709;&#x4E09;&#x4E2A;&#x5143;&#x7D20;(5&#xFF0C; 2&#xFF0C; 15)&#x3002;&#x6BCF;&#x4E2A;&#x8282;&#x70B9;&#x90FD;&#x6709;&#x4E00;&#x4E2A;&#x6307;&#x9488;&#xFF0C;&#x6307;&#x5411;&#x4E0B;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x3002;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x7684;&#x6307;&#x9488;&#x4E3A;NULL&#xFF0C;&#x6211;&#x4EEC;&#x7528;&#x201C;&#x63A5;&#x5730;&#x201D;&#x6765;&#x56FE;&#x793A;&#x8BE5;&#x6307;&#x9488;&#x3002;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#x8868;&#x7684;&#x529F;&#x80FD;&#x4E0E;<span style=\"color: #ff0000;\">&#x6570;&#x7EC4;(array)</span>&#x5F88;&#x7C7B;&#x4F3C;&#xFF0C;&#x6570;&#x7EC4;&#x4E5F;&#x662F;&#x6709;&#x5E8F;&#x7684;&#x5143;&#x7D20;&#x96C6;&#x5408;&#xFF0C;&#x4F46;&#x6570;&#x7EC4;&#x5728;&#x5185;&#x5B58;&#x4E2D;&#x4E3A;&#x4E00;&#x6BB5;<span style=\"color: #ff0000;\">&#x8FDE;&#x7EED;&#x5185;&#x5B58;</span>&#xFF0C;&#x800C;&#x8868;&#x7684;&#x6BCF;&#x4E2A;&#x8282;&#x70B9;&#x5360;&#x636E;&#x7684;&#x5185;&#x5B58;&#x53EF;&#x4EE5;&#x662F;&#x79BB;&#x6563;&#x7684;&#x3002;&#x5728;&#x6570;&#x7EC4;&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x901A;&#x8FC7;&#x8DF3;&#x8FC7;&#x56FA;&#x5B9A;&#x7684;&#x5185;&#x5B58;&#x957F;&#x5EA6;&#x6765;&#x5BFB;&#x627E;&#x67D0;&#x4E2A;&#x7F16;&#x53F7;&#x7684;&#x5143;&#x7D20;&#x3002;&#x4F46;&#x5728;&#x8868;&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x5FC5;&#x987B;&#x6CBF;&#x7740;&#x6307;&#x9488;&#x8054;&#x7CFB;&#x8D77;&#x7684;&#x957F;&#x94FE;&#xFF0C;&#x904D;&#x5386;<span style=\"color: #ff0000;\">&#x67E5;&#x8BE2;</span>&#x5143;&#x7D20;&#x3002;&#x6B64;&#x5916;&#xFF0C;&#x6570;&#x7EC4;&#x6709;&#x56FA;&#x5B9A;&#x7684;&#x5927;&#x5C0F;&#xFF0C;&#x8868;&#x53EF;&#x4EE5;&#x6839;&#x636E;&#x8FD0;&#x884C;&#x60C5;&#x51B5;<span style=\"color: #ff0000;\">&#x63D2;&#x5165;</span>&#x6216;&#x8005;<span style=\"color: #ff0000;\">&#x5220;&#x9664;</span>&#x8282;&#x70B9;&#xFF0C;&#x52A8;&#x6001;&#x7684;&#x66F4;&#x6539;&#x5927;&#x5C0F;&#x3002;&#x8868;&#x63D2;&#x5165;&#x8282;&#x70B9;&#x65F6;&#x9700;&#x8981;&#x4ECE;&#x8FDB;&#x7A0B;&#x7A7A;&#x95F4;&#x7684;&#x5806;&#x4E2D;&#x5F00;&#x8F9F;&#x5185;&#x5B58;&#x7A7A;&#x95F4;&#xFF0C;&#x7528;&#x4EE5;&#x50A8;&#x5B58;&#x8282;&#x70B9;&#x3002;&#x5220;&#x9664;&#x8282;&#x70B9;&#x53EF;&#x4EE5;&#x5C06;&#x8282;&#x70B9;&#x5360;&#x636E;&#x7684;&#x5185;&#x5B58;&#x5F52;&#x8FD8;&#x7ED9;&#x8FDB;&#x7A0B;&#x7A7A;&#x95F4;&#x3002;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://images.cnitblog.com/blog/413416/201303/14193441-d36c1eb7e9974bca8b62dccb42900761.png\" alt=\"\"></span></p>\r\n<p style=\"text-align: center;\"><span style=\"font-family: courier new,courier;\">&#x5220;&#x9664;&#x8282;&#x70B9;, free&#x91CA;&#x653E;&#x5185;&#x5B58;</span></p>\r\n<p style=\"text-align: center;\"><span style=\"font-family: courier new,courier;\">&#xA0;</span></p>\r\n<p style=\"text-align: center;\"><span style=\"font-family: courier new,courier;\"><img src=\"http://images.cnitblog.com/blog/413416/201303/14193830-30a097b53a044558a1d5ff3e109fe81b.png\" alt=\"\"></span></p>\r\n<p style=\"text-align: center;\"><span style=\"font-family: courier new,courier;\">&#x63D2;&#x5165;&#x8282;&#x70B9;&#xFF0C;malloc&#x5F00;&#x8F9F;&#x5185;&#x5B58;</span></p>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#xA0;</span></p>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#x8868;&#x6709;&#x591A;&#x79CD;&#x53D8;&#x79CD;&#x3002;&#x4E0A;&#x9762;&#x7684;&#x8868;&#x4E2D;&#xFF0C;&#x6307;&#x9488;&#x6307;&#x5411;&#x662F;&#x4ECE;&#x524D;&#x5411;&#x540E;&#x7684;&#xFF0C;&#x79F0;&#x4E3A;&#x5355;&#x5411;&#x94FE;&#x8868;(linked list)&#x3002;&#x8FD8;&#x6709;&#x53CC;&#x5411;&#x94FE;&#x8868;(double-linked list)&#xFF0C;&#x5373;&#x6BCF;&#x4E2A;&#x8282;&#x70B9;&#x589E;&#x52A0;&#x4E00;&#x4E2A;&#x6307;&#x5411;&#x524D;&#x9762;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x7684;&#x6307;&#x9488;&#x3002;&#x4EE5;&#x53CA;&#x5FAA;&#x73AF;&#x94FE;&#x8868;(tabular list)&#xFF0C;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x7684;&#x6307;&#x9488;&#x5E76;&#x4E0D;&#x4E3A;NULL&#xFF0C;&#x800C;&#x662F;&#x6307;&#x5411;&#x5934;&#x8282;&#x70B9;&#x3002;&#x4E0D;&#x540C;&#x7C7B;&#x578B;&#x7684;&#x94FE;&#x8868;&#x6709;&#x4E0D;&#x540C;&#x7684;&#x5E94;&#x7528;&#x573A;&#x666F;&#x3002;</span></p>\r\n<p style=\"text-align: center;\"><span style=\"font-family: courier new,courier;\"><img src=\"http://images.cnitblog.com/blog/413416/201303/14195619-6e34c3fee78847c8970074e9c6b3919a.png\" alt=\"\"></span></p>\r\n<p style=\"text-align: center;\"><span style=\"font-family: courier new,courier;\">&#x53CC;&#x5411;&#x94FE;&#x8868;</span></p>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#xA0;</span></p>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://images.cnitblog.com/blog/413416/201303/14195023-fe3143da8692423fb14ec0c09cda2b4a.png\" alt=\"\"></span></p>\r\n<p style=\"text-align: center;\"><span style=\"font-family: courier new,courier;\">&#x5FAA;&#x73AF;&#x94FE;&#x8868;</span></p>\r\n<p style=\"text-align: center;\"><span style=\"font-family: courier new,courier;\">&#xA0;</span></p>\r\n<p style=\"text-align: center;\"><span style=\"font-family: courier new,courier;\"><img src=\"http://images.cnitblog.com/blog/413416/201303/14195759-b02f7c5bb4684ddbb6c27e4e98a09ec4.png\" alt=\"\"></span></p>\r\n<p style=\"text-align: center;\"><span style=\"font-family: courier new,courier;\">&#x53CC;&#x5411;&#x5FAA;&#x73AF;&#x94FE;&#x8868;</span></p>\r\n<p style=\"text-align: center;\"><span style=\"font-family: courier new,courier;\">&#xA0;</span></p>\r\n<h3 style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#x5355;&#x5411;&#x94FE;&#x8868;&#x7684;C&#x5B9E;&#x73B0;</span></h3>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#x4E00;&#x4E2A;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x7684;&#x5B9E;&#x73B0;&#x6709;&#x4E24;&#x65B9;&#x9762;: 1. &#x6570;&#x636E;&#x7ED3;&#x6784;&#x7684;&#x5185;&#x5B58;&#x8868;&#x8FBE;&#x65B9;&#x5F0F;; 2. &#x5B9A;&#x4E49;&#x5728;&#x8BE5;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x4E0A;&#x7684;&#x64CD;&#x4F5C;&#x3002;&#x6211;&#x4EEC;&#x8FD9;&#x91CC;&#x5B9E;&#x73B0;&#x6700;&#x7B80;&#x5355;&#x7684;&#x5355;&#x5411;&#x94FE;&#x8868;&#x3002;&#x8868;&#x6240;&#x652F;&#x6301;&#x7684;&#x64CD;&#x4F5C;&#x5F88;&#x7075;&#x6D3B;&#x591A;&#x6837;&#xFF0C;&#x6211;&#x4EEC;&#x8FD9;&#x91CC;&#x5B9A;&#x4E49;&#x4E00;&#x4E9B;&#x6700;&#x5E38;&#x89C1;&#x7684;&#x64CD;&#x4F5C;&#x3002;&#x6BCF;&#x4E2A;&#x64CD;&#x4F5C;&#x90FD;&#x5199;&#x6210;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x3002;</span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #008000; font-family: courier new,courier;\">/* By Vamei */</span><br><span style=\"font-family: courier new,courier;\">#include &lt;stdio.h&gt;<span style=\"color: #000000;\">\r\n#include </span>&lt;stdlib.h&gt;\r\n</span><br><span style=\"font-family: courier new,courier;\"><span style=\"color: #000000;\">typedef </span><span style=\"color: #0000ff;\">struct</span> node *<span style=\"color: #000000;\">LIST; <br>typedef </span><span style=\"color: #0000ff;\">struct</span> node *<span style=\"color: #000000;\">position;</span></span><br><br><span style=\"font-family: courier new,courier;\"><span style=\"color: #008000;\">/* node&#xFF0C;&#x8282;&#x70B9; */</span>\r\n<span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> node {\r\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> element;\r\n    </span><span style=\"color: #0000ff;\"><span style=\"color: #000000;\">position</span> </span><span style=\"color: #000000;\">next;\r\n};\r\n</span><span style=\"color: #000000;\"><span style=\"color: #008000;\">\r\n/* </span><br><span style=\"color: #008000;\"> * operations (stereotype)</span><br><span style=\"color: #008000;\"> * &#x64CD;&#x4F5C;</span><br><span style=\"color: #008000;\"> */</span><br>LIST init_list(</span><span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\">);\r\n</span><span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> delete_list(LIST);<br></span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> is_null(LIST);<br></span><span style=\"color: #0000ff;\">void</span> insert_node(position, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\">);\r\n</span><span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> delete_node(LIST, position);<br>position find_last(LIST);\r\nposition find_value(LIST, </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\">);\r\nposition find_previous(LIST, position);<br></span><span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> print_list(LIST);\r\n<br><span style=\"color: #008000;\">/* for testing purpose */\r\n</span></span><span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> main()\r\n{\r\n    LIST L;\r\n    position np;\r\n    \r\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i;\r\n    </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> elements to be put into the list </span><span style=\"color: #008000;\">*/</span>\r\n    <span style=\"color: #0000ff;\">int</span> a[] = {<span style=\"color: #800080;\">1</span>, <span style=\"color: #800080;\">3</span>, <span style=\"color: #800080;\">5</span>, <span style=\"color: #800080;\">7</span>, <span style=\"color: #800080;\">9</span><span style=\"color: #000000;\">};\r\n\r\n    </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> initiate a list </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\n    L </span>=<span style=\"color: #000000;\"> init_list();\r\n    print_list(L);\r\n\r\n    </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> insert nodes. Insert just after head node </span><span style=\"color: #008000;\">*/</span>\r\n    <span style=\"color: #0000ff;\">for</span> (i=<span style=\"color: #800080;\">4</span>; i&gt;=<span style=\"color: #800080;\">0</span>; i--<span style=\"color: #000000;\">) {\r\n        insert_node(L, a[i]);\r\n    }\r\n    print_list(L);\r\n\r\n    </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> delete first node with value 5 </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\n    np </span>= find_value(L, <span style=\"color: #800080;\">5</span><span style=\"color: #000000;\">);\r\n    delete_node(L, np);\r\n    print_list(L);\r\n\r\n    </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> delete list </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\n    delete_list(L);\r\n\r\n    </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> initiate a list </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\n    L </span>=<span style=\"color: #000000;\"> init_list();\r\n    print_list(L);\r\n\r\n    </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> insert nodes. Insert just after head node </span><span style=\"color: #008000;\">*/</span>\r\n    <span style=\"color: #0000ff;\">for</span> (i=<span style=\"color: #800080;\">4</span>; i&gt;=<span style=\"color: #800080;\">0</span>; i--<span style=\"color: #000000;\">) {\r\n        insert_node(L, a[i]);\r\n    }\r\n    print_list(L);\r\n\r\n    </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> delete list </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\n    delete_list(L);\r\n}\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">\r\n * Traverse the list and print each element<br> * &#x6253;&#x5370;&#x8868;\r\n </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> print_list(LIST L)\r\n{\r\n    position np;\r\n    </span><span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\">(is_null(L)) {\r\n        printf(</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #800000;\">Empty List\\n\\n</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #000000;\">);\r\n        </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\">;\r\n    }\r\n\r\n    np </span>=<span style=\"color: #000000;\"> L;\r\n    </span><span style=\"color: #0000ff;\">while</span>(np-&gt;next !=<span style=\"color: #000000;\"> NULL) { \r\n        np </span>= np-&gt;<span style=\"color: #000000;\">next;\r\n        printf(</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #800000;\">%p: %d \\n</span><span style=\"color: #800000;\">&quot;</span>, np, np-&gt;<span style=\"color: #000000;\">element);\r\n    }\r\n    printf(</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #800000;\">\\n</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #000000;\">);\r\n\r\n}\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">\r\n * Initialize a linked list. This list has a head node\r\n * head node doesn&apos;t store valid element value<br> * &#x521B;&#x5EFA;&#x8868;\r\n </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\nLIST init_list(</span><span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\">) \r\n{\r\n    LIST L;\r\n    L </span>= (position) malloc(<span style=\"color: #0000ff;\">sizeof</span>(<span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> node));\r\n    L</span>-&gt;next =<span style=\"color: #000000;\"> NULL;\r\n    </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> L;\r\n}\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">\r\n * Delete all nodes in a list<br> * &#x5220;&#x9664;&#x8868;\r\n </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> delete_list(LIST L)\r\n{\r\n    position np, next;\r\n\r\n    np   </span>=<span style=\"color: #000000;\"> L;\r\n    </span><span style=\"color: #0000ff;\">do</span><span style=\"color: #000000;\"> {\r\n        next </span>= np-&gt;<span style=\"color: #000000;\">next;\r\n        free(np);\r\n        np   </span>=<span style=\"color: #000000;\"> next;\r\n    } </span><span style=\"color: #0000ff;\">while</span>(next !=<span style=\"color: #000000;\"> NULL);    \r\n}\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">\r\n * if a list only has head node, then the list is null.<br> * &#x5224;&#x65AD;&#x8868;&#x662F;&#x5426;&#x4E3A;&#x7A7A;\r\n </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> is_null(LIST L) \r\n{\r\n    </span><span style=\"color: #0000ff;\">return</span> ((L-&gt;next)==<span style=\"color: #000000;\">NULL);\r\n}\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">\r\n * insert a node after position np<br> * &#x5728;np&#x8282;&#x70B9;&#x4E4B;&#x540E;&#xFF0C;&#x63D2;&#x5165;&#x8282;&#x70B9;\r\n </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">void</span> insert_node(position np, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> value) \r\n{\r\n    position nodeAddr;\r\n    \r\n    nodeAddr </span>= (position) malloc(<span style=\"color: #0000ff;\">sizeof</span>(<span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> node));\r\n    nodeAddr</span>-&gt;element =<span style=\"color: #000000;\"> value;\r\n    nodeAddr</span>-&gt;next = np-&gt;<span style=\"color: #000000;\">next;\r\n    np</span>-&gt;next =<span style=\"color: #000000;\"> nodeAddr;    \r\n}\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">\r\n * delete node at position np<br> * &#x5220;&#x9664;np&#x8282;&#x70B9;\r\n </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> delete_node(LIST L, position np)\r\n{\r\n    position previous, next;\r\n    next     </span>= np-&gt;<span style=\"color: #000000;\">next;\r\n    previous </span>=<span style=\"color: #000000;\"> find_previous(L, np);\r\n    </span><span style=\"color: #0000ff;\">if</span>(previous !=<span style=\"color: #000000;\"> NULL) {\r\n        previous</span>-&gt;next =<span style=\"color: #000000;\"> next;\r\n        free(np); \r\n    }\r\n    </span><span style=\"color: #0000ff;\">else</span><span style=\"color: #000000;\"> {\r\n        printf(</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #800000;\">Error: np not in the list</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #000000;\">);\r\n    }\r\n}\r\n<span style=\"color: #008000;\">\r\n/*</span><br><span style=\"color: #008000;\">&#xA0;* find the last node of the list<br> * &#x5BFB;&#x627E;&#x8868;&#x7684;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x8282;&#x70B9;</span><br><span style=\"color: #008000;\">&#xA0;*/</span>\r\nposition find_last(LIST L)\r\n{\r\n    position np;\r\n    np </span>=<span style=\"color: #000000;\"> L;\r\n    </span><span style=\"color: #0000ff;\">while</span>(np-&gt;next !=<span style=\"color: #000000;\"> NULL) {\r\n        np </span>= np-&gt;<span style=\"color: #000000;\">next;\r\n    }\r\n    </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> np;\r\n}\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">\r\n * This function serves for 2 purposes:\r\n * 1. find previous node \r\n * 2. return NULL if the position isn&apos;t in the list<br> * &#x5BFB;&#x627E;npTarget&#x8282;&#x70B9;&#x524D;&#x9762;&#x7684;&#x8282;&#x70B9;\r\n </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\nposition find_previous(LIST L, position npTarget)\r\n{\r\n    position np;\r\n    np </span>=<span style=\"color: #000000;\"> L;\r\n    </span><span style=\"color: #0000ff;\">while</span> (np-&gt;next !=<span style=\"color: #000000;\"> NULL) {\r\n        </span><span style=\"color: #0000ff;\">if</span> (np-&gt;next == npTarget) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> np; \r\n        np </span>= np-&gt;<span style=\"color: #000000;\">next;\r\n    } \r\n    </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> NULL;\r\n}\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">\r\n * find the first node with specific value<br> * &#x67E5;&#x8BE2;\r\n </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\nposition find_value(LIST L, </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> value) \r\n{\r\n    position np;\r\n    np </span>=<span style=\"color: #000000;\"> L;\r\n    </span><span style=\"color: #0000ff;\">while</span> (np-&gt;next !=<span style=\"color: #000000;\"> NULL) {\r\n        np </span>= np-&gt;<span style=\"color: #000000;\">next;\r\n        </span><span style=\"color: #0000ff;\">if</span> (np-&gt;element == value) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> np;\r\n    }\r\n    </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> NULL;\r\n}</span></span></pre>\r\n</div>\r\n<p><span style=\"font-family: courier new,courier;\">&#xA0;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#x5728;main()&#x51FD;&#x6570;&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x521D;&#x59CB;&#x5316;&#x8868;&#xFF0C;&#x7136;&#x540E;&#x63D2;&#x5165;(1, 3, 5, 7, 9&#xFF09;&#x3002;&#x53C8;&#x5220;&#x9664;&#x5143;&#x7D20;5&#x3002;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#xFF0C;&#x8282;&#x70B9;&#x96F6;&#x6563;&#x7684;&#x5206;&#x5E03;&#x5728;&#x5185;&#x5B58;&#x4E2D;&#x3002;&#x5220;&#x9664;&#x8282;&#x70B9;&#x64CD;&#x4F5C;&#x4E0D;&#x4F1A;&#x5F71;&#x54CD;&#x5176;&#x4ED6;&#x8282;&#x70B9;&#x7684;&#x5B58;&#x50A8;&#x4F4D;&#x7F6E;&#x3002;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#x6211;&#x4EEC;&#x968F;&#x540E;&#x5220;&#x9664;&#x8868;&#xFF0C;&#x53C8;&#x91CD;&#x65B0;&#x521B;&#x5EFA;&#x8868;&#x3002;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#xFF0C;&#x8FD9;&#x6B21;&#x8868;&#x5360;&#x636E;&#x5185;&#x5B58;&#x7684;&#x4F4D;&#x7F6E;&#x4E0E;&#x7B2C;&#x4E00;&#x6B21;&#x4E0D;&#x540C;&#x3002;</span></p>\r\n<p>&#xA0;</p>\r\n<p><span style=\"font-family: courier new,courier;\"><span style=\"font-family: courier new,courier;\">&#x4E0B;&#x9762;&#x662F;<span style=\"color: #800000;\">main()</span>&#x51FD;&#x6570;&#x7684;&#x8FD0;&#x884C;&#x7ED3;&#x679C;&#x3002;</span></span></p>\r\n<p><span style=\"color: #800000; font-family: courier new,courier;\">Empty List</span><br><br><span style=\"color: #800000; font-family: courier new,courier;\">0x154d0b0: 1 </span><br><span style=\"color: #800000; font-family: courier new,courier;\">0x154d090: 3 </span><br><span style=\"color: #800000; font-family: courier new,courier;\">0x154d070: 5 </span><br><span style=\"color: #800000; font-family: courier new,courier;\">0x154d050: 7 </span><br><span style=\"color: #800000; font-family: courier new,courier;\">0x154d030: 9 </span><br><br><span style=\"color: #800000; font-family: courier new,courier;\">0x154d0b0: 1 </span><br><span style=\"color: #800000; font-family: courier new,courier;\">0x154d090: 3 </span><br><span style=\"color: #800000; font-family: courier new,courier;\">0x154d050: 7 </span><br><span style=\"color: #800000; font-family: courier new,courier;\">0x154d030: 9 </span><br><br><span style=\"color: #800000; font-family: courier new,courier;\">Empty List</span><br><br><span style=\"color: #800000; font-family: courier new,courier;\">0x154d070: 1 </span><br><span style=\"color: #800000; font-family: courier new,courier;\">0x154d010: 3 </span><br><span style=\"color: #800000; font-family: courier new,courier;\">0x154d0b0: 5 </span><br><span style=\"color: #800000; font-family: courier new,courier;\">0x154d090: 7 </span><br><span style=\"font-family: courier new,courier;\"><span style=\"color: #800000;\">0x154d050: 9</span> </span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#xA0;</span></p>\r\n<h3><span style=\"font-family: courier new,courier;\">&#x603B;&#x7ED3;</span></h3>\r\n<p><span style=\"font-family: courier new,courier;\">&#x8868;: &#x5185;&#x5B58;&#x4E2D;&#x79BB;&#x6563;&#x5206;&#x5E03;&#x7684;&#x6709;&#x5E8F;&#x8282;&#x70B9;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#x63D2;&#x5165;&#xFF0C;&#x5220;&#x9664;&#x8282;&#x70B9;</span></p>\r\n<p>&#xA0;</p>\r\n<p><span style=\"font-family: courier new,courier;\">&#x6B22;&#x8FCE;&#x7EE7;&#x7EED;&#x9605;&#x8BFB;<a href=\"http://www.cnblogs.com/vamei/archive/2013/03/22/2974052.html\">&#x201C;&#x7EB8;&#x4E0A;&#x8C08;&#x5175;: &#x7B97;&#x6CD5;&#x4E0E;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x201D;</a>&#x7CFB;&#x5217;&#x3002;</span></p>\r\n<p>&#xA0;</p>"}