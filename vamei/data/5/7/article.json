{"content":"<p><span style=\"font-family: courier new,courier;\">&#x4F5C;&#x8005;&#xFF1A;Vamei &#x51FA;&#x5904;&#xFF1A;http://www.cnblogs.com/vamei &#x6B22;&#x8FCE;&#x8F6C;&#x8F7D;&#xFF0C;&#x4E5F;&#x8BF7;&#x4FDD;&#x7559;&#x8FD9;&#x6BB5;&#x58F0;&#x660E;&#x3002;&#x8C22;&#x8C22;&#xFF01;&#xA0;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#xA0;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#x6211;&#x4EEC;&#x8BA8;&#x8BBA;&#x8FC7;&#xFF0C;&#x6811;&#x7684;&#x641C;&#x7D22;&#x6548;&#x7387;&#x4E0E;&#x6811;&#x7684;&#x6DF1;&#x5EA6;&#x6709;&#x5173;&#x3002;&#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;&#x7684;&#x6DF1;&#x5EA6;&#x53EF;&#x80FD;&#x4E3A;n&#xFF0C;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x6BCF;&#x6B21;&#x641C;&#x7D22;&#x7684;&#x590D;&#x6742;&#x5EA6;&#x4E3A;n&#x7684;&#x91CF;&#x7EA7;&#x3002;AVL&#x6811;&#x901A;&#x8FC7;&#x52A8;&#x6001;&#x5E73;&#x8861;&#x6811;&#x7684;&#x6DF1;&#x5EA6;&#xFF0C;&#x5355;&#x6B21;&#x641C;&#x7D22;&#x7684;&#x590D;&#x6742;&#x5EA6;&#x4E3A;log(n) (&#x4EE5;&#x4E0A;&#x53C2;&#x8003;<a id=\"cb_post_title_url\" class=\"postTitle2\" href=\"http://www.cnblogs.com/vamei/archive/2013/03/21/2964092.html\">&#x7EB8;&#x4E0A;&#x8C08;&#x5175; AVL&#x6811;</a>)&#x3002;&#x6211;&#x4EEC;&#x4E0B;&#x9762;&#x770B;<span style=\"color: #ff0000;\">&#x4F38;&#x5C55;&#x6811;(splay tree)</span>&#xFF0C;&#x5B83;&#x5BF9;&#x4E8E;m&#x6B21;<span style=\"color: #ff0000;\">&#x8FDE;&#x7EED;</span>&#x641C;&#x7D22;&#x64CD;&#x4F5C;&#x6709;&#x5F88;&#x597D;&#x7684;&#x6548;&#x7387;&#x3002;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#xA0;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#x4F38;&#x5C55;&#x6811;&#x4F1A;&#x5728;&#x4E00;&#x6B21;&#x641C;&#x7D22;&#x540E;&#xFF0C;&#x5BF9;&#x6811;&#x8FDB;&#x884C;&#x4E00;&#x4E9B;&#x7279;&#x6B8A;&#x7684;&#x64CD;&#x4F5C;&#x3002;&#x8FD9;&#x4E9B;&#x64CD;&#x4F5C;&#x7684;&#x7406;&#x5FF5;&#x4E0E;AVL&#x6811;&#x6709;&#x4E9B;&#x7C7B;&#x4F3C;&#xFF0C;&#x5373;&#x901A;&#x8FC7;&#x65CB;&#x8F6C;&#xFF0C;&#x6765;&#x6539;&#x53D8;&#x6811;&#x8282;&#x70B9;&#x7684;&#x5206;&#x5E03;&#xFF0C;&#x5E76;&#x51CF;&#x5C0F;&#x6811;&#x7684;&#x6DF1;&#x5EA6;&#x3002;&#x4F46;&#x4F38;&#x5C55;&#x6811;&#x5E76;&#x6CA1;&#x6709;AVL&#x7684;&#x5E73;&#x8861;&#x8981;&#x6C42;&#xFF0C;&#x4EFB;&#x610F;&#x8282;&#x70B9;&#x7684;&#x5DE6;&#x53F3;&#x5B50;&#x6811;&#x53EF;&#x4EE5;&#x76F8;&#x5DEE;&#x4EFB;&#x610F;&#x6DF1;&#x5EA6;&#x3002;&#x4E0E;&#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;&#x7C7B;&#x4F3C;&#xFF0C;&#x4F38;&#x5C55;&#x6811;&#x7684;&#x5355;&#x6B21;&#x641C;&#x7D22;&#x4E5F;&#x53EF;&#x80FD;&#x9700;&#x8981;n&#x6B21;&#x64CD;&#x4F5C;&#x3002;&#x4F46;&#x4F38;&#x5C55;&#x6811;&#x53EF;&#x4EE5;&#x4FDD;&#x8BC1;&#xFF0C;m&#x6B21;&#x7684;&#x8FDE;&#x7EED;&#x641C;&#x7D22;&#x64CD;&#x4F5C;&#x7684;&#x590D;&#x6742;&#x5EA6;&#x4E3A;mlog(n)&#x7684;&#x91CF;&#x7EA7;&#xFF0C;&#x800C;&#x4E0D;&#x662F;mn&#x91CF;&#x7EA7;&#x3002;</span></p>\r\n<p>&#xA0;</p>\r\n<p><span style=\"font-family: courier new,courier;\">&#x5177;</span><span style=\"font-family: courier new,courier;\">&#x4F53;&#x6765;&#x8BF4;&#xFF0C;&#x5728;&#x67E5;&#x8BE2;&#x5230;&#x76EE;&#x6807;&#x8282;&#x70B9;&#x540E;&#xFF0C;&#x4F38;&#x5C55;&#x6811;&#x4F1A;&#x4E0D;&#x65AD;&#x8FDB;&#x884C;&#x4E0B;&#x9762;&#x4E09;&#x79CD;&#x64CD;&#x4F5C;&#x4E2D;&#x7684;&#x4E00;&#x4E2A;&#xFF0C;&#x76F4;&#x5230;&#x76EE;&#x6807;&#x8282;&#x70B9;&#x6210;&#x4E3A;&#x6839;&#x8282;&#x70B9; &#xFF08;&#x6CE8;&#x610F;&#xFF0C;&#x7956;&#x7236;&#x8282;&#x70B9;&#x662F;&#x6307;&#x7236;&#x8282;&#x70B9;&#x7684;&#x7236;&#x8282;&#x70B9;&#xFF09;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">1. <span style=\"color: #800000;\">zig</span>: &#x5F53;&#x76EE;&#x6807;&#x8282;&#x70B9;&#x662F;&#x6839;&#x8282;&#x70B9;&#x7684;&#x5DE6;&#x5B50;&#x8282;&#x70B9;&#x6216;&#x53F3;&#x5B50;&#x8282;&#x70B9;&#x65F6;&#xFF0C;&#x8FDB;&#x884C;&#x4E00;&#x6B21;<span style=\"color: #ff0000;\">&#x5355;&#x65CB;&#x8F6C;</span>&#xFF0C;&#x5C06;&#x76EE;&#x6807;&#x8282;&#x70B9;&#x8C03;&#x6574;&#x5230;&#x6839;&#x8282;&#x70B9;&#x7684;&#x4F4D;&#x7F6E;&#x3002;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://images.cnitblog.com/blog/413416/201303/24005548-1360aa079a714d33b9ad9aba7b4b0e99.png\" alt=\"\" data-pinit=\"registered\"></span></p>\r\n<p style=\"text-align: center;\"><span style=\"font-family: courier new,courier;\">zig</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">2. <span style=\"color: #800000;\">zig-zag</span>: &#x5F53;&#x76EE;&#x6807;&#x8282;&#x70B9;&#x3001;&#x7236;&#x8282;&#x70B9;&#x548C;&#x7956;&#x7236;&#x8282;&#x70B9;&#x6210;&quot;zig-zag&quot;&#x6784;&#x578B;&#x65F6;&#xFF0C;&#x8FDB;&#x884C;&#x4E00;&#x6B21;<span style=\"color: #ff0000;\">&#x53CC;&#x65CB;&#x8F6C;</span>&#xFF0C;&#x5C06;&#x76EE;&#x6807;&#x8282;&#x70B9;&#x8C03;&#x6574;&#x5230;&#x7956;&#x7236;&#x8282;&#x70B9;&#x7684;&#x4F4D;&#x7F6E;&#x3002;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://images.cnitblog.com/blog/413416/201303/24005653-542a9b7c62f9478f853c19fafdf56fc7.png\" alt=\"\"></span></p>\r\n<p style=\"text-align: center;\"><span style=\"font-family: courier new,courier;\">zig-zag</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">3. <span style=\"color: #800000;\">zig-zig</span>&#xFF1A;&#x5F53;&#x76EE;&#x6807;&#x8282;&#x70B9;&#x3001;&#x7236;&#x8282;&#x70B9;&#x548C;&#x7956;&#x7236;&#x8282;&#x70B9;&#x6210;&quot;zig-zig&quot;&#x6784;&#x578B;&#x65F6;&#xFF0C;&#x8FDB;&#x884C;&#x4E00;&#x6B21;<span style=\"color: #ff0000;\">zig-zig&#x64CD;&#x4F5C;</span>&#xFF0C;&#x5C06;&#x76EE;&#x6807;&#x8282;&#x70B9;&#x8C03;&#x6574;&#x5230;&#x7956;&#x7236;&#x8282;&#x70B9;&#x7684;&#x4F4D;&#x7F6E;&#x3002;</span></p>\r\n<p style=\"text-align: center;\"><span style=\"font-family: courier new,courier;\"><img src=\"http://images.cnitblog.com/blog/413416/201303/24005839-74192595b09045a7a5d9cfa27c5f4a1c.png\" alt=\"\" data-pinit=\"registered\"></span></p>\r\n<p style=\"text-align: center;\"><span style=\"font-family: courier new,courier;\">zig-zig</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#x5355;&#x65CB;&#x8F6C;&#x64CD;&#x4F5C;&#x548C;&#x53CC;&#x65CB;&#x8F6C;&#x64CD;&#x4F5C;&#x89C1;<a id=\"cb_post_title_url\" class=\"postTitle2\" href=\"http://www.cnblogs.com/vamei/archive/2013/03/21/2964092.html\">AVL&#x6811;</a>&#x3002;&#x4E0B;&#x9762;&#x662F;zig-zig&#x64CD;&#x4F5C;&#x7684;&#x793A;&#x610F;&#x56FE;:</span></p>\r\n<p><span style=\"font-family: courier new,courier;\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://images.cnitblog.com/blog/413416/201303/24010743-e448568cb1684821a9f4f5ac269be33c.png\" alt=\"\" data-pinit=\"registered\"></span></p>\r\n<p style=\"text-align: center;\"><span style=\"font-family: courier new,courier;\">zig-zig operation</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#x5728;&#x4F38;&#x5C55;&#x6811;&#x4E2D;&#xFF0C;zig-zig&#x64CD;&#x4F5C;(&#x57FA;&#x672C;&#x4E0A;)&#x53D6;&#x4EE3;&#x4E86;AVL&#x6811;&#x4E2D;&#x7684;&#x5355;&#x65CB;&#x8F6C;&#x3002;&#x901A;&#x5E38;&#x6765;&#x8BF4;&#xFF0C;&#x5982;&#x679C;&#x4E0A;&#x9762;&#x7684;&#x6811;&#x662F;&#x5931;&#x8861;&#x7684;&#xFF0C;&#x90A3;&#x4E48;A&#x3001;B&#x5B50;&#x6811;&#x5F88;&#x53EF;&#x80FD;&#x6DF1;&#x5EA6;&#x6BD4;&#x8F83;&#x5927;&#x3002;&#x76F8;&#x5BF9;&#x4E8E;&#x5355;&#x65CB;&#x8F6C;(&#x60F3;&#x4E00;&#x4E0B;&#x5355;&#x65CB;&#x8F6C;&#x7684;&#x6548;&#x679C;)&#xFF0C;zig-zig&#x53EF;&#x4EE5;&#x5C06;A&#x3001;B&#x5B50;&#x6811;&#x653E;&#x5728;&#x6BD4;&#x8F83;&#x9AD8;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x4ECE;&#x800C;&#x51CF;&#x5C0F;&#x6811;&#x603B;&#x7684;&#x6DF1;&#x5EA6;&#x3002;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#xA0;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#x4E0B;&#x9762;&#x6211;&#x4EEC;&#x7528;&#x4E00;&#x4E2A;&#x5177;&#x4F53;&#x7684;&#x4F8B;&#x5B50;&#x793A;&#x8303;&#x3002;&#x6211;&#x4EEC;&#x5C06;&#x4ECE;&#x6811;&#x4E2D;&#x641C;&#x7D22;&#x8282;&#x70B9;2&#xFF1A;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://images.cnitblog.com/blog/413416/201303/24000157-85a16bbfdd41405aa24d75a9ead3e03a.png\" alt=\"\" data-pinit=\"registered\"></span></p>\r\n<p style=\"text-align: center;\"><span style=\"font-family: courier new,courier;\">Original</span></p>\r\n<p><span style=\"font-family: courier new,courier;\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://images.cnitblog.com/blog/413416/201303/24000214-edd6ec91d2ce46939a0d21d30f1b03bc.png\" alt=\"\" data-pinit=\"registered\"></span></p>\r\n<p style=\"text-align: center;\"><span style=\"font-family: courier new,courier;\">zig-zag (double rotation)</span></p>\r\n<p><span style=\"font-family: courier new,courier;\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://images.cnitblog.com/blog/413416/201303/24000247-0e55dc1a1de24c9c977b8c555ea549ad.png\" alt=\"\" data-pinit=\"registered\"></span></p>\r\n<p style=\"text-align: center;\"><span style=\"font-family: courier new,courier;\">zig-zig</span></p>\r\n<p style=\"text-align: center;\"><span style=\"font-family: courier new,courier;\"><img src=\"http://images.cnitblog.com/blog/413416/201303/24000306-1e644657ec8a465c95112cf0c87bb9a6.png\" alt=\"\" data-pinit=\"registered\"></span></p>\r\n<p style=\"text-align: center;\"><span style=\"font-family: courier new,courier;\">zig (single rotation at root)</span></p>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#x4E0A;&#x9762;&#x7684;&#x7B2C;&#x4E00;&#x6B21;&#x67E5;&#x8BE2;&#x9700;&#x8981;n&#x6B21;&#x64CD;&#x4F5C;&#x3002;&#x7136;&#x800C;&#x7ECF;&#x8FC7;&#x4E00;&#x6B21;&#x67E5;&#x8BE2;&#x540E;&#xFF0C;2&#x8282;&#x70B9;&#x6210;&#x4E3A;&#x4E86;&#x6839;&#x8282;&#x70B9;&#xFF0C;&#x6811;&#x7684;&#x6DF1;&#x5EA6;&#x5927;&#x51CF;&#x5C0F;&#x3002;&#x6574;&#x4F53;&#x4E0A;&#x770B;&#xFF0C;&#x6811;&#x7684;&#x5927;&#x90E8;&#x5206;&#x8282;&#x70B9;&#x6DF1;&#x5EA6;&#x90FD;&#x51CF;&#x5C0F;&#x3002;&#x6B64;&#x540E;&#x5BF9;&#x5404;&#x4E2A;&#x8282;&#x70B9;&#x7684;&#x67E5;&#x8BE2;&#x5C06;&#x66F4;&#x6709;&#x6548;&#x7387;&#x3002;</span></p>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#x4F38;&#x5C55;&#x6811;&#x7684;&#x53E6;&#x4E00;&#x4E2A;&#x597D;&#x5904;&#x662F;&#x5C06;&#x6700;&#x8FD1;&#x641C;&#x7D22;&#x7684;&#x8282;&#x70B9;&#x653E;&#x5728;&#x6700;&#x5BB9;&#x6613;&#x641C;&#x7D22;&#x7684;&#x6839;&#x8282;&#x70B9;&#x7684;&#x4F4D;&#x7F6E;&#x3002;&#x5728;&#x8BB8;&#x591A;&#x5E94;&#x7528;&#x73AF;&#x5883;&#x4E2D;&#xFF0C;&#x6BD4;&#x5982;&#x7F51;&#x7EDC;&#x5E94;&#x7528;&#x4E2D;&#xFF0C;&#x67D0;&#x4E9B;&#x56FA;&#x5B9A;&#x5185;&#x5BB9;&#x4F1A;&#x88AB;&#x5927;&#x91CF;&#x91CD;&#x590D;&#x8BBF;&#x95EE;(&#x6BD4;&#x5982;&#x6C5F;&#x5357;style&#x7684;MV)&#x3002;&#x4F38;&#x5C55;&#x6811;&#x53EF;&#x4EE5;&#x8BA9;&#x8FD9;&#x79CD;&#x91CD;&#x590D;&#x641C;&#x7D22;&#x4EE5;&#x5F88;&#x9AD8;&#x7684;&#x6548;&#x7387;&#x5B8C;&#x6210;&#x3002;</span></p>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#xA0;</span></p>\r\n<h3 style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#x4F38;&#x5C55;&#x6811;&#x7684;C&#x5B9E;&#x73B0;</span></h3>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"font-family: courier new,courier;\"><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> By Vamei </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> Splay Tree </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\n#include </span>&lt;stdio.h&gt;<span style=\"color: #000000;\">\r\n#include </span>&lt;stdlib.h&gt;<span style=\"color: #000000;\">\r\n\r\ntypedef </span><span style=\"color: #0000ff;\">struct</span> node *<span style=\"color: #000000;\">position;\r\ntypedef </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> ElementTP;\r\n\r\n</span><span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> node {\r\n    position parent;\r\n    ElementTP element;\r\n    position lchild;\r\n    position rchild;\r\n};\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> pointer =&gt; root node of the tree </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\ntypedef </span><span style=\"color: #0000ff;\">struct</span> node *<span style=\"color: #000000;\">TREE;\r\n\r\nTREE find_value(TREE, ElementTP);\r\nposition insert_value(TREE, ElementTP);\r\n\r\n</span><span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> splay_tree(TREE, position);\r\n</span><span style=\"color: #0000ff;\">static</span><span style=\"color: #000000;\"> position search_value(TREE, ElementTP);\r\n</span><span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> with_grandpa(TREE, position);\r\n\r\n</span><span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> insert_node_to_nonempty_tree(TREE, position);\r\n</span><span style=\"color: #0000ff;\">static</span><span style=\"color: #000000;\"> TREE left_single_rotate(TREE);\r\n</span><span style=\"color: #0000ff;\">static</span><span style=\"color: #000000;\"> TREE left_double_rotate(TREE);\r\n</span><span style=\"color: #0000ff;\">static</span><span style=\"color: #000000;\"> TREE right_single_rotate(TREE);\r\n</span><span style=\"color: #0000ff;\">static</span><span style=\"color: #000000;\"> TREE right_double_rotate(TREE);\r\n</span><span style=\"color: #0000ff;\">static</span><span style=\"color: #000000;\"> TREE left_zig_zig(TREE);\r\n</span><span style=\"color: #0000ff;\">static</span><span style=\"color: #000000;\"> TREE right_zig_zig(TREE);\r\n\r\n</span><span style=\"color: #0000ff;\">void</span> main(<span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\">) \r\n{\r\n    TREE tr;\r\n    tr </span>=<span style=\"color: #000000;\"> NULL;\r\n    tr </span>= insert_value(tr, <span style=\"color: #800080;\">6</span><span style=\"color: #000000;\">);\r\n    tr </span>= insert_value(tr, <span style=\"color: #800080;\">5</span><span style=\"color: #000000;\">);\r\n    tr </span>= insert_value(tr, <span style=\"color: #800080;\">4</span><span style=\"color: #000000;\">);\r\n    tr </span>= insert_value(tr, <span style=\"color: #800080;\">3</span><span style=\"color: #000000;\">);\r\n    tr </span>= insert_value(tr, <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">); \r\n    tr </span>= insert_value(tr, <span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">); \r\n\r\n    tr </span>= find_value(tr, <span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">);\r\n    printf(</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #800000;\">%d\\n</span><span style=\"color: #800000;\">&quot;</span>, tr-&gt;rchild-&gt;lchild-&gt;<span style=\"color: #000000;\">element);\r\n}\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> \r\n * insert a value into the tree\r\n * return root address of the tree\r\n </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\nposition insert_value(TREE tr, ElementTP value) \r\n{\r\n    position np;\r\n    </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> prepare the node </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\n    np </span>= (position) malloc(<span style=\"color: #0000ff;\">sizeof</span>(<span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> node));\r\n    np</span>-&gt;element =<span style=\"color: #000000;\"> value;\r\n    np</span>-&gt;parent  =<span style=\"color: #000000;\"> NULL;\r\n    np</span>-&gt;lchild  =<span style=\"color: #000000;\"> NULL;\r\n    np</span>-&gt;rchild  =<span style=\"color: #000000;\"> NULL;\r\n \r\n    </span><span style=\"color: #0000ff;\">if</span> (tr == NULL) tr =<span style=\"color: #000000;\"> np;\r\n    </span><span style=\"color: #0000ff;\">else</span><span style=\"color: #000000;\"> {\r\n        insert_node_to_nonempty_tree(tr, np);\r\n    }\r\n    </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> tr;\r\n}\r\n\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">\r\n *\r\n * return NUll if not found \r\n </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\nTREE find_value(TREE tr, ElementTP value)\r\n{\r\n    position np;\r\n\r\n    np </span>=<span style=\"color: #000000;\"> search_value(tr, value);\r\n    </span><span style=\"color: #0000ff;\">if</span> (np != NULL &amp;&amp; np !=<span style=\"color: #000000;\"> tr) {\r\n        splay_tree(tr, np);\r\n    }\r\n    </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> np;\r\n}\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">\r\n * splaying the tree after search\r\n </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> splay_tree(TREE tr, position np)\r\n{\r\n    </span><span style=\"color: #0000ff;\">while</span> (tr-&gt;lchild != np &amp;&amp; tr-&gt;rchild !=<span style=\"color: #000000;\"> np) {\r\n        with_grandpa(tr, np);\r\n    }\r\n    </span><span style=\"color: #0000ff;\">if</span> (tr-&gt;lchild ==<span style=\"color: #000000;\"> np) {\r\n        right_single_rotate(tr);\r\n    }\r\n    </span><span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span> (tr-&gt;rchild ==<span style=\"color: #000000;\"> np) {\r\n        left_single_rotate(tr);\r\n    }\r\n}\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">\r\n * dealing cases with grandparent node\r\n </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> with_grandpa(TREE tr, position np)\r\n{\r\n    position parent, grandPa;\r\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i,j; \r\n\r\n    parent  </span>= np-&gt;<span style=\"color: #000000;\">parent;\r\n    grandPa </span>= parent-&gt;<span style=\"color: #000000;\">parent;\r\n \r\n    i </span>= (grandPa-&gt;lchild == parent) ? -<span style=\"color: #800080;\">1</span> : <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\r\n    j </span>= (parent-&gt;lchild == np) ? -<span style=\"color: #800080;\">1</span> : <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\r\n    </span><span style=\"color: #0000ff;\">if</span> (i == -<span style=\"color: #800080;\">1</span> &amp;&amp; j == <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">) {\r\n        right_double_rotate(grandPa);\r\n    }\r\n    </span><span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span> (i == <span style=\"color: #800080;\">1</span> &amp;&amp; j == -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">) {\r\n        left_double_rotate(grandPa);\r\n    }\r\n    </span><span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span> (i == -<span style=\"color: #800080;\">1</span> &amp;&amp; j == -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">) {\r\n        right_zig_zig(grandPa);\r\n    }\r\n    </span><span style=\"color: #0000ff;\">else</span><span style=\"color: #000000;\"> {\r\n        left_zig_zig(grandPa);\r\n    }\r\n}\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">\r\n * search for value\r\n </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">static</span><span style=\"color: #000000;\"> position search_value(TREE tr, ElementTP value) \r\n{\r\n    </span><span style=\"color: #0000ff;\">if</span> (tr == NULL) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> NULL; \r\n\r\n    </span><span style=\"color: #0000ff;\">if</span> (tr-&gt;element ==<span style=\"color: #000000;\"> value) {\r\n        </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> tr;\r\n    }\r\n    </span><span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span> (value &lt; tr-&gt;<span style=\"color: #000000;\">element) {\r\n        </span><span style=\"color: #0000ff;\">return</span> search_value(tr-&gt;<span style=\"color: #000000;\">lchild, value);\r\n    }\r\n    </span><span style=\"color: #0000ff;\">else</span><span style=\"color: #000000;\"> {\r\n        </span><span style=\"color: #0000ff;\">return</span> search_value(tr-&gt;<span style=\"color: #000000;\">rchild, value);\r\n    }\r\n}\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> \r\n * left single rotation \r\n * return the new root\r\n </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">static</span><span style=\"color: #000000;\"> TREE left_single_rotate(TREE tr) \r\n{\r\n    TREE newRoot, parent;\r\n    parent  </span>= tr-&gt;<span style=\"color: #000000;\">parent;\r\n    newRoot </span>= tr-&gt;<span style=\"color: #000000;\">rchild;\r\n    </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> detach &amp; attach </span><span style=\"color: #008000;\">*/</span> \r\n    <span style=\"color: #0000ff;\">if</span> (newRoot-&gt;lchild != NULL) newRoot-&gt;lchild-&gt;parent =<span style=\"color: #000000;\"> tr;\r\n    tr</span>-&gt;rchild = newRoot-&gt;<span style=\"color: #000000;\">lchild;\r\n   \r\n    </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> raise new root node </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\n    newRoot</span>-&gt;lchild =<span style=\"color: #000000;\"> tr;\r\n    newRoot</span>-&gt;parent =<span style=\"color: #000000;\"> parent;\r\n    </span><span style=\"color: #0000ff;\">if</span> (parent !=<span style=\"color: #000000;\"> NULL) {\r\n        </span><span style=\"color: #0000ff;\">if</span> (parent-&gt;lchild ==<span style=\"color: #000000;\"> tr) {\r\n        parent</span>-&gt;lchild =<span style=\"color: #000000;\"> newRoot;\r\n    }\r\n    </span><span style=\"color: #0000ff;\">else</span><span style=\"color: #000000;\"> {\r\n        parent</span>-&gt;rchild =<span style=\"color: #000000;\"> newRoot;\r\n    }\r\n    }\r\n    tr</span>-&gt;parent =<span style=\"color: #000000;\"> newRoot;\r\n    </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> newRoot;\r\n}\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> \r\n * right single rotation \r\n * return the new root\r\n </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">static</span><span style=\"color: #000000;\"> TREE right_single_rotate(TREE tr) \r\n{\r\n    TREE newRoot, parent;\r\n    parent  </span>= tr-&gt;<span style=\"color: #000000;\">parent;\r\n    newRoot </span>= tr-&gt;<span style=\"color: #000000;\">lchild;\r\n\r\n    </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> detach &amp; attach </span><span style=\"color: #008000;\">*/</span>\r\n    <span style=\"color: #0000ff;\">if</span> (newRoot-&gt;rchild != NULL) newRoot-&gt;rchild-&gt;parent =<span style=\"color: #000000;\"> tr;\r\n    tr</span>-&gt;lchild = newRoot-&gt;<span style=\"color: #000000;\">rchild;\r\n  \r\n    </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> raise new root node </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\n    newRoot</span>-&gt;rchild =<span style=\"color: #000000;\"> tr;\r\n    newRoot</span>-&gt;parent =<span style=\"color: #000000;\"> parent;\r\n    </span><span style=\"color: #0000ff;\">if</span> (parent !=<span style=\"color: #000000;\"> NULL) {\r\n        </span><span style=\"color: #0000ff;\">if</span> (parent-&gt;lchild ==<span style=\"color: #000000;\"> tr) {\r\n        parent</span>-&gt;lchild =<span style=\"color: #000000;\"> newRoot;\r\n    }\r\n    </span><span style=\"color: #0000ff;\">else</span><span style=\"color: #000000;\"> {\r\n        parent</span>-&gt;rchild =<span style=\"color: #000000;\"> newRoot;\r\n    }\r\n    }\r\n    tr</span>-&gt;parent =<span style=\"color: #000000;\"> newRoot;\r\n    </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> newRoot;\r\n}\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">\r\n * left double rotation\r\n * return\r\n </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">static</span><span style=\"color: #000000;\"> TREE left_double_rotate(TREE tr) \r\n{\r\n    right_single_rotate(tr</span>-&gt;<span style=\"color: #000000;\">rchild);\r\n    </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> left_single_rotate(tr);\r\n}\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">\r\n * right double rotation\r\n * return\r\n </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">static</span><span style=\"color: #000000;\"> TREE right_double_rotate(TREE tr) \r\n{\r\n    left_single_rotate(tr</span>-&gt;<span style=\"color: #000000;\">lchild);\r\n    </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> right_single_rotate(tr);\r\n}\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">\r\n * insert a node to a non-empty tree\r\n * called by insert_value()\r\n </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> insert_node_to_nonempty_tree(TREE tr, position np)\r\n{\r\n    </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> insert the node </span><span style=\"color: #008000;\">*/</span>\r\n    <span style=\"color: #0000ff;\">if</span>(np-&gt;element &lt;= tr-&gt;<span style=\"color: #000000;\">element) {\r\n        </span><span style=\"color: #0000ff;\">if</span> (tr-&gt;lchild ==<span style=\"color: #000000;\"> NULL) {\r\n            </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> then tr-&gt;lchild is the proper place </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\n            tr</span>-&gt;lchild =<span style=\"color: #000000;\"> np;\r\n            np</span>-&gt;parent =<span style=\"color: #000000;\"> tr;\r\n            </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\">;\r\n        }\r\n        </span><span style=\"color: #0000ff;\">else</span><span style=\"color: #000000;\"> {\r\n            insert_node_to_nonempty_tree(tr</span>-&gt;<span style=\"color: #000000;\">lchild, np);\r\n        }\r\n    }\r\n    </span><span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span>(np-&gt;element &gt; tr-&gt;<span style=\"color: #000000;\">element) {\r\n        </span><span style=\"color: #0000ff;\">if</span> (tr-&gt;rchild ==<span style=\"color: #000000;\"> NULL) {\r\n            tr</span>-&gt;rchild =<span style=\"color: #000000;\"> np;\r\n            np</span>-&gt;parent =<span style=\"color: #000000;\"> tr;\r\n            </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\">;\r\n        }\r\n        </span><span style=\"color: #0000ff;\">else</span><span style=\"color: #000000;\"> {\r\n            insert_node_to_nonempty_tree(tr</span>-&gt;<span style=\"color: #000000;\">rchild, np);\r\n        }\r\n    }\r\n}\r\n<br><span style=\"color: #008000;\">/*</span><br><span style=\"color: #008000;\"> * right zig-zig operation</span><br><span style=\"color: #008000;\"> */\r\n</span></span><span style=\"color: #0000ff;\">static</span><span style=\"color: #000000;\"> TREE right_zig_zig(TREE tr)\r\n{\r\n    position parent,middle,newRoot;\r\n    parent  </span>= tr-&gt;<span style=\"color: #000000;\">parent;\r\n    middle  </span>= tr-&gt;<span style=\"color: #000000;\">lchild;\r\n    newRoot </span>= tr-&gt;lchild-&gt;<span style=\"color: #000000;\">lchild;\r\n\r\n    tr</span>-&gt;lchild = middle-&gt;<span style=\"color: #000000;\">rchild;\r\n    </span><span style=\"color: #0000ff;\">if</span> (middle-&gt;rchild != NULL) middle-&gt;rchild-&gt;parent =<span style=\"color: #000000;\"> tr;\r\n\r\n    middle</span>-&gt;rchild =<span style=\"color: #000000;\"> tr;\r\n    tr</span>-&gt;parent     =<span style=\"color: #000000;\"> middle;\r\n\r\n    middle</span>-&gt;lchild = newRoot-&gt;<span style=\"color: #000000;\">rchild;\r\n    </span><span style=\"color: #0000ff;\">if</span> (newRoot-&gt;rchild != NULL) newRoot-&gt;rchild-&gt;parent =<span style=\"color: #000000;\"> middle;\r\n\r\n    newRoot</span>-&gt;rchild =<span style=\"color: #000000;\"> middle;\r\n    middle</span>-&gt;parent  =<span style=\"color: #000000;\"> newRoot;\r\n\r\n    newRoot</span>-&gt;parent =<span style=\"color: #000000;\"> parent;\r\n    </span><span style=\"color: #0000ff;\">if</span> (parent !=<span style=\"color: #000000;\"> NULL) {\r\n        </span><span style=\"color: #0000ff;\">if</span> (parent-&gt;lchild ==<span style=\"color: #000000;\"> tr) {\r\n        parent</span>-&gt;lchild =<span style=\"color: #000000;\"> newRoot;\r\n    }\r\n    </span><span style=\"color: #0000ff;\">else</span><span style=\"color: #000000;\"> {\r\n        parent</span>-&gt;rchild =<span style=\"color: #000000;\"> newRoot;\r\n    }\r\n    }\r\n    </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> newRoot;  \r\n}\r\n<br><span style=\"color: #008000;\">/*</span><br><span style=\"color: #008000;\"> * left zig-zig operation</span><br><span style=\"color: #008000;\"> */\r\n</span></span><span style=\"color: #0000ff;\">static</span><span style=\"color: #000000;\"> TREE left_zig_zig(TREE tr)\r\n{\r\n    position parent,middle,newRoot;\r\n    parent  </span>= tr-&gt;<span style=\"color: #000000;\">parent;\r\n    middle  </span>= tr-&gt;<span style=\"color: #000000;\">rchild;\r\n    newRoot </span>= tr-&gt;rchild-&gt;<span style=\"color: #000000;\">rchild;\r\n\r\n    tr</span>-&gt;rchild = middle-&gt;<span style=\"color: #000000;\">lchild;\r\n    </span><span style=\"color: #0000ff;\">if</span> (middle-&gt;lchild != NULL) middle-&gt;lchild-&gt;parent =<span style=\"color: #000000;\"> tr;\r\n\r\n    middle</span>-&gt;lchild =<span style=\"color: #000000;\"> tr;\r\n    tr</span>-&gt;parent     =<span style=\"color: #000000;\"> middle;\r\n\r\n    middle</span>-&gt;rchild = newRoot-&gt;<span style=\"color: #000000;\">lchild;\r\n    </span><span style=\"color: #0000ff;\">if</span> (newRoot-&gt;lchild != NULL) newRoot-&gt;lchild-&gt;parent =<span style=\"color: #000000;\"> middle;\r\n\r\n    newRoot</span>-&gt;lchild =<span style=\"color: #000000;\"> middle;\r\n    middle</span>-&gt;parent  =<span style=\"color: #000000;\"> newRoot;\r\n\r\n    newRoot</span>-&gt;parent =<span style=\"color: #000000;\"> parent;\r\n    </span><span style=\"color: #0000ff;\">if</span> (parent !=<span style=\"color: #000000;\"> NULL) {\r\n        </span><span style=\"color: #0000ff;\">if</span> (parent-&gt;rchild ==<span style=\"color: #000000;\"> tr) {\r\n        parent</span>-&gt;rchild =<span style=\"color: #000000;\"> newRoot;\r\n    }\r\n    </span><span style=\"color: #0000ff;\">else</span><span style=\"color: #000000;\"> {\r\n        parent</span>-&gt;lchild =<span style=\"color: #000000;\"> newRoot;\r\n    }\r\n    }\r\n    </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> newRoot;  \r\n}</span></span></pre>\r\n</div>\r\n<p><span style=\"font-family: courier new,courier;\">&#x8FD0;&#x884C;&#x7ED3;&#x679C;:</span></p>\r\n<p><span style=\"color: #800000; font-family: courier new,courier;\">4</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#xA0;</span></p>\r\n<h3><span style=\"font-family: courier new,courier;\">&#x603B;&#x7ED3;</span></h3>\r\n<p><span style=\"font-family: courier new,courier;\">splay tree, m operations: mlog(n)</span></p>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">zig-zig</span></p>\r\n<p style=\"text-align: left;\">&#xA0;</p>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#x6B22;&#x8FCE;&#x7EE7;&#x7EED;&#x9605;&#x8BFB;<a href=\"http://www.cnblogs.com/vamei/archive/2013/03/22/2974052.html\">&#x201C;&#x7EB8;&#x4E0A;&#x8C08;&#x5175;: &#x7B97;&#x6CD5;&#x4E0E;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x201D;</a>&#x7CFB;&#x5217;&#x3002;</span></p>\r\n<p style=\"text-align: left;\">&#xA0;</p>"}