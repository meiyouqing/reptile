{"content":"<div class=\"postBody\">\r\n<div id=\"cnblogs_post_body\">\r\n<p><span style=\"font-family: courier new,courier;\">&#x4F5C;&#x8005;&#xFF1A;Vamei &#x51FA;&#x5904;&#xFF1A;http://www.cnblogs.com/vamei &#x6B22;&#x8FCE;&#x8F6C;&#x8F7D;&#xFF0C;&#x4E5F;&#x8BF7;&#x4FDD;&#x7559;&#x8FD9;&#x6BB5;&#x58F0;&#x660E;&#x3002;&#x8C22;&#x8C22;&#xFF01;</span></p>\r\n</div>\r\n</div>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#xA0;</span></p>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\"><span style=\"color: #ff0000;\">&#x961F;&#x5217;(queue)</span>&#x662F;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x800C;&#x5E38;&#x89C1;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x3002;&#x961F;&#x5217;&#x4E5F;&#x662F;&#x6709;&#x5E8F;&#x7684;&#x5143;&#x7D20;&#x96C6;&#x5408;&#x3002;&#x961F;&#x5217;&#x6700;&#x5927;&#x7684;&#x7279;&#x5F81;&#x662F;<span style=\"color: #ff0000;\">First In, First Out</span> (FIFO&#xFF0C;&#x5148;&#x8FDB;&#x5148;&#x51FA;)&#xFF0C;&#x5373;&#x5148;&#x8FDB;&#x5165;&#x961F;&#x5217;&#x7684;&#x5143;&#x7D20;&#xFF0C;&#x5148;&#x88AB;&#x53D6;&#x51FA;&#x3002;&#x8FD9;&#x4E00;&#x70B9;&#x4E0E;<a href=\"http://www.cnblogs.com/vamei/archive/2013/03/14/2960201.html\">&#x6808;(stack)</a>&#x5F62;&#x6210;&#x6709;&#x8DA3;&#x7684;&#x5BF9;&#x6BD4;&#x3002;&#x961F;&#x5217;&#x5728;&#x751F;&#x6D3B;&#x4E2D;&#x5F88;&#x5E38;&#x89C1;&#xFF0C;&#x6392;&#x961F;&#x4E70;&#x7968;&#x3001;&#x6392;&#x961F;&#x7B49;&#x8F66;&#x2026;&#x2026; &#x5148;&#x5230;&#x7684;&#x4EBA;&#x5148;&#x5F97;&#x5230;&#x670D;&#x52A1;&#x5E76;&#x79BB;&#x5F00;&#x961F;&#x5217;&#xFF0C;&#x540E;&#x6765;&#x7684;&#x4EBA;&#x52A0;&#x5165;&#x5230;&#x961F;&#x5217;&#x7684;&#x6700;&#x540E;&#x3002;&#x961F;&#x5217;&#x662F;&#x6BD4;&#x8F83;&#x516C;&#x5E73;&#x7684;&#x5206;&#x914D;&#x6709;&#x9650;&#x8D44;&#x6E90;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;&#x53EF;&#x4EE5;&#x8BA9;&#x961F;&#x5217;&#x7684;&#x4EBA;&#x4EE5;&#x76F8;&#x4F3C;&#x7684;&#x7B49;&#x5F85;&#x65F6;&#x95F4;&#x83B7;&#x5F97;&#x670D;&#x52A1;&#x3002;</span></p>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://images.cnitblog.com/blog/413416/201303/15214636-2622f17a76f648c6bad166150b48a6f0.jpg\" alt=\"\" width=\"461\" height=\"544\"></span></p>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#xA0;</span></p>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#x961F;&#x5217;&#x652F;&#x6301;&#x4E24;&#x4E2A;&#x64CD;&#x4F5C;&#xFF0C;&#x961F;&#x9996;&#x7684;&#x5143;&#x7D20;<span style=\"color: #ff0000;\">&#x79BB;&#x5F00;&#x961F;&#x5217;(dequeue)</span>&#xFF0C;&#x548C;&#x65B0;&#x5143;&#x7D20;<span style=\"color: #ff0000;\">&#x52A0;&#x5165;&#x961F;&#x5C3E;(enqueue)</span>&#x3002;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://images.cnitblog.com/blog/413416/201303/15213417-47289ea8ebc440aa903f67becbd06a2f.png\" alt=\"\"></span></p>\r\n<p style=\"text-align: center;\"><span style=\"font-family: courier new,courier;\">&#x961F;&#x5217;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#xA0;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#x961F;&#x5217;&#x5728;&#x8BA1;&#x7B97;&#x673A;&#x4E2D;&#x5E94;&#x7528;&#x5F88;&#x5E7F;&#x6CDB;&#x3002;&#x4E00;&#x4E2A;&#x7ECF;&#x5178;&#x7684;&#x5E94;&#x7528;&#x662F;&#x6D88;&#x606F;&#x961F;&#x5217;(&#x53C2;&#x8003;<a title=\"&#x53D1;&#x5E03;&#x4E8E;2012-10-10 12:39\" href=\"http://www.cnblogs.com/vamei/archive/2012/10/10/2715398.html\">Linux&#x8FDB;&#x7A0B;&#x95F4;&#x901A;&#x4FE1;</a>)&#xFF0C;&#x5B9E;&#x9645;&#x4E0A;&#x5C31;&#x662F;&#x5229;&#x7528;&#x961F;&#x5217;&#x6765;&#x5206;&#x914D;&#x6709;&#x9650;&#x7684;&#x8FDB;&#x7A0B;&#x3002;&#x8FD8;&#x6709;FIFO&#x6587;&#x4EF6;(&#x54E6;&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#xFF0C;&#x8FD9;&#x79CD;&#x6587;&#x4EF6;&#x53EB;&#x505A;FIFO&#xFF0C;&#x80AF;&#x5B9A;&#x662F;&#x548C;&#x961F;&#x5217;&#x6709;&#x5173;)&#xFF0C;&#x7528;&#x4EE5;&#x5B9E;&#x73B0;&#x7BA1;&#x9053;&#x4F20;&#x8F93;&#x3002;&#x518D;&#x6BD4;&#x5982;&#xFF0C;&#x6211;&#x4EEC;&#x5C06;&#x591A;&#x4E2A;&#x6253;&#x5370;&#x4EFB;&#x52A1;&#x53D1;&#x9001;&#x7ED9;&#x6253;&#x5370;&#x673A;&#xFF0C;&#x6253;&#x5370;&#x673A;&#x4E5F;&#x662F;&#x4F7F;&#x7528;&#x961F;&#x5217;&#x6765;&#x5B89;&#x6392;&#x4EFB;&#x52A1;&#x7684;&#x987A;&#x5E8F;&#x3002;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#xA0;</span></p>\r\n<h3><span style=\"font-family: courier new,courier;\">&#x961F;&#x5217;&#x7684;C&#x5B9E;&#x73B0; (&#x57FA;&#x4E8E;&#x8868;)</span></h3>\r\n<p><span style=\"font-family: courier new,courier;\">&#x548C;&#x6808;&#x76F8;&#x4F3C;&#xFF0C;&#x961F;&#x5217;&#x4E5F;&#x53EF;&#x4EE5;&#x6709;&#x591A;&#x79CD;&#x5B9E;&#x73B0;&#x65B9;&#x5F0F;&#xFF0C;&#x8FD9;&#x91CC;&#x662F;&#x57FA;&#x4E8E;&#x5355;&#x94FE;&#x8868;&#x7684;&#x5B9E;&#x73B0;&#x3002;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#x4E0E;<a href=\"http://www.cnblogs.com/vamei/archive/2013/03/14/2958940.html\">&#x8868;(list)</a>&#x4E2D;&#x7684;&#x5B9E;&#x73B0;&#x65B9;&#x5F0F;&#x7565;&#x6709;&#x4E0D;&#x540C;&#x7684;&#x662F;&#xFF0C;&#x8FD9;&#x91CC;&#x7684;head node&#x6709;&#x4E24;&#x4E2A;&#x6307;&#x9488;&#xFF0C;&#x4E00;&#x4E2A;(next)&#x6307;&#x5411;&#x4E0B;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x4E00;&#x4E2A;(end)&#x6307;&#x5411;&#x961F;&#x5217;&#x7684;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x3002;&#x8FD9;&#x6837;&#x505A;&#x7684;&#x76EE;&#x7684;&#x662F;&#x65B9;&#x4FBF;&#x6211;&#x4EEC;&#x627E;&#x5230;&#x961F;&#x5C3E;&#xFF0C;&#x4EE5;&#x65B9;&#x4FBF;&#x7684;&#x8FDB;&#x884C;enqueue&#x64CD;&#x4F5C;&#x3002;&#x6211;&#x4EEC;&#x4F9D;&#x7136;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x4E4B;&#x524D;&#x5B9A;&#x4E49;&#x7684;&#x8868;&#xFF0C;&#x5728;&#x9700;&#x8981;&#x627E;&#x5230;&#x961F;&#x5C3E;&#x7684;&#x65F6;&#x5019;&#x904D;&#x5386;&#x641C;&#x7D22;&#x5230;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x3002;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://images.cnitblog.com/blog/413416/201303/15220049-8628ad7e304d43ff937dcbb7f82d5679.png\" alt=\"\"></span></p>\r\n<p style=\"text-align: center;\"><span style=\"font-family: courier new,courier;\">&#x7528;&#x4E8E;&#x961F;&#x5217;&#x7684;&#x8868;</span></p>\r\n<p style=\"text-align: left;\"><span style=\"font-family: courier new,courier;\">&#x4E0B;&#x9762;&#x662F;&#x4EE3;&#x7801;:</span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"font-family: courier new,courier;\"><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> By Vamei </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> use single-linked list to implement queue </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\n#include </span>&lt;stdio.h&gt;<span style=\"color: #000000;\">\r\n#include </span>&lt;stdlib.h&gt;<span style=\"color: #000000;\">\r\n\r\ntypedef </span><span style=\"color: #0000ff;\">struct</span> node *<span style=\"color: #000000;\">position;\r\ntypedef </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> ElementTP;\r\n\r\n</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> point to the head node of the list</span>\r\ntypedef <span style=\"color: #0000ff;\">struct</span> HeadNode *<span style=\"color: #000000;\">QUEUE;\r\n \r\n</span><span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> node {\r\n    ElementTP element;\r\n    position next;\r\n};\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">\r\n * CAUTIOUS: &quot;HeadNode&quot; is different from &quot;node&quot;, \r\n * it&apos;s another struct\r\n * end: points to the last value in the queue\r\n </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> HeadNode {\r\n    ElementTP element;\r\n    position next;\r\n    position end;\r\n};\r\n\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">\r\n * Operations\r\n </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\nQUEUE init_queue(</span><span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\">);\r\n</span><span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> delete_queue(QUEUE);\r\n</span><span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> enqueue(QUEUE, ElementTP);\r\nElementTP dequeue(QUEUE);\r\n</span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> is_null(QUEUE);\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">\r\n * Test\r\n </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">void</span> main(<span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\">)\r\n{\r\n    ElementTP a;\r\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i;\r\n    QUEUE qu;\r\n    qu </span>=<span style=\"color: #000000;\"> init_queue();\r\n\r\n    enqueue(qu, </span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);\r\n    enqueue(qu, </span><span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">);\r\n    enqueue(qu, </span><span style=\"color: #800080;\">8</span><span style=\"color: #000000;\">);\r\n    printf(</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #800000;\">Queue is null? %d\\n</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #000000;\">, is_null(qu));\r\n    </span><span style=\"color: #0000ff;\">for</span> (i=<span style=\"color: #800080;\">0</span>; i&lt;<span style=\"color: #800080;\">3</span>; i++<span style=\"color: #000000;\">) {\r\n        a </span>=<span style=\"color: #000000;\"> dequeue(qu);\r\n        printf(</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #800000;\">dequeue: %d\\n</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #000000;\">, a);\r\n    }\r\n\r\n    printf(</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #800000;\">Queue is null? %d\\n</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #000000;\">, is_null(qu));    \r\n    delete_queue(qu);\r\n}\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">\r\n * initiate the queue\r\n * malloc the head node.\r\n * Head node doesn&apos;t store valid data\r\n * head-&gt;next is the first node in the queue.\r\n </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\nQUEUE init_queue(</span><span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\">)\r\n{\r\n    QUEUE hnp;\r\n    hnp </span>= (QUEUE) malloc(<span style=\"color: #0000ff;\">sizeof</span>(<span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> HeadNode));\r\n    hnp</span>-&gt;next = NULL;  <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> qu-&gt;next is the first node</span>\r\n    hnp-&gt;end  =<span style=\"color: #000000;\"> NULL;\r\n    </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> hnp;\r\n}\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">\r\n * dequeue all elements \r\n * and then delete head node\r\n </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> delete_queue(QUEUE qu)\r\n{\r\n    </span><span style=\"color: #0000ff;\">while</span>(!<span style=\"color: #000000;\">is_null(qu)) {\r\n        dequeue(qu);\r\n    }\r\n    free(qu);\r\n}\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">\r\n * enqueue a value to the end of the queue \r\n </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> enqueue(QUEUE qu, ElementTP value) \r\n{\r\n    position np, oldEnd;\r\n    oldEnd </span>= qu-&gt;<span style=\"color: #000000;\">end;    \r\n\r\n    np </span>= (position) malloc(<span style=\"color: #0000ff;\">sizeof</span>(<span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> node));\r\n    np</span>-&gt;element  =<span style=\"color: #000000;\"> value;\r\n    np</span>-&gt;next     =<span style=\"color: #000000;\"> NULL;\r\n\r\n    </span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> if queue is empyt, then oldEnd is NULL </span><span style=\"color: #008000;\">*/</span>\r\n    <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (oldEnd) {\r\n        oldEnd</span>-&gt;next =<span style=\"color: #000000;\"> np;\r\n    }\r\n    </span><span style=\"color: #0000ff;\">else</span><span style=\"color: #000000;\"> {\r\n        qu</span>-&gt;next     =<span style=\"color: #000000;\"> np;\r\n    }\r\n\r\n    qu</span>-&gt;end =<span style=\"color: #000000;\"> np; \r\n}\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> \r\n * dequeue the first value\r\n </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\nElementTP dequeue(QUEUE qu)\r\n{\r\n    ElementTP element;\r\n    position first, newFirst;\r\n    </span><span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (is_null(qu)) {\r\n        printf(</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #800000;\">dequeue() on an empty queue</span><span style=\"color: #800000;\">&quot;</span><span style=\"color: #000000;\">);\r\n        exit(</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);\r\n    } \r\n    </span><span style=\"color: #0000ff;\">else</span><span style=\"color: #000000;\"> {\r\n        first        </span>= qu-&gt;<span style=\"color: #000000;\">next;\r\n        element      </span>= first-&gt;<span style=\"color: #000000;\">element;     \r\n        newFirst     </span>= first-&gt;<span style=\"color: #000000;\">next;\r\n        qu</span>-&gt;next     =<span style=\"color: #000000;\"> newFirst;\r\n        free(first);\r\n        </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> element;\r\n    } \r\n}\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">\r\n * check: queue is empty?\r\n </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> is_null(QUEUE qu)\r\n{\r\n    </span><span style=\"color: #0000ff;\">return</span> (qu-&gt;next ==<span style=\"color: #000000;\"> NULL);\r\n}</span></span></pre>\r\n</div>\r\n<p><span style=\"font-family: courier new,courier;\">&#xA0;</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#x8FD0;&#x884C;&#x7ED3;&#x679C;&#x5982;&#x4E0B;:</span></p>\r\n<p><span style=\"color: #800000; font-family: courier new,courier;\">Queue is null? 0</span><br><span style=\"color: #800000; font-family: courier new,courier;\">dequeue: 1</span><br><span style=\"color: #800000; font-family: courier new,courier;\">dequeue: 2</span><br><span style=\"color: #800000; font-family: courier new,courier;\">dequeue: 8</span><br><span style=\"color: #800000; font-family: courier new,courier;\">Queue is null? 1</span></p>\r\n<p><span style=\"font-family: courier new,courier;\">&#xA0;</span></p>\r\n<h3><span style=\"color: #000000; font-family: courier new,courier;\">&#x603B;&#x7ED3;</span></h3>\r\n<p><span style=\"color: #000000; font-family: courier new,courier;\">&#x961F;&#x5217;&#xFF0C;FIFO</span></p>\r\n<p><span style=\"color: #000000; font-family: courier new,courier;\">enqueue, dequeue</span></p>\r\n<p>&#xA0;</p>\r\n<p><span style=\"color: #000000; font-family: courier new,courier;\">&#x6B22;&#x8FCE;&#x7EE7;&#x7EED;&#x9605;&#x8BFB;<a href=\"http://www.cnblogs.com/vamei/archive/2013/03/22/2974052.html\">&#x201C;&#x7EB8;&#x4E0A;&#x8C08;&#x5175;: &#x7B97;&#x6CD5;&#x4E0E;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x201D;</a>&#x7CFB;&#x5217;&#x3002;</span></p>\r\n<p>&#xA0;</p>"}